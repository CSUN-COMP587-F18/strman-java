/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 10 02:49:41 GMT 2018
 */

package evo.com.strman;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.strman.Strman;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Strman_ESTest extends Strman_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = Strman.lowerFirst("&simplus;");
      assertNotNull(string0);
      assertEquals("&simplus;", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[2] = "&simplus;";
      String string1 = Strman.join(stringArray0, "&simplus;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null&simplus;null&simplus;&simplus;", string1);
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.endsWith("", stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "7MUC j,N\"Gg(y*t3Js";
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = "7MUC j,N\"Gg(y*t3Js";
      stringArray0[2] = "7MUC j,N\"Gg(y*t3Js";
      String string1 = Strman.append("7MUC j,N\"Gg(y*t3Js", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7MUC j,N\"Gg(y*t3Js 7MUC j,N\"Gg(y*t3Js7MUC j,N\"Gg(y*t3Js", string1);
      assertEquals(3, stringArray0.length);
      
      String string2 = "\uD835\uDD22";
      String string3 = Strman.removeLeft("\uD835\uDD22", "d+nq");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\uD835\uDD22", string3);
      
      boolean boolean0 = true;
      String string4 = Strman.removeRight("7MUC j,N\"Gg(y*t3Js", "7MUC j,N\"Gg(y*t3Js", true);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray1 = Strman.words(" ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.base64Decode("input can't be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 20
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ZT6tep*^awy1`;";
      stringArray0[1] = "ZT6tep*^awy1`;";
      stringArray0[2] = "ZT6tep*^awy1`;";
      boolean boolean0 = Strman.isUpperCase("ZT6tep*^awy1`;");
      assertFalse(boolean0);
      
      String string0 = "QEYs'R)5p{<";
      String string1 = Strman.replace("QEYs'R)5p{<", "ZT6tep*^awy1`;", "", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QEYs'R)5p{<", string1);
      
      String string2 = Strman.lowerFirst("-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-", string2);
      
      String string3 = Strman.decEncode("ZT6tep*^awy1`;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("0009000084000540011600101001120004200094000970011900121000490009600059", string3);
      
      // Undeclared exception!
      try { 
        Strman.dasherize("-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0fsEr*npQYHQ>k/6XL;";
      stringArray0[1] = "0fsEr*npQYHQ>k/6XL;";
      stringArray0[2] = "0fsEr*npQYHQ>k/6XL;";
      stringArray0[3] = "0fsEr*npQYHQ>k/6XL;";
      String string0 = Strman.prepend("0fsEr*npQYHQ>k/6XL;", stringArray0);
      assertNotNull(string0);
      assertEquals("0fsEr*npQYHQ>k/6XL;0fsEr*npQYHQ>k/6XL;0fsEr*npQYHQ>k/6XL;0fsEr*npQYHQ>k/6XL;0fsEr*npQYHQ>k/6XL;", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = Strman.formatNumber((-1L));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1", string1);
      
      String string2 = "leftEncloser can't be null";
      String string3 = Strman.format("leftEncloser can't be null", stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("leftEncloser can't be null", string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = Strman.leftTrim("0fsEr*npQYHQ>k/6XL;");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("0fsEr*npQYHQ>k/6XL;", string4);
      
      String string5 = Strman.slugify("`");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = Strman.toStudlyCase("0fsEr*npQYHQ>k/6XL;");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("0fsEr*npQYHQ>k/6XL;", string6);
      
      // Undeclared exception!
      try { 
        Strman.binDecode("-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Strman.removeSpaces(":vm3-YV%ioG%S");
      assertNotNull(string0);
      assertEquals(":vm3-YV%ioG%S", string0);
      
      String string1 = Strman.base64Encode("(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("KA==", string1);
      
      String string2 = Strman.transliterate("!d_;@yh$x99OaM");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!d_;atyh$x99OaM", string2);
      
      String string3 = Strman.htmlDecode("&|;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Strman.truncate("", 370, "KA==");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "xuTT\\S+1/0_6$O8;w|";
      String string1 = Strman.lowerFirst("xuTTS+1/0_6$O8;w|");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("xuTTS+1/0_6$O8;w|", string1);
      
      String[] stringArray0 = Strman.chars("Input array 'strings' can't be null");
      assertNotNull(stringArray0);
      assertEquals(35, stringArray0.length);
      
      String[] stringArray1 = Strman.chars("separator can't be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(23, stringArray1.length);
      
      boolean boolean0 = Strman.isBlank("\r\n?|\n");
      assertFalse(boolean0);
      
      String string2 = Strman.toKebabCase("\r\n?|\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?|", string2);
      
      long long0 = Strman.countSubstr("Input array 'strings' can't be null", "Input array 'strings' can't be null");
      assertEquals(1L, long0);
      
      // Undeclared exception!
      try { 
        Strman.toSnakeCase("-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "7n us$6Mfm7n us$6Mfm";
      long long0 = Strman.countSubstr("y3KNz,", "7n us$6Mfm7n us$6Mfm");
      assertEquals(0L, long0);
      
      String string1 = Strman.upperFirst("7n us$6Mfm7n us$6Mfm");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7n us$6Mfm7n us$6Mfm", string1);
      
      String string2 = "-";
      // Undeclared exception!
      try { 
        Strman.toDecamelize("-", "=Vk?Zpl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = ";z4";
      boolean boolean0 = Strman.isEnclosedBetween(";z4", ";z4", ";z4");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        Strman.countSubstr(";z4", (String) null, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Strman.rightPad("\u29B5", "\u29B5", 0);
      assertNotNull(string0);
      assertEquals("\u29B5", string0);
      
      String string1 = Strman.safeTruncate("", 0, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Strman.appendArray("%yLIZ$-M%MI'q", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("%yLIZ$-M%MI'q", string2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = Strman.endsWith("_+Yagqtn{shgK<f<", "_+Yagqtn{shgK<f<", (-2021365392), false);
      assertTrue(boolean0);
      
      String string3 = Strman.reverse("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Strman.last("", 0);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.startCase("%yLIZ$-M%MI'q");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("%y Liz$ M%mi'q", string5);
      
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string6 = Strman.hexEncode("\u29B5");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("29b5", string6);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Strman.binEncode("[q+.?6}97V");
      assertNotNull(string0);
      assertEquals("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", string0);
      
      String[] stringArray0 = Strman.chars("[q+.?6}97V");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", 2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(80, stringArray1.length);
      
      String string1 = Strman.hexEncode("\u2A34");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2a34", string1);
      
      String string2 = Strman.escapeRegExp("[q+.?6}97V");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\\[q\\+\\.\\?6\\}97V", string2);
      
      String string3 = Strman.safeTruncate("LaPu]SC{%d{B6l", 2, "LaPu]SC{%d{B6l");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("LaPu]SC{%d{B6l", string3);
      
      int int0 = Strman.indexOf("[q+.?6}97V", "^hr3a6o?", 510, false);
      assertEquals((-1), int0);
      
      String string4 = Strman.htmlEncode("&ugrave;");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("&AMP;nullnullnullnullnullnull&semi;", string4);
      
      int int1 = Strman.lastIndexOf("'FZk}ufqL{)l@]7c'F", "\u266D", (-2491), false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = Strman.formatNumber(3099L);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("3,099", string5);
      
      boolean boolean0 = Strman.isLowerCase("bq0uSL;`X2IG'");
      assertFalse(boolean0);
      
      String string6 = Strman.decode("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", 2, 10);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("\u0000\u0000\u0000\u0000\u0001\u0001\n\u000B\u0000\u0000\u0000\u0000\u0001\u000B\u0000\u0001\u0000\u0000\u0000\u0000\u0000\n\n\u000B\u0000\u0000\u0000\u0000\u0000\n\u000B\n\u0000\u0000\u0000\u0000\u0000\u000B\u000B\u000B\u0000\u0000\u0000\u0000\u0000\u000B\u0001\n\u0000\u0000\u0000\u0000\u0001\u000B\u000B\u0001\u0000\u0000\u0000\u0000\u0000\u000B\n\u0001\u0000\u0000\u0000\u0000\u0000\u000B\u0001\u000B\u0000\u0000\u0000\u0000\u0001\u0001\u0001\n", string6);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = Strman.chars(">AcC=A//_");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = Strman.between("\u013B", ".FxXhy^E", "\u013B");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string0 = Strman.formatNumber((-931L));
      assertNotNull(string0);
      assertEquals("-,931", string0);
      
      String string1 = Strman.ensureLeft("\u0436 ", "xkCQ476Ev|");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("xkCQ476Ev|\u0436 ", string1);
      
      String string2 = Strman.leftPad("xkCQ476Ev|", "\u0436 ", 1351);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Strman.lowerFirst("&W+;");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("&W+;", string3);
      
      // Undeclared exception!
      Strman.hexEncode(string2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = Strman.countSubstr("rightEncloser can't be null", "&Gg;", true, true);
      assertEquals(0L, long0);
      
      Optional<String> optional0 = Strman.tail("rightEncloser can't be null");
      assertNotNull(optional0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = Strman.isString(object0);
      assertFalse(boolean0);
      
      int int0 = Strman.lastIndexOf("", "&Gg;");
      assertEquals((-1), int0);
      
      boolean boolean1 = Strman.endsWith("rightEncloser can't be null", "&cedil;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Strman.replace("", "", "s", true);
      assertNotNull(string0);
      assertEquals("s", string0);
      
      String string1 = Strman.leftTrim("&Gg;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&Gg;", string1);
      
      String string2 = Strman.replace("&Gg;", "rightEncloser can't be null", "s", false);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&Gg;", string2);
      
      boolean boolean2 = Strman.isEnclosedBetween("MPB(eRqm.NC&", "&Gg;");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = Strman.ensureRight("", "&Gg;", true);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("&Gg;", string3);
      
      String string4 = Strman.upperFirst("&Gg;");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("&Gg;", string4);
      
      String[] stringArray0 = Strman.words("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.toCamelCase(" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = Strman.lastIndexOf("_!dw", "");
      assertEquals(5, int0);
      
      Optional<String> optional0 = Strman.trimStart("");
      assertNotNull(optional0);
      
      String string0 = Strman.repeat("params does not have value for ", 2447);
      assertNotNull(string0);
      
      String string1 = "%04x";
      boolean boolean0 = Strman.isUpperCase("%04x");
      assertFalse(boolean0);
      
      String string2 = Strman.slice(string0, 5, 45);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("s does not have value for params does no", string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "";
      stringArray0[3] = "s does not have value for params does no";
      stringArray0[4] = "";
      stringArray0[5] = "s does not have value for params does no";
      stringArray0[6] = "8";
      stringArray0[7] = "&Gdot;";
      // Undeclared exception!
      try { 
        Strman.trimStart("&Gdot;", stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unknown character property name {a} near index 75861\r
         // ^[params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for \\params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for params does not have value for \\\\s does not have value for params does no\\\\s does not have value for params does no\\8\\&Gdot;]+\r

         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Strman.collapseWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.transliterate("y6wLi/[|uY'");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y6wLi/[|uY'", string1);
      
      String string2 = Strman.upperFirst("y6wLi/[|uY'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Y6wLi/[|uY'", string2);
      
      Map<Character, Long> map0 = Strman.charsCount("Y6wLi/[|uY'");
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(10, map0.size());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y6wLi/[|uY'";
      stringArray0[1] = "Y6wLi/[|uY'";
      stringArray0[2] = "Y6wLi/[|uY'";
      stringArray0[4] = "";
      String string3 = Strman.prepend("Y6wLi/[|uY'", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Y6wLi/[|uY'Y6wLi/[|uY'Y6wLi/[|uY'nullY6wLi/[|uY'", string3);
      assertEquals(5, stringArray0.length);
      
      String string4 = Strman.removeLeft("", "S,0AhWq6zEp");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = Strman.isEnclosedBetween("j:[@:P&Da%F(we", "Y6wLi/[|uY'", "");
      assertFalse(boolean0);
      
      String[] stringArray1 = Strman.between("", "/", "separator can't be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string5 = Strman.removeLeft("separator can't be null", "", false);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("separator can't be null", string5);
      
      boolean boolean1 = Strman.containsAll("separator can't be null", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string6 = Strman.upperFirst("7Z,9}G* ?+}w/");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("7Z,9}G* ?+}w/", string6);
      
      boolean boolean2 = Strman.isBlank("separator can't be null");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = Strman.leftTrim("X(95p2]8$");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("X(95p2]8$", string7);
      
      String string8 = Strman.removeSpaces("s+$");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("s+$", string8);
      
      String string9 = "\\u";
      String string10 = Strman.removeRight(string9, "/:hwdOzRY wp+\n4", false);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertEquals("\\u", string10);
      
      String string11 = Strman.prepend("", stringArray1);
      assertTrue(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string11);
      assertEquals("", string11);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Strman.prepend(",0AhWq6zE", (String[]) null);
      assertNotNull(string0);
      assertEquals(",0AhWq6zE", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",0AhWq6zE";
      stringArray0[1] = ",0AhWq6zE";
      stringArray0[2] = ",0AhWq6zE";
      stringArray0[3] = ",0AhWq6zE";
      stringArray0[4] = ",0AhWq6zE";
      stringArray0[5] = "PY@mD:";
      stringArray0[6] = ",0AhWq6zE";
      stringArray0[7] = ",0AhWq6zE";
      stringArray0[8] = ",0AhWq6zE";
      List<String> list0 = Strman.zip(stringArray0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertEquals(9, stringArray0.length);
      assertFalse(list0.contains(string0));
      
      String string1 = Strman.appendArray(",0AhWq6zE", (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(",0AhWq6zE", string1);
      
      // Undeclared exception!
      try { 
        Strman.trimEnd("W+", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array 'strings' can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Strman.htmlEncode("(?<=G.{");
      assertNotNull(string0);
      assertEquals("&lpar;&quest;&LT;&equals;null&period;&lbrace;", string0);
      
      String string1 = Strman.removeRight("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", "d:*b", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", string1);
      
      String string2 = Strman.ensureLeft("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", "&lpar;&quest;&LT;&equals;&bsol;null&period;&lbrace;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&lpar;&quest;&LT;&equals;&bsol;null&period;&lbrace;RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", string2);
      
      String string3 = Strman.rightTrim("(?<=G.{");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("(?<=G.{", string3);
      
      int int0 = Strman.lastIndexOf("6u3X)x)rf\"", "", 49, true);
      assertEquals(10, int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&lpar;&quest;&LT;&equals;&bsol;null&period;&lbrace;RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F";
      stringArray0[1] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F";
      stringArray0[2] = "6u3X)x)rf\"";
      Optional<String> optional0 = Strman.trimEnd("", stringArray0);
      assertNotNull(optional0);
      assertEquals(3, stringArray0.length);
      
      String string4 = Strman.reverse("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.safeTruncate("6u3X)x)rf\"", 10, "(?<=G.{");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("6u3X)x)rf\"", string5);
      
      String string6 = Strman.prependArray("", stringArray0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("&lpar;&quest;&LT;&equals;&bsol;null&period;&lbrace;RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'FRcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F6u3X)x)rf\"", string6);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = Strman.endsWith("", "&lpar;&quest;&LT;&equals;&bsol;null&period;&lbrace;RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", 4461, true);
      assertFalse(boolean0);
      
      String string7 = Strman.appendArray("6u3X)x)rf\"", stringArray0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("6u3X)x)rf\"&lpar;&quest;&LT;&equals;&bsol;null&period;&lbrace;RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'FRcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F6u3X)x)rf\"", string7);
      assertEquals(3, stringArray0.length);
      
      String string8 = Strman.toKebabCase((String) null);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = Strman.encode("RE<Dp&@yytOX-o\u0399", 10, 49);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("000000008200000000690000000060000000006800000001120000000038000000006400000001210000000121000000011600000000790000000088000000004500000001110000000921", string9);
      
      // Undeclared exception!
      try { 
        Strman.split("vlX1y+:[Qo+WuHQ", "MZ1xO*aG[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8\r
         // MZ1xO*aG[\r
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.endsWith((String) null, ";z4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Strman.formatNumber(3L);
      assertNotNull(string0);
      assertEquals("3", string0);
      
      String string1 = Strman.slugify("\u03D1\u03D1");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("thth", string1);
      
      String string2 = Strman.collapseWhitespace("-WAIV=NwCM^LC6UBA{");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-WAIV=NwCM^LC6UBA{", string2);
      
      String string3 = Strman.slice("{(w+)}7n us$6Mfm", 1, 1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = Strman.words("", "n@av");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = Strman.truncate("\u2A9E", 1, "\u2A40\u2A40");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\u2A9E", string4);
      
      String string5 = Strman.leftTrim("\u2A40\u2A40");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("\u2A40\u2A40", string5);
      
      Optional<String> optional0 = Strman.trimEnd("-WAIV=NwCM^LC6UBA{");
      assertNotNull(optional0);
      
      String string6 = Strman.htmlEncode("{(w+)}7n us$6Mfm");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("&lbrace;&lpar;null&plus;&rpar;&rbrace;nullnullnullnullnull&dollar;nullnullnullnull", string6);
      
      // Undeclared exception!
      try { 
        Strman.hexDecode("\u2A9E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u2A9E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Strman.binEncode("[q+.?6}97V");
      assertNotNull(string0);
      assertEquals("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", string0);
      
      String[] stringArray0 = Strman.chars("[q+.?6}97V");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", 2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(80, stringArray1.length);
      
      String string1 = Strman.hexEncode("\u2A34");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2a34", string1);
      
      String string2 = Strman.escapeRegExp("[q+.?6}97V");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\\[q\\+\\.\\?6\\}97V", string2);
      
      String string3 = Strman.safeTruncate("LaPu]SC{%d{B6l", (-1042), "LaPu]SC{%d{B6l");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("LaPu]SC{%d{B6l", string3);
      
      int int0 = Strman.indexOf("[q+.?6}97V", "^hr3a6o?", 510, true);
      assertEquals((-1), int0);
      
      String string4 = Strman.htmlEncode("oZ3yZFfpI_9`t(gu");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("nullnullnullnullnullnullnullnullnull&UnderBar;null&DiacriticalGrave;null&lpar;nullnull", string4);
      
      int int1 = Strman.lastIndexOf("'FZk}ufqL{)l@]7c'F", "\u266D", (-2491), false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = Strman.lines("nullnullnullnullnullnullnullnullnull&UnderBar;null&DiacriticalGrave;null&lpar;nullnull");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      
      String string5 = Strman.formatNumber(3099L);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("3,099", string5);
      
      // Undeclared exception!
      try { 
        Strman.format((String) null, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.startCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "\\u2032";
      String string3 = null;
      // Undeclared exception!
      try { 
        Strman.ensureRight("\u2032", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = Strman.countSubstr("S+bSGK&", "(?=p{Upper})");
      assertEquals(0L, long0);
      
      String string0 = Strman.removeNonWords("(?=p{Upper})");
      assertNotNull(string0);
      assertEquals("pUpper", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?=p{Upper})";
      stringArray0[1] = "(?=p{Upper})";
      stringArray0[2] = "(?=p{Upper})";
      boolean boolean0 = Strman.containsAll("^X5O4zK+C)~zy(", stringArray0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      Optional<String> optional0 = Strman.at("pUpper", 10);
      assertNotNull(optional0);
      
      String string1 = Strman.toSnakeCase("^X5O4zK+C)~zy(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^_x5_o4z_k+_c)~zy(", string1);
      
      // Undeclared exception!
      try { 
        Strman.format("(?=p{Upper})", stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Upper\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Strman.htmlEncode("(?<=G.{");
      assertNotNull(string0);
      assertEquals("&lpar;&quest;&LT;&equals;null&period;&lbrace;", string0);
      
      String string1 = Strman.removeRight("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", "d:*b", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", string1);
      
      String string2 = Strman.htmlDecode("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("null", string2);
      
      String string3 = Strman.rightTrim("(?<=G.{");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("(?<=G.{", string3);
      
      int int0 = Strman.lastIndexOf("6u3X)x)rf\"", "", 49, false);
      assertEquals(10, int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "null";
      stringArray0[1] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F";
      stringArray0[2] = "6u3X)x)rf\"";
      Optional<String> optional0 = Strman.trimEnd("", stringArray0);
      assertNotNull(optional0);
      assertEquals(3, stringArray0.length);
      
      String string4 = Strman.reverse("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.truncate("null", 49, "@[$M");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("null", string5);
      
      String string6 = Strman.prependArray("", stringArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("nullRcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F6u3X)x)rf\"", string6);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = Strman.endsWith("", "null", 4461, false);
      assertFalse(boolean0);
      
      String string7 = Strman.appendArray("null", stringArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("nullnullRcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F6u3X)x)rf\"", string7);
      assertEquals(3, stringArray0.length);
      
      String string8 = Strman.toKebabCase((String) null);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = Strman.encode("RE<Dp&@yytOX-o\u0399", 10, 49);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("000000008200000000690000000060000000006800000001120000000038000000006400000001210000000121000000011600000000790000000088000000004500000001110000000921", string9);
      
      // Undeclared exception!
      try { 
        Strman.split("vlX1y+:[Qo+WuHQ", "MZ1xO*aG[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8\r
         // MZ1xO*aG[\r
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Strman.toKebabCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = Strman.indexOf("oY<~)7p", "", 910, false);
      assertEquals(8, int0);
      
      String string1 = Strman.ensureLeft("txFg:P}*Z%URF*!;", "oY<~)7p");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("oY<~)7ptxFg:P}*Z%URF*!;", string1);
      
      String string2 = Strman.startCase("5yFN&g7!4y)K>5y@4K");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "txFg:P}*Z%URF*!;";
      stringArray0[1] = "oY<~)7ptxFg:P}*Z%URF*!;";
      stringArray0[2] = "txFg:P}*Z%URF*!;";
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String[] stringArray2 = Strman.removeEmptyStrings(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
      
      String string3 = Strman.htmlEncode("\u22D0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("&Sub;", string3);
      
      boolean boolean0 = Strman.isEnclosedBetween("&gtrsim;", "", "AhW))N=fl");
      assertFalse(boolean0);
      
      String string4 = Strman.ensureRight("5yFN&g7!4y)K>5y@4K", "5yFN&g7!4y)K>5y@4K");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      Optional<String> optional0 = Strman.trimEnd("{B*c/6,YE;/Ap8[e");
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        Strman.removeRight((String) null, "5y Fn&g7!4y)k>5y@4k", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Optional<String> optional0 = Strman.first("'aXcE]zI", 2);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'aXcE]zI";
      String string0 = Strman.removeRight("X(95p2]8$", "'aXcE]zI");
      assertNotNull(string0);
      assertEquals("X(95p2]8$", string0);
      
      String[] stringArray1 = Strman.chars("'aXcE]zI");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      
      String[] stringArray2 = Strman.words("'aXcE]zI", "'aXcE]zI");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      
      String[] stringArray3 = Strman.between(",S])O%r>fF2Sp", ",S])O%r>fF2Sp", "~R&&8<zm&=ELY");
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      
      String string1 = Strman.ensureLeft("N@AV", "~R&&8<zm&=ELY", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("~R&&8<zm&=ELYN@AV", string1);
      
      int int0 = Strman.indexOf("'aXcE]zI", "~R&&8<zm&=ELY", (-20569767), false);
      assertEquals((-1), int0);
      
      boolean boolean0 = Strman.isLowerCase("'aXcE]zI");
      assertFalse(boolean0);
      
      String string2 = Strman.removeSpaces("N@AV");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("N@AV", string2);
      
      String string3 = Strman.rightTrim("separator can't be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("separator can't be null", string3);
      
      String string4 = Strman.slugify("N@AV");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("natav", string4);
      
      Map<Character, Long> map0 = Strman.charsCount(",S])O%r>fF2Sp");
      assertNotNull(map0);
      assertEquals(12, map0.size());
      assertFalse(map0.isEmpty());
      
      String string5 = Strman.lowerFirst("^.w9tL?O(0");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("^.w9tL?O(0", string5);
      
      String string6 = Strman.removeLeft("separator can't be null", "MCmTou/T>}w}S(6", true);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("separator can't be null", string6);
      
      // Undeclared exception!
      try { 
        Strman.base64Decode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Strman.leftPad("{jbD8iNfD!x{1c/i[", "FuSyb[sJp", 4);
      assertNotNull(string0);
      assertEquals("{jbD8iNfD!x{1c/i[", string0);
      
      String string1 = Strman.leftPad("{jbD8iNfD!x{1c/i[", "FuSyb[sJp", 4);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{jbD8iNfD!x{1c/i[", string1);
      
      boolean boolean0 = Strman.isUpperCase("{jbD8iNfD!x{1c/i[");
      assertFalse(boolean0);
      
      Optional<String> optional0 = Strman.trimStart("{RqJz![?B");
      assertNotNull(optional0);
      
      String string2 = Strman.encode("$1_$2", 4, 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("02100301113302100302", string2);
      
      Optional<String> optional1 = Strman.tail("{jbD8iNfD!x{1c/i[");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      String string3 = Strman.last("02100301113302100302", 4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("0302", string3);
      
      String[] stringArray0 = null;
      String string4 = Strman.prependArray("FuSyb[sJp", (String[]) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("FuSyb[sJp", string4);
      
      // Undeclared exception!
      try { 
        Strman.trimStart("0302", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array 'strings' can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = Strman.isEnclosedBetween("RcpiwHrb\"{wJZ.]", "RcpiwHrb\"{wJZ.]", "|{/hu ;|@[/Ir");
      assertFalse(boolean0);
      
      String string0 = Strman.startCase("|{/hu ;|@[/Ir");
      assertNotNull(string0);
      assertEquals("|{/hu ;|@[/ir", string0);
      
      String string1 = Strman.startCase("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.toStudlyCase("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.repeat("&", 850);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEqualsstring3);
      
      String string4 = Strman.lowerFirst("L7EuXu<5");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("l7EuXu<5", string4);
      
      String string5 = Strman.insert("RcpiwHrb\"{wJZ.]", "", 850);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("RcpiwHrb\"{wJZ.]", string5);
      
      Optional<String> optional0 = Strman.trimEnd("uP*]Up2SrxC$BUW9)'");
      assertNotNull(optional0);
      
      boolean boolean1 = Strman.contains("hRN&C]k)&d n", "D|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = Strman.ensureLeft("", "", false);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean2 = Strman.isEnclosedBetween("", "RcpiwHrb\"{wJZ.]");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string7 = Strman.capitalize("RcpiwHrb\"{wJZ.]");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("Rcpiwhrb\"{wjz.]", string7);
      
      String string8 = Strman.insert("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", "l7EuXu<5", 0);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("l7EuXustring8);
      
      String string9 = Strman.safeTruncate("", 2, "y6wLi/[|uY'");
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = null;
      String string1 = Strman.humanize((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      Optional<String> optional0 = Strman.trimStart((String) null, (String[]) null);
      assertNotNull(optional0);
      
      String string2 = "";
      String string3 = Strman.surround("", "jubUsS+g*9pM\"Q(4(Q", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("jubUsS+g*9pM\"Q(4(Q", string3);
      
      int int0 = (-2945);
      Optional<String> optional1 = Strman.at("NOWcD5D|.{t3", (-2945));
      assertNotNull(optional1);
      assertSame(optional1, optional0);
      
      // Undeclared exception!
      try { 
        Strman.countSubstr((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Strman.rightPad("", "", (-2089));
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Strman.removeLeft("", (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = Strman.isEnclosedBetween("RcpiwHrb\"{wJZ.]", "RcpiwHrb\"{wJZ.]", "|{/hu ;|@[/Ir");
      assertFalse(boolean0);
      
      String string0 = Strman.startCase("|{/hu ;|@[/Ir");
      assertNotNull(string0);
      assertEquals("|{/hu ;|@[/ir", string0);
      
      String string1 = Strman.startCase("K8]Z[VZG$2#m0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("K8]z[vzg$2#m0", string1);
      
      String string2 = Strman.toStudlyCase("K8]z[vzg$2#m0");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("K8]z[vzg$2#m0", string2);
      
      String string3 = Strman.repeat("RcpiwHrb\"{wJZ.]", 850);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Strman.lowerFirst("!5V");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("!5V", string4);
      
      String string5 = Strman.htmlEncode(string3);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = Strman.insert("RcpiwHrb\"{wJZ.]", "K8]z[vzg$2#m0", 850);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("RcpiwHrb\"{wJZ.]", string6);
      
      Optional<String> optional0 = Strman.trimEnd("uP*]Up2SrxC$BUW9)'");
      assertNotNull(optional0);
      
      boolean boolean1 = Strman.contains("hRN&C]k)&d n", "[|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = Strman.ensureLeft(string5, string5, false);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = "\u29B3";
      boolean boolean2 = Strman.isEnclosedBetween("K8]z[vzg$2#m0", "RcpiwHrb\"{wJZ.]");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string9 = Strman.capitalize("RcpiwHrb\"{wJZ.]");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      assertEquals("Rcpiwhrb\"{wjz.]", string9);
      
      String string10 = Strman.insert(string3, "9cgtG\"Q", 0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      
      String string11 = "y6wLi/[|uY'";
      // Undeclared exception!
      Strman.swapCase(string3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Optional<String> optional0 = Strman.trimStart("O'");
      assertNotNull(optional0);
      
      String string0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[3] = "O'";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        Strman.prepend((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Strman.escapeRegExp("dlRVo.kI,,@");
      assertNotNull(string0);
      assertEquals("dlRVo\\.kI,,@", string0);
      
      String string1 = Strman.upperFirst("dlRVo.kI,,@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("DlRVo.kI,,@", string1);
      
      String string2 = Strman.htmlEncode("2m,(wJ-K4=4(r'A)");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("nullnull&comma;&lpar;nullnullnullnullnull&equals;null&lpar;null&apos;null&rpar;", string2);
      
      boolean boolean0 = Strman.isEnclosedBetween("dlRVo.kI,,@", "separator can't be null", "7=!o1-e8e$wnq/");
      assertFalse(boolean0);
      
      String string3 = Strman.htmlEncode("dlRVo.kI,,@");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("nullnullnullnullnull&period;nullnull&comma;&comma;&commat;", string3);
      
      String string4 = Strman.replace("D4/", "RE<Dp&@yytOX-o&FKLi'y^.kST\"'&FKLi'y^.kST\"'", "dlRVo.kI,,@", true);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("D4/", string4);
      
      Optional<String> optional0 = Strman.at("CBC><", 17);
      assertNotNull(optional0);
      
      String string5 = Strman.humanize("dlRVo.kI,,@");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Dl rvo.k i,,@", string5);
      
      Optional<String> optional1 = Strman.at("com.strman.Strman", 17);
      assertNotNull(optional1);
      assertSame(optional1, optional0);
      
      Optional<String> optional2 = Strman.tail("tXA[%gs");
      assertFalse(optional2.equals((Object)optional0));
      assertFalse(optional2.equals((Object)optional1));
      assertNotNull(optional2);
      assertNotSame(optional2, optional0);
      assertNotSame(optional2, optional1);
      
      // Undeclared exception!
      try { 
        Strman.slice("3IR", 4, 17);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Strman.hexEncode("&Integral;");
      assertNotNull(string0);
      assertEquals("00260049006e00740065006700720061006c003b", string0);
      
      String string1 = Strman.join(stringArray0, "|{/hu ;|@[/Ir");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = Strman.formatNumber(573L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("573", string2);
      
      Optional<String> optional0 = Strman.tail("00260049006e00740065006700720061006c003b");
      assertNotNull(optional0);
      
      String string3 = Strman.safeTruncate(",j:[@:P&Da%F(we", (-1657258916), "573");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("573", string3);
      
      String string4 = Strman.toStudlyCase(">#");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(">#", string4);
      
      String string5 = Strman.appendArray("&Integral;", stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("&Integral;", string5);
      assertEquals(0, stringArray0.length);
      
      String string6 = Strman.formatNumber((-146L));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("-,146", string6);
      
      String string7 = Strman.ensureRight("q~", ",j:[@:P&Da%F(we", true);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("q~,j:[@:P&Da%F(we", string7);
      
      // Undeclared exception!
      try { 
        Strman.binDecode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Strman.hexEncode("&Integral;");
      assertNotNull(string0);
      assertEquals("00260049006e00740065006700720061006c003b", string0);
      
      String string1 = Strman.join(stringArray0, "|{/hu ;|@[/Ir");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = Strman.formatNumber(573L);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("573", string2);
      
      Optional<String> optional0 = Strman.tail("00260049006e00740065006700720061006c003b");
      assertNotNull(optional0);
      
      String string3 = Strman.safeTruncate(",j:[@:P&Da%F(we", (-1657258916), "573");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("573", string3);
      
      String string4 = Strman.toStudlyCase(">#");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(">#", string4);
      
      String string5 = Strman.appendArray("&Integral;", stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("&Integral;", string5);
      assertEquals(0, stringArray0.length);
      
      String string6 = Strman.formatNumber((-146L));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("-,146", string6);
      
      String string7 = Strman.ensureRight("q~", ",j:[@:P&Da%F(we", true);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("q~,j:[@:P&Da%F(we", string7);
      
      String string8 = Strman.decDecode("573");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("\u023D", string8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Strman.swapCase("U!YX|Tw6w");
      assertNotNull(string0);
      assertEquals("u!yx|tW6W", string0);
      
      String string1 = Strman.toStudlyCase("u!yx|tW6W");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("U!yx|tW6W", string1);
      
      boolean boolean0 = Strman.endsWith("u!yx|tW6W", "u!yx|tW6W", 1480, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string2 = Strman.append("RcpiwHrb\"{wJZ.]", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("RcpiwHrb\"{wJZ.]", string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = Strman.safeTruncate("7HR,Dri]", 1480, "7HR,Dri]");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("7HR,Dri]", string3);
      
      // Undeclared exception!
      try { 
        Strman.ensureRight((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Optional<String> optional0 = Strman.trimEnd("PGC");
      assertNotNull(optional0);
      
      Optional<String> optional1 = Strman.trimEnd("%5h}w q<pVod(qn");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      String string0 = Strman.swapCase("\u0171");
      assertNotNull(string0);
      assertEquals("\u0170", string0);
      
      String string1 = Strman.toSnakeCase("zpw#^ agxd?ailu");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zpw#^_agxd?ailu", string1);
      
      String string2 = Strman.shuffle("U0171");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("1U017", string2);
      
      Optional<String> optional2 = Strman.head((String) null);
      assertFalse(optional2.equals((Object)optional0));
      assertFalse(optional2.equals((Object)optional1));
      assertNotNull(optional2);
      assertNotSame(optional2, optional0);
      assertNotSame(optional2, optional1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "s*(_|-|s)s*";
      stringArray0[1] = "\u0171";
      stringArray0[2] = "%5h}w q<pVod(qn";
      stringArray0[3] = "U0171";
      stringArray0[5] = "PGC";
      stringArray0[6] = "PGC";
      stringArray0[8] = "PGC";
      String[] stringArray1 = Strman.lines("iGhF8|AWhW4WEYYb");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string3 = Strman.ensureRight("s*(_|-|s)s*", "&Racute;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("s*(_|-|s)s*&Racute;", string3);
      
      // Undeclared exception!
      try { 
        Strman.hexEncode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 850;
      String string0 = "RcpiwHrb\"{wJZ.]";
      boolean boolean0 = Strman.isEnclosedBetween("RcpiwHrb\"{wJZ.]", "RcpiwHrb\"{wJZ.]", "|{/hu ;|@[/Ir");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Strman.startCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "PGC";
      Optional<String> optional0 = Strman.trimEnd("PGC");
      assertNotNull(optional0);
      
      String string1 = "%5h}w q<pVod(qn";
      Optional<String> optional1 = Strman.trimEnd("%5h}w q<pVod(qn");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      String string2 = "\\s*(_|-|\\s)\\s*";
      String string3 = "\\u0171";
      String string4 = Strman.rightPad("\u0171", "s*(_|-|s)s*", 850);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = "zpw#^ agxd?ailu";
      String string6 = Strman.toSnakeCase("zpw#^ agxd?ailu");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("zpw#^_agxd?ailu", string6);
      
      String string7 = Strman.shuffle(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = null;
      Optional<String> optional2 = Strman.head(string8);
      assertFalse(optional2.equals((Object)optional0));
      assertFalse(optional2.equals((Object)optional1));
      assertNotNull(optional2);
      assertNotSame(optional2, optional0);
      assertNotSame(optional2, optional1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string7;
      stringArray0[1] = string3;
      stringArray0[2] = string1;
      stringArray0[3] = string4;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[8] = string0;
      String string9 = "iGhF8\\|AWhW4WEYYb";
      String[] stringArray1 = Strman.lines(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string10 = "&Racute;";
      String string11 = Strman.ensureRight(string2, string10);
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertNotNull(string11);
      assertEquals("\\s*(_|-|\\s)\\s*&Racute;", string11);
      
      String string12 = "\u2928";
      String[] stringArray2 = Strman.between(string12, stringArray0[3], string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(0, stringArray2.length);
      assertEquals(9, stringArray0.length);
      
      String string13 = Strman.reverse(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string10));
      assertNotNull(string13);
      assertEquals(";etucaR&", string13);
      
      String string14 = Strman.join(stringArray2, string7);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string12));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string13));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string13));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string13));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string9));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertNotNull(string14);
      assertEquals("", string14);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(0, stringArray2.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = Strman.isBlank("Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertFalse(boolean0);
      
      int int0 = Strman.length("Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertEquals(25, int0);
      
      long long0 = Strman.countSubstr("Y6wLi/[|uY'j:[@:P&Da%F(we", "b", false, false);
      assertEquals(0L, long0);
      
      String string0 = Strman.toSnakeCase("b");
      assertNotNull(string0);
      assertEquals("b", string0);
      
      String string1 = Strman.swapCase("b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("B", string1);
      
      String string2 = Strman.rightPad("b", "B", 25);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("bBBBBBBBBBBBBBBBBBBBBBBBB", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y6wLi/[|uY'j:[@:P&Da%F(we";
      stringArray0[1] = "bBBBBBBBBBBBBBBBBBBBBBBBB";
      String string3 = Strman.appendArray("", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Y6wLi/[|uY'j:[@:P&Da%F(webBBBBBBBBBBBBBBBBBBBBBBBB", string3);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = Strman.isLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = Strman.decEncode("s");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("00115", string4);
      
      String string5 = Strman.capitalize("Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Y6wli/[|uy'j:[@:p&da%f(we", string5);
      
      String string6 = Strman.removeSpaces("b");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("b", string6);
      
      Map<Character, Long> map0 = Strman.charsCount("Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertNotNull(map0);
      assertEquals(21, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean2 = Strman.isEnclosedBetween("Y6wLi/[|uY'j:[@:P&Da%F(we", "bBBBBBBBBBBBBBBBBBBBBBBBB", "Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Optional<String> optional0 = Strman.trimStart("separator can't be null");
      assertNotNull(optional0);
      
      String string7 = Strman.hexDecode("bBBBBBBBBBBBBBBBBBBBBBBBB");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("\uBBBB\uBBBB\uBBBB\uBBBB\uBBBB\uBBBB\u000B", string7);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = Strman.rightPad("`Yn+'Q", "`Yn+'Q", 45);
      assertNotNull(string0);
      assertEquals("`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q", string0);
      
      Map<Character, Long> map0 = Strman.charsCount("`Yn+'Q");
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(6, map0.size());
      
      String string1 = Strman.toKebabCase("`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q`Yn+'Q");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q`-yn+'-q", string1);
      
      String[] stringArray0 = Strman.lines("`Yn+'Q");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Optional<String> optional0 = Strman.tail("T@q");
      assertNotNull(optional0);
      
      String string2 = "&lbrack;";
      // Undeclared exception!
      try { 
        Strman.endsWith("&lbrack;", (String) null, (-14), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Optional<String> optional0 = Strman.first("'aXcE]zI", 2);
      assertNotNull(optional0);
      
      String string0 = Strman.ensureRight("'aXcE]zI", "'aXcE]zI", true);
      assertNotNull(string0);
      assertEquals("'aXcE]zI", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'aXcE]zI";
      String string1 = Strman.join(stringArray0, "'aXcE]zI");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'aXcE]zI", string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = Strman.removeRight("X(95p2]8$", "'aXcE]zI");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("X(95p2]8$", string2);
      
      String[] stringArray1 = Strman.chars("'aXcE]zI");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      
      String[] stringArray2 = Strman.words("'aXcE]zI", "'aXcE]zI");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      
      String[] stringArray3 = Strman.between(",S])O%r>fF2Sp", ",S])O%r>fF2Sp", "~R&&8<zm&=ELY");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      
      int int0 = Strman.indexOf("'aXcE]zI", "N@AV", 7, true);
      assertEquals((-1), int0);
      
      String string3 = Strman.ensureLeft("N@AV", "~R&&8<zm&=ELY", false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("~R&&8<zm&=ELYN@AV", string3);
      
      int int1 = Strman.indexOf("'aXcE]zI", "~R&&8<zm&=ELY", (-20569767), false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = Strman.isLowerCase("'aXcE]zI");
      assertFalse(boolean0);
      
      String string4 = Strman.removeSpaces("N@AV");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("N@AV", string4);
      
      String string5 = Strman.rightTrim("separator can't be null");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("separator can't be null", string5);
      
      Optional<String> optional1 = Strman.at("'aXcE]zI", 2);
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      String string6 = Strman.slugify("N@AV");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("natav", string6);
      
      Map<Character, Long> map0 = Strman.charsCount(",S])O%r>fF2Sp");
      assertNotNull(map0);
      assertEquals(12, map0.size());
      assertFalse(map0.isEmpty());
      
      String string7 = Strman.lowerFirst("^.w9tL?O(0");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("^.w9tL?O(0", string7);
      
      String string8 = Strman.removeLeft("separator can't be null", "MCmTou/T>}w}S(6", true);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("separator can't be null", string8);
      
      // Undeclared exception!
      try { 
        Strman.split("5u3fV", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = Strman.append("&W+;", stringArray0);
      assertNotNull(string0);
      assertEquals("&W+;null", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.isLowerCase("separator can'tbe null");
      assertTrue(boolean0);
      
      String string1 = Strman.toSnakeCase("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.format("", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.containsAll("3vnr.)L1>0|", stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Optional<String> optional0 = Strman.at("vkD.", (-948));
      assertNotNull(optional0);
      
      String[] stringArray0 = Strman.chars("vkD.");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string0 = Strman.decEncode("vkD.");
      assertNotNull(string0);
      assertEquals("00118001070006800046", string0);
      
      boolean boolean0 = Strman.inequal("\u0174", "00118001070006800046");
      assertTrue(boolean0);
      
      String string1 = Strman.capitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      long long0 = Strman.countSubstr("7-x", "00118001070006800046", true, false);
      assertEquals(0L, long0);
      
      String string2 = Strman.transliterate("vkD.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("vkD.", string2);
      
      String string3 = Strman.encode("00118001070006800046", (-1968526675), (-948));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("4848494956484849485548484854564848485254", string3);
      
      String string4 = Strman.encode("n,", (-2354), (-1968526675));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("11044", string4);
      
      String string5 = Strman.removeRight("11044", "4848494956484849485548484854564848485254", true);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("11044", string5);
      
      String string6 = Strman.removeSpaces("");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        Strman.decEncode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.removeNonWords((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Optional<String> optional0 = Strman.head("rightEncloser can't be null");
      assertNotNull(optional0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = Strman.isString(object0);
      assertFalse(boolean0);
      
      String string0 = "";
      String string1 = "&cedil;";
      boolean boolean1 = Strman.endsWith("rightEncloser can't be null", "&cedil;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "";
      String string3 = null;
      // Undeclared exception!
      try { 
        Strman.upperFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Strman.binEncode("[q+.?6}97V");
      assertNotNull(string0);
      assertEquals("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", string0);
      
      String[] stringArray0 = Strman.chars("Input array should not be null");
      assertNotNull(stringArray0);
      assertEquals(30, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("Input array should not be null", 2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(15, stringArray1.length);
      
      String string1 = Strman.hexEncode("\u2A34");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2a34", string1);
      
      String string2 = Strman.escapeRegExp("[q+.?6}97V");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\\[q\\+\\.\\?6\\}97V", string2);
      
      String string3 = Strman.safeTruncate("LaPu]SC{%d{B6l", (-1042), "LaPu]SC{%d{B6l");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("LaPu]SC{%d{B6l", string3);
      
      int int0 = Strman.indexOf("[q+.?6}97V", "^hr3a6o?", 510, true);
      assertEquals((-1), int0);
      
      String string4 = "oZ3yZFfpI_9`t(gu";
      // Undeclared exception!
      try { 
        Strman.between("oZ3yZFfpI_9`t(gu", "Input array should not be null", "RcpiwHrb\"{wJZ.]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 8\r
         // RcpiwHrb\"{wJZ.]\r
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      String string1 = "$I[kV/mlZ|E9.WoqPN";
      // Undeclared exception!
      try { 
        Strman.chars((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = (-3214);
      Random.setNextRandom((-3214));
      boolean boolean0 = Strman.isUpperCase("");
      assertTrue(boolean0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.removeLeft("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = Strman.words("$I[kV/mlZ|E..eWoqPN");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = Strman.appendArray("Q3", stringArray0);
      assertNotNull(string0);
      assertEquals("Q3$I[kV/mlZ|E..eWoqPN", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = Strman.toCamelCase(".lA&-];WX0|GNW");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".lA&];WX0|GNW", string1);
      
      long long0 = Strman.countSubstr("Q3", "$I[kV/mlZ|E..eWoqPN");
      assertEquals(0L, long0);
      
      Optional<String> optional0 = Strman.at((String) null, (-1132));
      assertNotNull(optional0);
      
      String string2 = Strman.removeSpaces("~G&9?!-p");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("~G&9?!-p", string2);
      
      String string3 = Strman.leftPad("\u0174", ".lA&];WX0|GNW", (-2087));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\u0174", string3);
      
      // Undeclared exception!
      try { 
        Strman.ensureLeft("$I[kV/mlZ|E..eWoqPN", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Strman.hexEncode("[47t}W*HPK1Sy.eW^Y");
      assertNotNull(string0);
      assertEquals("005b003400370074007d0057002a00480050004b003100530079002e00650057005e0059", string0);
      
      String string1 = "!Jr";
      String[] stringArray0 = Strman.split("!Jr", "!Jr");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = "";
      String[] stringArray1 = Strman.split("[47t}W*HPK1Sy.eW^Y", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(18, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.chop("!Jr", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3
         //
         verifyException("java.util.stream.IntPipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Strman.collapseWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.transliterate("y6wLi/[|uY'");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y6wLi/[|uY'", string1);
      
      String string2 = Strman.upperFirst("y6wLi/[|uY'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Y6wLi/[|uY'", string2);
      
      Map<Character, Long> map0 = Strman.charsCount("Y6wLi/[|uY'");
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(10, map0.size());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y6wLi/[|uY'";
      stringArray0[1] = "Y6wLi/[|uY'";
      stringArray0[2] = "Y6wLi/[|uY'";
      stringArray0[3] = ",";
      stringArray0[4] = "";
      String string3 = Strman.prepend("Y6wLi/[|uY'", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Y6wLi/[|uY'Y6wLi/[|uY'Y6wLi/[|uY',Y6wLi/[|uY'", string3);
      assertEquals(5, stringArray0.length);
      
      String string4 = Strman.removeLeft("", "S,0AhWq6zEp");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = Strman.isEnclosedBetween("j:[@:P&Da%F(we", "Y6wLi/[|uY'", "");
      assertFalse(boolean0);
      
      String[] stringArray1 = Strman.between("", "/", "separator can't be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string5 = Strman.removeLeft("separator can't be null", "", false);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("separator can't be null", string5);
      
      boolean boolean1 = Strman.containsAll("separator can't be null", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string6 = Strman.shuffle("");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Optional<String> optional0 = Strman.trimEnd("j");
      assertNotNull(optional0);
      
      String[] stringArray0 = Strman.split("j", "u");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = Strman.binEncode("^r({W057K?");
      assertNotNull(string0);
      assertEquals("0000000001011110000000000111001000000000001010000000000001111011000000000101011100000000001100000000000000110101000000000011011100000000010010110000000000111111", string0);
      
      // Undeclared exception!
      try { 
        Strman.truncate("0000000001011110000000000111001000000000001010000000000001111011000000000101011100000000001100000000000000110101000000000011011100000000010010110000000000111111", 55, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Strman.removeLeft("zpw#^ agxd?ailu>#", "gA\u0001vP?");
      assertNotNull(string0);
      assertEquals("zpw#^ agxd?ailu>#", string0);
      
      String string1 = Strman.startCase("zpw#^ agxd?ailu>#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Zpw#^ Agxd?ailu>#", string1);
      
      String string2 = Strman.htmlDecode("zpw#^ agxd?ailu>#");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("null", string2);
      
      Optional<String> optional0 = Strman.head("hIaiHgT'@|ihIaiHgT'@|i");
      assertNotNull(optional0);
      
      String string3 = Strman.safeTruncate("gA\u0001vP?", 20, "&ShortLeftArrow;");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("gA\u0001vP?", string3);
      
      String string4 = Strman.rightPad("dil;", "zpw#^ agxd?ailu>#", 20);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("dil;zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#zpw#^ agxd?ailu>#", string4);
      
      String string5 = Strman.capitalize("~6 @Iv?-_Qixlb[4M@g");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("~6 @iv?-_qixlb[4m@g", string5);
      
      int int0 = Strman.lastIndexOf("#UpxX", "gA\u0001vP?", 20, true);
      assertEquals((-1), int0);
      
      String[] stringArray0 = Strman.split("RE<Dp&@yyZOX-o&FKLi'y^.kST\"'&FKLd'y^.kST\"'", "k67Xipt2");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.isEnclosedBetween("k67Xipt2", "(?=p{Upper})", "WK%RNt9mg{)6ee");
      assertFalse(boolean0);
      
      String string6 = Strman.toCamelCase((String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Map<Character, Long> map0 = Strman.charsCount("");
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Optional<String> optional0 = Strman.head("x]QHqBS,Mz|X)b[l$");
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "x]QHqBS,Mz|X)b[l$";
      stringArray0[1] = "";
      stringArray0[2] = "x]QHqBS,Mz|X)b[l$";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "x]QHqBS,Mz|X)b[l$";
      stringArray0[6] = "";
      String string0 = Strman.prependArray("x]QHqBS,Mz|X)b[l$", stringArray0);
      assertNotNull(string0);
      assertEquals("x]QHqBS,Mz|X)b[l$x]QHqBS,Mz|X)b[l$x]QHqBS,Mz|X)b[l$x]QHqBS,Mz|X)b[l$", string0);
      assertEquals(7, stringArray0.length);
      
      String[] stringArray1 = Strman.between("x]QHqBS,Mz|X)b[l$", "", "&angrtvbd;");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      Optional<String> optional1 = Strman.tail("");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      int int0 = (-733);
      // Undeclared exception!
      try { 
        Strman.endsWith((String) null, "x]QHqBS,Mz|X)b[l$", (-733), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Strman.removeLeft("zpw#^ agxd?ailu>_", "gA\u0001vP?");
      assertNotNull(string0);
      assertEquals("zpw#^ agxd?ailu>_", string0);
      
      String string1 = Strman.startCase("zpw#^ agxd?ailu>_");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Zpw#^ Agxd?ailu>", string1);
      
      String string2 = Strman.htmlDecode("zpw#^ agxd?ailu>_");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("null", string2);
      
      Optional<String> optional0 = Strman.head("hIaiHgT'@|ihIaiHgT'@|i");
      assertNotNull(optional0);
      
      String string3 = Strman.safeTruncate("gA\u0001vP?", 20, "&ShortLeftArrow;");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("gA\u0001vP?", string3);
      
      String string4 = Strman.rightPad("dil;", "zpw#^ agxd?ailu>_", 20);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("dil;zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_zpw#^ agxd?ailu>_", string4);
      
      String string5 = Strman.last("zpw#^ agxd?ailu>_", 20);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("zpw#^ agxd?ailu>_", string5);
      
      int int0 = Strman.lastIndexOf("#UpxX", "gA\u0001vP?", 20, true);
      assertEquals((-1), int0);
      
      String[] stringArray0 = Strman.split("RE<Dp&@yyZOX-o&FKLi'y^.kST\"'&FKLd'y^.kST\"'", "k67Xipt2");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Strman.formatNumber((-2766L));
      assertNotNull(string0);
      assertEquals("-2,766", string0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Strman.htmlDecode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "&hAcS&!bliUr=:@ue@~";
      Optional<String> optional0 = Strman.trimEnd((String) null, stringArray0);
      assertNotNull(optional0);
      assertEquals(4, stringArray0.length);
      
      String string1 = Strman.removeRight("Fko", "\uD835\uDCC6");
      assertNotNull(string1);
      assertEquals("Fko", string1);
      
      boolean boolean0 = Strman.isUpperCase("\uD835\uDCC6");
      assertTrue(boolean0);
      
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.rightPad(stringArray0[2], "q%sNpG$x[$Yp_Zgq[", (-1952));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]";
      stringArray0[1] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]";
      stringArray0[2] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]";
      stringArray0[3] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]";
      stringArray0[4] = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]";
      String string0 = Strman.prepend("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]", stringArray0);
      assertNotNull(string0);
      assertEquals("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]", string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = Strman.formatNumber(0L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0", string1);
      
      boolean boolean0 = Strman.isLowerCase("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]");
      assertFalse(boolean0);
      
      String string2 = Strman.removeLeft(">#", "zpW#^ AgXd?AIlu", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(">#", string2);
      
      String string3 = Strman.surround("separator can't be null", "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]", "zpW#^ AgXd?AIlu");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]separator can't be nullzpW#^ AgXd?AIlu", string3);
      
      String string4 = Strman.binEncode("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEqualsstring4);
      
      String string5 = Strman.formatstringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEqualsstring5);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = Strman.isEnclosedBetween("'FZk}ufqL{)l@]7c'F", "", "[%s]+$3");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = Strman.words("\u0105");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string6 = Strman.ensureLeft("", "RE<Dp&@yytOX-o&FKLi'y^.kST\"'&FKLi'y^.kST\"'");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("RE<Dp&@yytOX-o&FKLi'y^.kST\"'&FKLi'y^.kST\"'", string6);
      
      String string7 = Strman.prependArray("'FZk}ufqL{)l@]7c'F", stringArray0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string7);
      assertEquals("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", string7);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string8 = Strman.truncate("'start' should be not null.", 16, "[-s]+");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("'start' sho[-s]+", string8);
      
      Optional<String> optional0 = Strman.trimStart("&Mg|Q~");
      assertNotNull(optional0);
      
      boolean boolean2 = Strman.endsWith("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]'FZk}ufqL{)l@]7c'F", "zpW#^ AgXd?AIlu", 16, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Strman.trimEnd("'start' sh[-s]+", stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 25\r
         // [RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]\\RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]\\RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]\\RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]\\RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]]+$\r
         //                          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "$I[kV/mlZ|E..eWoqPN";
      String[] stringArray0 = Strman.lines((String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = "Q3";
      String string2 = Strman.appendArray("Q3", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Q3", string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = Strman.toCamelCase(".lA&-];WX0|GNW");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(".lA&];WX0|GNW", string3);
      
      // Undeclared exception!
      try { 
        Strman.contains((String) null, ".lA&-];WX0|GNW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "hIaiHfT'@|i";
      String string1 = Strman.removeLeft("hIaiHfT'@|i", "hIaiHfT'@|i");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "hIaiHfT'@|i";
      stringArray0[3] = "hIaiHfT'@|i";
      boolean boolean0 = Strman.containsAny("hIaiHfT'@|i", stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.hexDecode(stringArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "hIaiHfT'@|i";
      String string1 = Strman.removeLeft("hIaiHfT'@|i", "hIaiHfT'@|i");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "hIaiHfT'@|i";
      stringArray0[2] = "hIaiHfT'@|i";
      stringArray0[3] = "hIaiHfT'@|i";
      // Undeclared exception!
      try { 
        Strman.containsAny("hIaiHfT'@|i", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Strman.swapCase("&");
      assertNotNull(string0);
      assertEquals("&", string0);
      
      String string1 = Strman.ensureRight("&", "&", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&", string1);
      
      String string2 = Strman.capitalize("&");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&", string2);
      
      String string3 = Strman.ensureLeft("&", "&", true);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("&", string3);
      
      String string4 = Strman.leftTrim("&");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("&", string4);
      
      String string5 = Strman.ensureRight("&", "&", true);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("&", string5);
      
      boolean boolean0 = Strman.isBlank("\u290C");
      assertFalse(boolean0);
      
      String string6 = Strman.lowerFirst("&");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("&", string6);
      
      boolean boolean1 = Strman.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = Strman.toKebabCase("\u0174\u0174");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("\u0175\u0175", string7);
      
      int int0 = Strman.indexOf("&", "&ordm;", (-2097542165), true);
      assertEquals((-1), int0);
      
      String[] stringArray0 = null;
      String string8 = Strman.prepend("\u0174\u0174", (String[]) null);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("\u0174\u0174", string8);
      
      Optional<String> optional0 = Strman.tail("}4%");
      assertNotNull(optional0);
      
      String string9 = Strman.reverse("CR-f");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("f-RC", string9);
      
      // Undeclared exception!
      try { 
        Strman.repeat("$:0SW_Ne$CjZKXf?;-", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      Optional<String> optional0 = Strman.trimEnd("");
      assertNotNull(optional0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Strman.ensureRight((String) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Strman.humanize((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = Strman.join(stringArray0, "\u0174\u0174");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.endsWith("\u0174\u0174", "", 2, true);
      assertTrue(boolean0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "s+";
      stringArray1[1] = "";
      stringArray1[2] = null;
      stringArray1[3] = "mo";
      String string2 = Strman.format("s+", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("s+", string2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.decode((String) null, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Strman.underscored("yzH?;{(z[L.7eb");
      assertNotNull(string0);
      assertEquals("yz_h?;{(z[l.7eb", string0);
      
      int int0 = Strman.lastIndexOf("yzH?;{(z[L.7eb", "yzH?;{(z[L.7eb");
      assertEquals(0, int0);
      
      String string1 = Strman.removeNonWords("yz_h?;{(z[l.7eb");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yz_hzl7eb", string1);
      
      String string2 = Strman.toDecamelize("yz_h?;{(z[l.7eb", "yz_h?;{(z[l.7eb");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("yzyz_h?;{(z[l.7ebh?;{(z[l.7eb", string2);
      
      String string3 = Strman.htmlDecode("yzH?;{(z[L.7eb");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("null", string3);
      
      String string4 = Strman.removeRight("&frown;", "yzH?;{(z[L.7eb");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("&frown;", string4);
      
      String[] stringArray0 = Strman.chop("&frown;", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.isLowerCase("yz_h?;{(z[l.7eb");
      assertTrue(boolean0);
      
      String string5 = Strman.toStudlyCase("null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Null", string5);
      
      String string6 = Strman.slugify("");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean1 = Strman.containsAll("", stringArray0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      Optional<String> optional0 = Strman.trimStart("&frown;", stringArray0);
      assertNotNull(optional0);
      assertEquals(1, stringArray0.length);
      
      String string7 = Strman.base64Encode("&frown;");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("JmZyb3duOw==", string7);
      
      // Undeclared exception!
      try { 
        Strman.removeEmptyStrings((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array should not be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "'value' should be not null.";
      boolean boolean0 = Strman.isBlank((String) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'value' should be not null.";
      stringArray0[1] = null;
      stringArray0[2] = "ss+";
      stringArray0[3] = "ss+";
      stringArray0[4] = null;
      String string1 = Strman.format("ss+", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ss+", string1);
      assertEquals(5, stringArray0.length);
      
      String string2 = Strman.decEncode("ss+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("001150011500043", string2);
      
      // Undeclared exception!
      try { 
        Strman.words(stringArray0[1], "'value' should be not null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Strman.ensureRight("", "\u2ADB");
      assertNotNull(string0);
      assertEquals("\u2ADB", string0);
      
      String string1 = Strman.repeat("RW=!q-bTvnM.X^", 41);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^RW=!q-bTvnM.X^", string1);
      
      Optional<String> optional0 = Strman.at("\u2ADB", (-2355));
      assertNotNull(optional0);
      
      String string2 = Strman.reverse("y.):zi$/9k|6,&");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&,6|k9/$iz:).y", string2);
      
      // Undeclared exception!
      try { 
        Strman.countSubstr("RW=!q-bTvnM.X^", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = Strman.isBlank("");
      assertTrue(boolean0);
      
      String string0 = Strman.htmlDecode("");
      assertNotNull(string0);
      assertEquals("null", string0);
      
      String string1 = Strman.toSnakeCase("null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null", string1);
      
      Optional<String> optional0 = Strman.at("", 5);
      assertNotNull(optional0);
      
      String[] stringArray0 = Strman.lines("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.split("null", "null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = null;
      stringArray0[2] = "ss+";
      stringArray0[3] = "ss+";
      stringArray0[4] = null;
      String string0 = Strman.format("ss+", stringArray0);
      assertNotNull(string0);
      assertEquals("ss+", string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = Strman.decEncode("ss+");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("001150011500043", string1);
      
      // Undeclared exception!
      try { 
        Strman.words(stringArray0[1], "'value' should be not null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = Strman.countSubstr("KX`", "KX`");
      assertEquals(1L, long0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "KX`";
      stringArray0[1] = "KX`";
      stringArray0[2] = "KX`";
      stringArray0[3] = null;
      stringArray0[4] = "KX`";
      stringArray0[5] = "KX`";
      // Undeclared exception!
      try { 
        Strman.appendArray((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Strman.collapseWhitespace("\u00B5");
      assertNotNull(string0);
      assertEquals("\u00B5", string0);
      
      Optional<String> optional0 = Strman.tail("\u298C");
      assertNotNull(optional0);
      
      String string1 = Strman.htmlEncode("_O@?llO[");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&UnderBar;null&commat;&quest;nullnullnull&lbrack;", string1);
      
      String string2 = Strman.encode("", (-1), 4115);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Optional<String> optional1 = Strman.at("_O@?llO[", (-1));
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      String[] stringArray0 = Strman.split("z|;_{/", "");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&ycirc;";
      Optional<String> optional0 = Strman.trimStart("&FKLi'y^.kST\"'&FKLi'y^.kST\"'", stringArray0);
      assertNotNull(optional0);
      assertEquals(2, stringArray0.length);
      
      Optional<String> optional1 = Strman.head("e90wl6E#r6>9JE!");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      // Undeclared exception!
      try { 
        Strman.append(stringArray0[1], stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Optional<String> optional0 = Strman.at("vkD.", (-935));
      assertNotNull(optional0);
      
      String[] stringArray0 = Strman.chars("vkD.");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = Strman.contains("vkD.", "\u0174", true);
      assertFalse(boolean0);
      
      String string0 = Strman.decEncode("vkD.");
      assertNotNull(string0);
      assertEquals("00118001070006800046", string0);
      
      boolean boolean1 = Strman.inequal("\u0174", "00118001070006800046");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Strman.removeRight("00118001070006800046", "\u0174", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("00118001070006800046", string1);
      
      String string2 = Strman.ensureRight("", "", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.capitalize("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      long long0 = Strman.countSubstr("\uD835\uDCA6", "00118001070006800046", false, false);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Strman.decEncode("&Wopf;");
      assertNotNull(string0);
      assertEquals("000380008700111001120010200059", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&Wopf;";
      List<String> list0 = Strman.zip(stringArray0);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertFalse(list0.contains("&Wopf;"));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.binEncode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = "+lgfbN{aZ4UI";
      stringArray0[4] = "+lgfbN{aZ4UI";
      stringArray0[5] = "+lgfbN{aZ4UI";
      stringArray0[6] = "+lgfbN{aZ4UI";
      stringArray0[7] = "+lgfbN{aZ4UI";
      String string0 = Strman.prepend("+lgfbN{aZ4UI", stringArray0);
      assertNotNull(string0);
      assertEquals("nullnullnull+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UInull+lgfbN{aZ4UI", string0);
      assertEquals(9, stringArray0.length);
      
      int int0 = Strman.indexOf("})", "+lgfbN{aZ4UI", 46, false);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Strman.replace("})", stringArray0[2], "&angrt;", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Strman.removeNonWords("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = Strman.chop((String) null, 19);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.decode("^o_H!F-", (-6278), (-6278));
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6\r
         // (?<=\\G.{-6278})\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Strman.htmlEncode("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Optional<String> optional0 = Strman.trimEnd("&larrtl;");
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Strman.removeRight("\u1032", (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.split((String) null, "_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "%&MYrlEt ";
      String string1 = Strman.ensureRight("%&MYrlEt ", "%&MYrlEt ", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%&MYrlEt ", string1);
      
      String string2 = Strman.transliterate("%&MYrlEt ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("%&MYrlEt ", string2);
      
      String string3 = "";
      String[] stringArray0 = new String[12];
      stringArray0[8] = "%&MYrlEt ";
      stringArray0[1] = "%&MYrlEt ";
      stringArray0[2] = "%&MYrlEt ";
      stringArray0[3] = "%&MYrlEt ";
      // Undeclared exception!
      try { 
        Strman.containsAll("", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Strman.lowerFirst("&simplus;");
      assertNotNull(string0);
      assertEquals("&simplus;", string0);
      
      String string1 = Strman.ensureRight("&simplus;", "&simplus;", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&simplus;", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&simplus;";
      stringArray0[1] = "&simplus;";
      stringArray0[2] = "&simplus;";
      String string2 = Strman.join(stringArray0, "&simplus;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&simplus;&simplus;&simplus;&simplus;&simplus;", string2);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = Strman.endsWith("", "&simplus;", true);
      assertFalse(boolean0);
      
      String string3 = Strman.removeRight("", "WpXe$%@p3?h)[3", true);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = Strman.isLowerCase("^F']S");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "";
      int int0 = Strman.lastIndexOf("", "", false);
      assertEquals(0, int0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween("", "", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rightEncloser can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.isString((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = Strman.toCamelCase("ETPP8`heX2!");
      assertNotNull(string0);
      assertEquals("eTPP8`heX2!", string0);
      
      String string1 = Strman.base64Encode("ETPP8`heX2!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("RVRQUDhgaH9lWDIh", string1);
      
      boolean boolean0 = false;
      String string2 = Strman.removeLeft("", "ETPP8`heX2!", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = Strman.between("RVRQUDhgaH9lWDIh", "ss+", "ss+");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = Strman.removeSpaces("RVRQUDhgaH9lWDIh");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("RVRQUDhgaH9lWDIh", string3);
      
      String string4 = Strman.toKebabCase("ss+");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ss+", string4);
      
      String string5 = Strman.lowerFirst("(E 7J4*3&BY(OT");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("(E 7J4*3&BY(OT", string5);
      
      String string6 = "";
      String string7 = "";
      String string8 = Strman.removeLeft("", "", false);
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("", string8);
      
      // Undeclared exception!
      try { 
        Strman.prependArray((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Optional<String> optional0 = Strman.trimEnd("");
      assertNotNull(optional0);
      
      String string0 = "";
      String[] stringArray0 = Strman.between("", "", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = Strman.toStudlyCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      long long0 = Strman.countSubstr("", "[-s]+");
      assertEquals(0L, long0);
      
      String string2 = " 1Af~5/f:_8@9aPK6";
      boolean boolean0 = Strman.isEnclosedBetween(" 1Af~5/f:_8@9aPK6", "");
      assertTrue(boolean0);
      
      String string3 = Strman.decEncode("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = Strman.endsWith("[-s]+", "[-s]+", false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = "I1]m|(x:#";
      // Undeclared exception!
      try { 
        Strman.hexDecode("I1]m|(x:#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"I1]m\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("");
      assertTrue(boolean0);
      
      boolean boolean1 = Strman.endsWith("", "", true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Optional<String> optional0 = Strman.tail("");
      assertNotNull(optional0);
      
      String string0 = Strman.reverse("{{&Rb4uD");
      assertNotNull(string0);
      assertEquals("Du4bR&{{", string0);
      
      String string1 = Strman.formatNumber((-1L));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1", string1);
      
      int int0 = 4477;
      String string2 = Strman.encode("", 4477, 3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.repeat("T,!9*By~)O@Kf@WYLz}", 3120);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "&wr;";
      boolean boolean2 = Strman.containsAll("'lS", stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.slice("NS", 3120, 4477);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "";
      int int0 = Strman.length("");
      assertEquals(0, int0);
      
      String string1 = Strman.ensureRight("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.escapeRegExp("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Strman.indexOf((String) null, "#x_6MHzUh[G$1JQ#g2", 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Strman.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = Strman.containsAll("", stringArray0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = Strman.binEncode("&Rightarrow;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("000000000010011000000000010100100000000001101001000000000110011100000000011010000000000001110100000000000110000100000000011100100000000001110010000000000110111100000000011101110000000000111011", string1);
      
      Optional<String> optional0 = Strman.trimStart("", stringArray0);
      assertNotNull(optional0);
      assertEquals(1, stringArray0.length);
      
      String string2 = Strman.binDecode("000000000010011000000000010100100000000001101001000000000110011100000000011010000000000001110100000000000110000100000000011100100000000001110010000000000110111100000000011101110000000000111011");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&Rightarrow;", string2);
      
      // Undeclared exception!
      try { 
        Strman.chop("IGTT<@]VrK", (-1072));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "oM\"$VZ-rZ8^EI]l";
      String string1 = Strman.htmlEncode("oM\"$VZ-rZ8^EI]l");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nullnull&QUOT;&dollar;nullnullnullnullnullnull&Hat;nullnull&rbrack;null", string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Strman.rightTrim((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Strman.last("uDWcEd[E*n]F%=3'G", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Optional<String> optional0 = Strman.trimEnd("");
      assertNotNull(optional0);
      
      String string1 = Strman.hexEncode("&DZcy;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("00260044005a00630079003b", string1);
      
      String string2 = Strman.formatNumber(0L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0", string2);
      
      String string3 = Strman.reverse("0");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("0", string3);
      
      String string4 = Strman.collapseWhitespace("&DZcy;");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("&DZcy;", string4);
      
      String string5 = Strman.removeLeft("\u200E", "00260044005a00630079003b");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("\u200E", string5);
      
      String[] stringArray0 = Strman.chars("\u200E");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = "r, _b+J:9wz";
      // Undeclared exception!
      try { 
        Strman.between("r, _b+J:9wz", (String) null, "\u200E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'start' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "%&MYrlEt ";
      String string1 = Strman.ensureRight("%&MYrlEt ", "%&MYrlEt ", true);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%&MYrlEt ", string1);
      
      String string2 = Strman.transliterate("%&MYrlEt ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("%&MYrlEt ", string2);
      
      String string3 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%&MYrlEt ";
      stringArray0[1] = "%&MYrlEt ";
      stringArray0[2] = "%&MYrlEt ";
      stringArray0[3] = "%&MYrlEt ";
      boolean boolean0 = Strman.containsAll("", stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      String string4 = "separator can't be null";
      String string5 = Strman.transliterate("separator can't be null");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("separator can't be null", string5);
      
      String string6 = Strman.hexEncode("");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean1 = Strman.containsAny("6", stringArray0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      
      String string7 = "([a-z\\d])([A-Z]+)";
      boolean boolean2 = Strman.isBlank("([a-zd])([A-Z]+)");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = Strman.leftTrim(";g>}asQlGBX\"TZ+W&iS");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals(";g>}asQlGBX\"TZ+W&iS", string8);
      
      String string9 = Strman.removeLeft("", "`.WoH9=", true);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("", string9);
      
      // Undeclared exception!
      try { 
        Strman.decDecode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = Strman.lastIndexOf("_!dw", "");
      assertEquals(5, int0);
      
      Optional<String> optional0 = Strman.trimStart("");
      assertNotNull(optional0);
      
      String string0 = Strman.repeat("params does not have value for ", 2447);
      assertNotNull(string0);
      
      String string1 = "";
      String string2 = Strman.transliterate("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = Strman.isUpperCase("%04x");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Strman.slice("", 5, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.removeRight("", "", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.collapseWhitespace("x)6ZX|18'Pn");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("x)6ZX|18'Pn", string2);
      
      String string3 = Strman.formatNumber(1539L);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("1,539", string3);
      
      String string4 = Strman.safeTruncate("", 0, "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = null;
      // Undeclared exception!
      try { 
        Strman.transliterate((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Strman.formatNumber((-2766L));
      assertNotNull(string0);
      assertEquals("-2,766", string0);
      
      String[] stringArray0 = new String[0];
      try { 
        Strman.join(stringArray0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // separator can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Optional<String> optional0 = Strman.at("Q0", 0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "\\u";
      String string1 = Strman.removeLeft(string0, "&dash;", false);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      String string2 = Strman.underscored(string0);
      assertNotNull(string2);
      assertEquals("\\u", string2);
      
      String string3 = Strman.humanize("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Strman.slugify("&dash;");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("-and-dash", string4);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string2;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      String string5 = Strman.prepend("\u2323", stringArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("\\u\\u\\u\\u\u2323", string5);
      assertEquals(4, stringArray0.length);
      
      String string6 = Strman.dasherize(string1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("\\u", string6);
      
      String string7 = Strman.underscored("0$qV$XlpcD $QxTn{#^");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("0$q_v$xlpc_d_$qx_tn{#^", string7);
      
      Optional<String> optional0 = Strman.at((String) null, 0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Strman.truncate("L9UA}k$M", 0, "s");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.safeTruncate("leftEncloser can't be null", (-3422), "leftEncloser can't be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("leftEncloser can't be null", string1);
      
      String string2 = "[-k*|[{we70";
      boolean boolean0 = false;
      long long0 = Strman.countSubstr("[-k*|[{we70", "[-k*|[{we70", true, false);
      assertEquals(1L, long0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "leftEncloser can't be null";
      stringArray0[1] = "[-k*|[{we70";
      stringArray0[2] = "[-k*|[{we70";
      stringArray0[3] = "s";
      stringArray0[4] = "[-k*|[{we70";
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.safeTruncate((String) null, (-3422), "[-k*|[{we70");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Strman.binEncode("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = Strman.inequal("~$OA&(oj9_kLsK#WGG", "3");
      assertTrue(boolean0);
      
      int int0 = Strman.lastIndexOf("s+", "", (-1211), true);
      assertEquals((-1), int0);
      
      String string1 = Strman.toStudlyCase("3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3", string1);
      
      String string2 = Strman.swapCase((String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = "Y\"bn>7ooG";
      boolean boolean1 = Strman.inequal("Nw`@P>4Ij.Gh#", "Y\"bn>7ooG");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = Strman.toKebabCase("@HgVQ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("@-hg-v-q", string4);
      
      int int1 = Strman.length("&LeftUpVectorBar;");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      // Undeclared exception!
      try { 
        Strman.truncate("s+", (-3015), "_Tz9w_Ut)}5tE*f=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[0];
      List<String> list0 = Strman.zip(stringArray0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, stringArray0.length);
      
      String string0 = Strman.htmlDecode(">(r`}snfh}");
      assertNotNull(string0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      Optional<String> optional0 = Strman.at("", (-1478));
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        Strman.countSubstr("", "", true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.ensureRight("&", "", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&", string1);
      
      int int0 = 0;
      String string2 = Strman.slice("", 0, 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "&";
      stringArray0[2] = "&";
      String string3 = Strman.join(stringArray0, "3eC?M)(!");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("3eC?M)(!&3eC?M)(!&", string3);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = Strman.isLowerCase("");
      assertTrue(boolean0);
      
      String string4 = Strman.removeSpaces("&");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("&", string4);
      
      // Undeclared exception!
      try { 
        Strman.containsAll((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "[%s]+$";
      boolean boolean0 = Strman.unequal("[%s]+$", "[%s]+$");
      assertFalse(boolean0);
      
      String string1 = Strman.escapeRegExp("[%s]+$");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\\[%s\\]\\+\\$", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[%s]+$";
      stringArray0[1] = "[%s]+$";
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string2 = "\uD835\uDD5B";
      String string3 = Strman.upperFirst("\uD835\uDD5B");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\uD835\uDD5B", string3);
      
      String string4 = Strman.htmlDecode("/cnEIE'Lvw }&( fD[3");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("null", string4);
      
      // Undeclared exception!
      try { 
        Strman.contains((String) null, "&lfloor;", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "\\W+";
      String string1 = Strman.upperFirst("W+");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("W+", string1);
      
      String string2 = "";
      boolean boolean0 = Strman.isUpperCase("");
      assertTrue(boolean0);
      
      String string3 = "D_cHmi9V3*0j{@0Ed";
      String string4 = Strman.dasherize("D_cHmi9V3*0j{@0Ed");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("d-c-hmi9-v3*0j{@0-ed", string4);
      
      // Undeclared exception!
      try { 
        Strman.shuffle((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 0;
      String string0 = Strman.safeTruncate("", 0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "";
      String string2 = Strman.rightPad("", "", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        Strman.safeTruncate("", (-1323), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "aj8opzo?XN9(";
      String string1 = Strman.dasherize("aj8opzo?XN9(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("aj8opzo?-x-n9(", string1);
      
      String[] stringArray0 = Strman.chop("aj8opzo?XN9(", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = true;
      String string2 = Strman.ensureRight("3-v;KO|+B", "aj8opzo?-x-n9(", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("3-v;KO|+Baj8opzo?-x-n9(", string2);
      
      String string3 = Strman.rightPad("3-v;KO|+B", "3-v;KO|+Baj8opzo?-x-n9(", 2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("3-v;KO|+B", string3);
      
      String string4 = Strman.decEncode("3-v;KO|+Baj8opzo?-x-n9(");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("0005100045001180005900075000790012400043000660009700106000560011100112001220011100063000450012000045001100005700040", string4);
      
      String string5 = Strman.toSnakeCase((String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray1 = Strman.chars("&wKlgCa)m;cs6KB;Q2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(18, stringArray1.length);
      
      String string6 = Strman.transliterate("@-D2UWnE^I");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("at-D2UWnE^I", string6);
      
      String string7 = "Ql$4";
      String string8 = Strman.toKebabCase("Ql$4");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("ql$4", string8);
      
      String string9 = Strman.slugify("aj8opzo?-x-n9(");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("aj8opzo-x-n9", string9);
      
      int int0 = 2521;
      // Undeclared exception!
      try { 
        Strman.first("0005100045001180005900075000790012400043000660009700106000560011100112001220011100063000450012000045001100005700040", 2521);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "&rightrightarrows;";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      Optional<String> optional0 = Strman.trimStart((String) null, stringArray0);
      assertNotNull(optional0);
      assertEquals(9, stringArray0.length);
      
      String string0 = "";
      String string1 = Strman.capitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.humanize((String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        Strman.removeSpaces((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "7@rXAD`5]v/\\c(";
      String string1 = Strman.ensureLeft("", "7@rXAD`5]v/c(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7@rXAD`5]v/c(", string1);
      
      String string2 = "})";
      String string3 = Strman.ensureLeft("7@rXAD`5]v/c(", "})", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("})7@rXAD`5]v/c(", string3);
      
      String string4 = null;
      // Undeclared exception!
      try { 
        Strman.ensureLeft((String) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      String string0 = Strman.insert("", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = Strman.unequal("", "");
      assertFalse(boolean0);
      
      String string1 = "PM^Z|a?M@+Y>";
      String string2 = Strman.leftTrim("PM^Z|a?M@+Y>");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("PM^Z|a?M@+Y>", string2);
      
      String string3 = Strman.rightPad("", "", 1964);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = Strman.lastIndexOf("", "", (-3108), false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = Strman.removeSpaces("PM^Z|a?M@+Y>");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("PM^Z|a?M@+Y>", string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "PM^Z|a?M@+Y>";
      // Undeclared exception!
      try { 
        Strman.containsAny((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = null;
      String string1 = Strman.underscored((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Strman.isLowerCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = null;
      String string1 = Strman.humanize((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.encode("s+$", 1518, 1518);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = Strman.contains("*Bye", string2, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Strman.safeTruncate((String) null, (-398), "*Bye");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.toStudlyCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.truncate("input can't be null", 805, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("input can't be null", string2);
      
      String[] stringArray0 = Strman.words("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = Strman.startCase("input can't be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Input Can't Be Null", string3);
      
      String string4 = "";
      boolean boolean0 = Strman.contains("", "$1_$2");
      assertFalse(boolean0);
      
      String string5 = null;
      // Undeclared exception!
      try { 
        Strman.length((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = null;
      String string1 = "|Mz2&AP";
      // Undeclared exception!
      try { 
        Strman.truncate((String) null, (-588), "|Mz2&AP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("\u0405");
      assertFalse(boolean0);
      
      String string0 = Strman.collapseWhitespace("\u0405");
      assertNotNull(string0);
      assertEquals("\u0405", string0);
      
      String string1 = Strman.htmlEncode("\u0405");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&DScy;", string1);
      
      String[] stringArray0 = new String[1];
      String string2 = "@i;U54 z-";
      stringArray0[0] = "@i;U54 z-";
      String string3 = Strman.format("\u201D", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\u201D", string3);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("@i;U54 z-", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string4 = Strman.transliterate("@i;U54 z-");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ati;U54 z-", string4);
      
      // Undeclared exception!
      try { 
        Strman.between("THcpLz", "(ksr$Xncn%gTI", ")y_p");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'\r
         // )y_p
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Strman.binEncode("\u2916");
      assertNotNull(string0);
      assertEquals("0010100100010110", string0);
      
      boolean boolean0 = Strman.isEnclosedBetween("\u2916", "", ">loJoc;o|6a6K>");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = Strman.isString(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Strman.lastIndexOf("", "", false);
      assertEquals(0, int0);
      
      String string1 = Strman.lowerFirst("\u2916");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u2916", string1);
      
      String string2 = Strman.htmlDecode("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("null", string2);
      
      String string3 = Strman.toStudlyCase("\u2916");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("\u2916", string3);
      
      int int1 = Strman.indexOf("", "", 0, false);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = Strman.between("0010100100010110", "\u2916", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = Strman.rightPad("", "TzTi}rYplr_", 16);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_TzTi}rYplr_", string4);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = null;
      String string1 = Strman.swapCase((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        Strman.leftPad("", (String) null, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Strman.upperFirst("g/_0_{~|!@UCIw,");
      assertNotNull(string0);
      assertEquals("G/_0_{~|!@UCIw,", string0);
      
      String string1 = Strman.leftPad("g/_0_{~|!@UCIw,", "", 3184);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("g/_0_{~|!@UCIw,", string1);
      
      int int0 = Strman.lastIndexOf("g/_0_{~|!@UCIw,", "g/_0_{~|!@UCIw,");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "o@65=T`E";
      String string2 = Strman.format("-", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-", string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = Strman.base64Encode("-");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("LQ==", string3);
      
      String string4 = Strman.safeTruncate("", 3184, "PASKEuo=");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.base64Decode("PASKEuo=");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("<\u0004\uFFFD\u0012\uFFFD", string5);
      
      boolean boolean0 = Strman.endsWith("", "'start' should be not null.");
      assertFalse(boolean0);
      
      boolean boolean1 = Strman.isEnclosedBetween("A", "z)p>,f*", "PASKEuo=");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = Strman.capitalize("PASKEuo=");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Paskeuo=", string6);
      
      Optional<String> optional0 = Strman.first("9#k? 2", 0);
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        Strman.htmlEncode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = Strman.lastIndexOf("", "x-3Nv8. >%^,_pOL", true);
      assertEquals((-1), int0);
      
      String string0 = Strman.formatNumber(730L);
      assertNotNull(string0);
      assertEquals("730", string0);
      
      int int1 = Strman.lastIndexOf("x-3Nv8. >%^,_pOL", "x-3Nv8. >%^,_pOL", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = Strman.toDecamelize("x-3Nv8. >%^,_pOL", "\u010C");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("x3\u010Cnv8.>%^,\u010Cp\u010Co\u010Cl", string1);
      
      Optional<String> optional0 = Strman.trimStart("\\$0");
      assertNotNull(optional0);
      
      String string2 = "iR;vU@EZO7(N@ewey";
      String string3 = Strman.collapseWhitespace("iR;vU@EZO7(N@ewey");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = Strman.toKebabCase("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = Strman.words("", "\\$0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Optional<String> optional1 = Strman.head("iR;vU@EZO7(N@ewey");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      // Undeclared exception!
      try { 
        Strman.insert("efl}$!moSPY&mJYafNX", "'start' should be not null.", (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "";
      Optional<String> optional0 = Strman.first("", 5);
      assertNotNull(optional0);
      
      String string1 = Strman.encode("\u00D1", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("209", string1);
      
      String string2 = "F?zgrja.4\\";
      String string3 = null;
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween("F?zgrja.4", (String) null, "F?zgrja.4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // leftEncloser can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Strman.toDecamelize("ou,O", "ou,O");
      assertNotNull(string0);
      assertEquals("ou,ou,Oo", string0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      Optional<String> optional0 = Strman.trimEnd("ou,O");
      assertNotNull(optional0);
      
      String string1 = Strman.upperFirst("ou,ou,Oo");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ou,ou,Oo", string1);
      
      String string2 = Strman.removeNonWords("&cire;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("cire", string2);
      
      String string3 = Strman.formatNumber(535L);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("535", string3);
      
      Optional<String> optional1 = Strman.head("ou,ou,Oo");
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      int int0 = Strman.lastIndexOf("", "ou,O", 0, true);
      assertEquals((-1), int0);
      
      String string4 = Strman.removeSpaces("&cire;");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&cire;", string4);
      
      String string5 = Strman.removeRight("rZd#/Fa62#=TgYV}[f", "&cire;");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("rZd#/Fa62#=TgYV}[f", string5);
      
      String string6 = Strman.ensureLeft("xdd3x(JRD", "535", true);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("535xdd3x(JRD", string6);
      
      String[] stringArray2 = Strman.chop("", (-120));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      
      // Undeclared exception!
      try { 
        Strman.last("", (-2513));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.decDecode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = null;
      try { 
        Strman.lowerFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Strman.prependArray("", (String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = Strman.words("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = "yVlf!|'[?I[6w";
      Optional<String> optional0 = Strman.tail("yVlf!|'[?I[6w");
      assertNotNull(optional0);
      
      String string2 = Strman.capitalize("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween((String) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Strman.decDecode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Strman.toStudlyCase("&FKLi'y^.kST\"'");
      assertNotNull(string0);
      assertEquals("&FKLi'y^.kST\"'", string0);
      
      String string1 = Strman.ensureLeft("&FKLi'y^.kST\"'", "&FKLi'y^.kST\"'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&FKLi'y^.kST\"'", string1);
      
      String string2 = Strman.removeSpaces("&FKLi'y^.kST\"'");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&FKLi'y^.kST\"'", string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&FKLi'y^.kST\"'";
      stringArray0[1] = "&FKLi'y^.kST\"'";
      stringArray0[2] = "&FKLi'y^.kST\"'";
      stringArray0[3] = "&FKLi'y^.kST\"'";
      stringArray0[4] = "&FKLi'y^.kST\"'";
      stringArray0[5] = "ZgT,$XB38*";
      stringArray0[6] = "&FKLi'y^.kST\"'";
      boolean boolean0 = Strman.containsAny("&FKLi'y^.kST\"'", stringArray0, true);
      assertTrue(boolean0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Optional<String> optional0 = Strman.head("w");
      assertNotNull(optional0);
      
      String string0 = Strman.startCase("w");
      assertNotNull(string0);
      assertEquals("W", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W";
      stringArray0[1] = "w";
      stringArray0[2] = "";
      stringArray0[3] = "q =%_6D>WfM@:a t*";
      stringArray0[4] = "W";
      stringArray0[5] = "W";
      stringArray0[6] = "W";
      stringArray0[7] = "w";
      boolean boolean0 = Strman.containsAll("w", stringArray0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      String string1 = Strman.slugify("6bVgdpi");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6bvgdpi", string1);
      
      String string2 = Strman.escapeRegExp("n*kf");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("n\\*kf", string2);
      
      String string3 = Strman.toDecamelize("n*kf", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("n*kf", string3);
      
      String string4 = Strman.replace("", "w", "w", true);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        Strman.contains("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "O,}cz^%J*";
      String string1 = "\\s|_|-|(?<=[a-z])(?=[A-Z])";
      boolean boolean0 = Strman.inequal("O,}cz^%J*", "s|_|-|(?<=[a-z])(?=[A-Z])");
      assertTrue(boolean0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Strman.leftTrim((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Strman.collapseWhitespace("^s+");
      assertNotNull(string0);
      assertEquals("^s+", string0);
      
      String string1 = Strman.toCamelCase("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = Strman.words("params does not have value for ", "params does not have value for ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = Strman.appendArray("params does not have value for ", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("params does not have value for ", string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = Strman.capitalize("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Strman.removeRight("&oline;", "Wi=p", true);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&oline;", string4);
      
      // Undeclared exception!
      try { 
        Strman.decDecode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Strman.htmlDecode("");
      assertNotNull(string0);
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Strman.prependArray("null", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null", string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = "I~~))wz[";
      int int0 = Strman.lastIndexOf("null", "I~~))wz[");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Strman.first("null", (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Strman.safeTruncate("{5ULjx!Rl", 0, "{5ULjx!Rl");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.escapeRegExp("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      long long0 = Strman.countSubstr("", "{5ULjx!Rl", true, false);
      assertEquals(0L, long0);
      
      String string2 = "T#\"x@ut93(<";
      Optional<String> optional0 = Strman.trimStart("T#\"x@ut93(<");
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      Optional<String> optional1 = Strman.trimEnd("", stringArray0);
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      assertEquals(5, stringArray0.length);
      
      String string3 = Strman.collapseWhitespace("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Strman.removeNonWords("");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = Strman.containsAny("", stringArray0, true);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string5 = Strman.toKebabCase("{5ULjx!Rl");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("{5-u-ljx!-rl", string5);
      
      int int0 = Strman.lastIndexOf("", "{5ULjx!Rl", 0, true);
      assertEquals((-1), int0);
      
      String string6 = Strman.swapCase("");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean1 = Strman.inequal("T#\"x@ut93(<", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = Strman.chars("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.trimEnd("{5ULjx!Rl", stringArray1);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 3\r
         // []+$\r
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.isUpperCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = Strman.isEnclosedBetween("", "gp-v!W0L@0Got4$AX", "");
      assertFalse(boolean0);
      
      long long0 = 0L;
      String string1 = Strman.formatNumber(0L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0", string1);
      
      String string2 = "V2mB6u(8d-[os{";
      String string3 = Strman.removeRight("Q16,;R9gLz", "V2mB6u(8d-[os{");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Q16,;R9gLz", string3);
      
      String string4 = "";
      String string5 = Strman.hexEncode("");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      // Undeclared exception!
      try { 
        Strman.toStudlyCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.slugify((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = Strman.indexOf("", "", 0, true);
      assertEquals(0, int0);
      
      String string0 = Strman.surround("\u00D5", "=B`h", "");
      assertNotNull(string0);
      assertEquals("=B`h\u00D5", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-z:O&/";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "=B`h\u00D5";
      stringArray0[6] = "=B`h\u00D5";
      String string1 = Strman.append("", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-z:O&/=B`h\u00D5=B`h\u00D5", string1);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = Strman.unequal("H<|", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = Strman.isEnclosedBetween("%04x", "%04x", "");
      assertTrue(boolean0);
      
      String string0 = Strman.htmlEncode("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4E7.}%F}Fzy";
      stringArray0[1] = "h{GY";
      stringArray0[2] = "";
      stringArray0[3] = "38(A,AAOXRfJy:!";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ";mRV/7m-E<9";
      String string1 = Strman.prependArray(";mRV/7m-E<9", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4E7.}%F}Fzyh{GY38(A,AAOXRfJy:!;mRV/7m-E<9;mRV/7m-E<9", string1);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.zip((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "_kz%ngId=eU";
      String string1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Strman.indexOf("_kz%ngId=eU", (String) null, 21, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = null;
      String string1 = "$I[kV/mlZ|E..eWoqPN";
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween((String) null, (String) null, "$I[kV/mlZ|E..eWoqPN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Optional<String> optional0 = Strman.at("", 11);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "``M=nH7~%|9";
      Map<Character, Long> map0 = Strman.charsCount("``M=nH7~%|9");
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(10, map0.size());
      
      String string1 = Strman.surround(" ", "``M=nH7~%|9", " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("``M=nH7~%|9  ", string1);
      
      boolean boolean0 = Strman.isUpperCase(" ");
      assertTrue(boolean0);
      
      String[] stringArray0 = Strman.words("Z!drYLfm`|/Wobb", "Z!drYLfm`|/Wobb");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = Strman.humanize("rightEncloser can't be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Right encloser can't be null", string2);
      
      String string3 = Strman.append("V5yE+\"F", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("V5yE+\"F|", string3);
      assertEquals(2, stringArray0.length);
      
      String string4 = Strman.startCase("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.removeNonWords("\u2913");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = Strman.append("", stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("|", string6);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = Strman.contains("", "com.strman.Strman", true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Strman.last((String) null, 5339);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "([a-z\\d])([A-Z]+)";
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.words("([a-zd])([A-Z]+)", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.leftPad("", (String) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "gG$oYqvC-p[q9kf";
      String string1 = Strman.toStudlyCase("gG$oYqvC-p[q9kf");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GG$oYqvCP[q9kf", string1);
      
      boolean boolean0 = Strman.isEnclosedBetween("gG$oYqvC-p[q9kf", "GG$oYqvCP[q9kf");
      assertFalse(boolean0);
      
      String[] stringArray0 = null;
      String string2 = "p#j+,/-\\wKNUFxU";
      try { 
        Strman.join((String[]) null, "p#j+,/-wKNUFxU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array 'strings' can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.ensureLeft((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "+@?";
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.ensureLeft("+@?", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.insert("^s+", "", 3362);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^s+", string1);
      
      String string2 = Strman.transliterate("^s+");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^s+", string2);
      
      String string3 = "\"p;AnJm";
      int int0 = Strman.lastIndexOf("\"p;AnJm", "\"p;AnJm", false);
      assertEquals(0, int0);
      
      String string4 = Strman.leftPad("^s+", "^s+", 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("^s+", string4);
      
      String string5 = "4R5>2.d1zJ;/";
      String string6 = Strman.ensureRight("4R5>2.d1zJ;/", "bIF2pc}1");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("4R5>2.d1zJ;/bIF2pc}1", string6);
      
      String string7 = "EJZ*JgT!Dz60oO";
      int int1 = Strman.lastIndexOf("^s+", "EJZ*JgT!Dz60oO", (-1737), true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        Strman.removeRight((String) null, "4R5>2.d1zJ;/bIF2pc}1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.base64Encode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Strman.removeNonWords("<?H");
      assertNotNull(string0);
      assertEquals("H", string0);
      
      String string1 = Strman.capitalize("0.T+}G,GU<i");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0.t+}g,gu<i", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.T+}G,GU<i";
      boolean boolean0 = Strman.containsAny("0.T+}G,GU<i", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string2 = "";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "H";
      stringArray1[1] = "<?H";
      stringArray1[2] = "";
      stringArray1[3] = "<?H";
      stringArray1[4] = "";
      stringArray1[5] = "0.T+}G,GU<i";
      stringArray1[6] = "<?H";
      stringArray1[7] = "H";
      stringArray1[8] = "0.T+}G,GU<i";
      String string3 = Strman.format("", stringArray1);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.words((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "U$O|-L&I";
      String string1 = Strman.capitalize("U$O|-L&I");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("U$o|-l&i", string1);
      
      String string2 = Strman.formatNumber(3061L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("3,061", string2);
      
      String string3 = Strman.repeat("3,061", 45);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("3,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,061", string3);
      
      String string4 = Strman.rightTrim("3,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,061");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("3,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,061", string4);
      
      boolean boolean0 = Strman.inequal("3,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,0613,061", (String) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Strman.binDecode("\u2514");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u2514\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("");
      assertTrue(boolean0);
      
      String[] stringArray0 = Strman.words("&setmn;");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = "4:";
      int int0 = Strman.lastIndexOf("4:", "&setmn;", 0, true);
      assertEquals((-1), int0);
      
      Map<Character, Long> map0 = Strman.charsCount("X>]*");
      assertNotNull(map0);
      assertEquals(4, map0.size());
      assertFalse(map0.isEmpty());
      
      String string1 = Strman.safeTruncate("X>]*", (-1), "X>]*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X>]*", string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Strman.repeat((String) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = Strman.lastIndexOf("", "", true);
      assertEquals(0, int0);
      
      String string0 = Strman.removeSpaces("\uD835\uDD52");
      assertNotNull(string0);
      assertEquals("\uD835\uDD52", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "\uD835\uDD52";
      stringArray0[2] = "'value' should be not null.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "\uD835\uDD52";
      stringArray0[7] = "\uD835\uDD52";
      String string1 = Strman.appendArray("'value' should be not null.", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'value' should be not null.\uD835\uDD52'value' should be not null.\uD835\uDD52\uD835\uDD52", string1);
      assertEquals(8, stringArray0.length);
      
      String string2 = Strman.ensureLeft("bwGrY", "1/Qp}i", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("1/Qp}ibwGrY", string2);
      
      String string3 = Strman.safeTruncate("\u1EA3", 31, "\uD835\uDD52");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\u1EA3", string3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = Strman.inequal((String) null, (String) null);
      assertFalse(boolean0);
      
      String string0 = Strman.removeNonWords("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = Strman.contains("", "", false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Strman.lastIndexOf("0Ki|ra`D..524oI$}", "", true);
      assertEquals(17, int0);
      
      Optional<String> optional0 = Strman.trimEnd("");
      assertNotNull(optional0);
      
      String string1 = Strman.toStudlyCase("UrH`n]?=yl!@^U\"#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("UrH`n]?=yl!@^U\"#", string1);
      
      int int1 = Strman.indexOf("0Ki|ra`D..524oI$}", "", (-2479), false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = Strman.words("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.inequal("", "");
      assertFalse(boolean0);
      
      String string0 = Strman.formatNumber(0L);
      assertNotNull(string0);
      assertEquals("0", string0);
      
      String string1 = "+{";
      boolean boolean1 = Strman.isEnclosedBetween("0", "0", "+{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Strman.contains("0,La{O\"UT]tQ", "(Q16=fwpw8");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      List<String> list0 = Strman.zip(stringArray0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, stringArray0.length);
      assertFalse(list0.contains(string0));
      
      // Undeclared exception!
      try { 
        Strman.split("", "0,La{O\"UT]tQ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3\r
         // 0,La{O\"UT]tQ\r
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "+lgfbN{aZ4UI";
      stringArray0[2] = "+lgfbN{aZ4UI";
      stringArray0[3] = "+lgfbN{aZ4UI";
      stringArray0[4] = "+lgfbN{aZ4UI";
      stringArray0[5] = "+lgfbN{aZ4UI";
      stringArray0[6] = "+lgfbN{aZ4UI";
      stringArray0[7] = "+lgfbN{aZ4UI";
      String string0 = Strman.prepend("+lgfbN{aZ4UI", stringArray0);
      assertNotNull(string0);
      assertEquals("null+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UInull+lgfbN{aZ4UI", string0);
      assertEquals(9, stringArray0.length);
      
      int int0 = Strman.indexOf("})", "+lgfbN{aZ4UI", 46, false);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Strman.replace("})", "+lgfbN{aZ4UI", "&angrt;", false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0\r
         // +lgfbN{aZ4UI\r
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "A6#";
      String string1 = Strman.hexEncode("A6#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("004100360023", string1);
      
      // Undeclared exception!
      try { 
        Strman.hexDecode("A6#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A6#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Strman.toDecamelize("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.collapseWhitespace((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "[%s]+$";
      String string1 = Strman.dasherize("[%s]+$");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[%s]+$", string1);
      
      String string2 = Strman.base64Encode("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.underscored("s+");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("s+", string3);
      
      String string4 = Strman.startCase("[%s]+$");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("[%s]+$", string4);
      
      String string5 = Strman.binEncode("[%s]+$");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("000000000101101100000000001001010000000001110011000000000101110100000000001010110000000000100100", string5);
      
      String string6 = Strman.hexEncode("F:Qg-|1/}SPBk66y'o");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("0046003a00510067002d007c0031002f007d005300500042006b0036003600790027006f", string6);
      
      // Undeclared exception!
      try { 
        Strman.chop("s+", (-486));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.toStudlyCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "";
      String string3 = Strman.rightPad("", "", 7);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = Strman.isLowerCase("");
      assertTrue(boolean0);
      
      String string4 = Strman.slugify("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = null;
      // Undeclared exception!
      try { 
        Strman.lastIndexOf("", (String) null, 5714, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = null;
      String string1 = "%(<waIl:";
      // Undeclared exception!
      try { 
        Strman.surround((String) null, "%(<waIl:", "\"K@`vch7dY&OMFugT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.trimEnd("ss{\r%&y_a(V#4jF", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array 'strings' can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = Strman.reverse("Jwb)xWb~#V0");
      assertNotNull(string0);
      assertEquals("0V#~bWx)bwJ", string0);
      
      String string1 = Strman.format("&omid;", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&omid;", string1);
      
      String string2 = Strman.removeRight("#N^", "0V#~bWx)bwJ", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("#N^", string2);
      
      String string3 = Strman.removeLeft("&omid;", "0V#~bWx)bwJ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("&omid;", string3);
      
      boolean boolean0 = Strman.isLowerCase("GX3!&8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Strman.encode("dxTCD[X{P", 0, 0);
      assertNotNull(string0);
      assertEquals("100120846768918812312780", string0);
      
      String string1 = Strman.insert("\uD835\uDD59", "", 4377);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uD835\uDD59", string1);
      
      String string2 = Strman.truncate("ftO67Q`1!*H{_", 0, "HyzWz:bz4");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.dasherize("ftO67Q`1!*H{_");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ft-o67-q`1!*-h{", string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "HyzWz:bz4";
      boolean boolean0 = Strman.containsAll("", stringArray0, false);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string4 = Strman.transliterate("gJTP}");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("gJTP}", string4);
      
      boolean boolean1 = Strman.isEnclosedBetween("\uD835\uDD59", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = Strman.base64Encode("'=V T");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Jz1WIFQ=", string5);
      
      String string6 = Strman.truncate("", 0, "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = Strman.prepend("\uD835\uDD59", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("HyzWz:bz4\uD835\uDD59", string7);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = Strman.lines("TdDn3Q%{J+})&");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      String string8 = Strman.underscored("TdDn3Q%{J+})&");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("td_dn3_q%{j+})&", string8);
      
      String string9 = Strman.binEncode("HyzWz:bz4");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("000000000100100000000000011110010000000001111010000000000101011100000000011110100000000000111010000000000110001000000000011110100000000000110100", string9);
      
      String string10 = Strman.ensureRight("-|Bn#U|k8WsM]&OBH", "1y<DUN");
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
      assertEquals("-|Bn#U|k8WsM]&OBH1y<DUN", string10);
      
      boolean boolean2 = Strman.endsWith("100120846768918812312780", "", 0, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = Strman.isUpperCase("");
      assertTrue(boolean0);
      
      int int0 = Strman.length("");
      assertEquals(0, int0);
      
      String string0 = Strman.insert("", "", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = Strman.words("ss+", "ss+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = Strman.removeLeft("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Optional<String> optional0 = Strman.first("", 10);
      assertNotNull(optional0);
      
      String[] stringArray1 = Strman.words("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string2 = Strman.humanize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.appendArray("", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string4 = Strman.ensureLeft("", "^WDxyIy]T,Nz:4^:B");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("^WDxyIy]T,Nz:4^:B", string4);
      
      String string5 = Strman.removeLeft("", "[%s]+$", true);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Strman.htmlEncode("WoZ;{x] 53H)VC)");
      assertNotNull(string0);
      assertEquals("nullnullnull&semi;&lbrace;null&rbrack;nullnullnullnull&rpar;nullnull&rpar;", string0);
      
      String string1 = Strman.lowerFirst("nullnullnull&semi;&lbrace;null&rbrack;nullnullnullnull&rpar;nullnull&rpar;");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nullnullnull&semi;&lbrace;null&rbrack;nullnullnullnull&rpar;nullnull&rpar;", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "WoZ;{x] 53H)VC)";
      stringArray0[1] = "nullnullnull&semi;&lbrace;null&rbrack;nullnullnullnull&rpar;nullnull&rpar;";
      stringArray0[2] = "-and-";
      boolean boolean0 = Strman.containsAny("\\$0", stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = Strman.inequal("nullnullnull&semi;&lbrace;null&rbrack;nullnullnullnull&rpar;nullnull&rpar;", "WoZ;{x] 53H)VC)");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = Strman.capitalize("d9AYITzOL;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("D9ayitzol;", string2);
      
      // Undeclared exception!
      try { 
        Strman.decode("WoZ;{x] 53H)VC)", (-97), 706);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6\r
         // (?<=\\G.{-97})\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "#72LILU:x{=J";
      boolean boolean0 = Strman.contains("#72LILU:x{=J", "#72LILU:x{=J");
      assertTrue(boolean0);
      
      String string1 = "Rr05";
      Optional<String> optional0 = Strman.tail("Rr05");
      assertNotNull(optional0);
      
      String string2 = "ad&l]";
      String[] stringArray0 = Strman.between("ad&l]", "sqLjG(M~:<?Y|U ", "ad&l]");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = Strman.containsAny("ad&l]", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        Strman.upperFirst("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.Optional", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = Strman.unequal("", "");
      assertFalse(boolean0);
      
      String string0 = Strman.transliterate("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Map<Character, Long> map0 = Strman.charsCount("");
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "y--zu(rE7Is";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "y--zu(rE7Is";
      String string1 = Strman.prepend("y--zu(rE7Is", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y--zu(rE7Isy--zu(rE7Isy--zu(rE7Is", string1);
      assertEquals(7, stringArray0.length);
      
      String string2 = Strman.decEncode("1$Sf#");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0004900036000830010200035", string2);
      
      String string3 = Strman.prependArray("YtHd.(RdY-?Q6Gu|", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("y--zu(rE7Isy--zu(rE7IsYtHd.(RdY-?Q6Gu|", string3);
      assertEquals(7, stringArray0.length);
      
      String string4 = Strman.slugify("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      Optional<String> optional0 = Strman.trimStart("");
      assertNotNull(optional0);
      
      String string5 = Strman.ensureRight("\uD835\uDD58", "y--zu(rE7Is", false);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\uD835\uDD58y--zu(rE7Is", string5);
      
      String string6 = Strman.reverse("s|_|-|(?<=[a-z])(?=[A-Z])");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(")]Z-A[=?()]z-a[=<?(|-|_|s", string6);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ZT6tep*^awy1`;";
      stringArray0[1] = "ZT6tep*^awy1`;";
      stringArray0[2] = "ZT6tep*^awy1`;";
      boolean boolean0 = Strman.isUpperCase("ZT6tep*^awy1`;");
      assertFalse(boolean0);
      
      boolean boolean1 = Strman.unequal("ZT6tep*^awy1`;", "ZT6tep*^awy1`;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Strman.isString("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      long long0 = Strman.countSubstr("QEYs'R)5p{<", "params does not have value for ", false, false);
      assertEquals(0L, long0);
      
      String string0 = Strman.replace("QEYs'R)5p{<", "ZT6tep*^awy1`;", "", true);
      assertNotNull(string0);
      assertEquals("QEYs'R)5p{<", string0);
      
      String string1 = Strman.leftTrim("ZT6tep*^awy1`;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ZT6tep*^awy1`;", string1);
      
      String string2 = Strman.decEncode("ZT6tep*^awy1`;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0009000084000540011600101001120004200094000970011900121000490009600059", string2);
      
      Optional<String> optional0 = Strman.at("!bAxHp)_1n=R", (-1439));
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Strman.surround(",$}'tEyj@7TaGd", ",$}'tEyj@7TaGd", "Gp7hm");
      assertNotNull(string0);
      
      String string1 = Strman.toDecamelize("s+$", "Gp7hm");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("s+$", string1);
      
      String string2 = Strman.encode(",$}'tEyj@7TaGd,$}'tEyj@7TaGdGp7hm", (-5077), (-5077));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("4436125391166912110664558497711004436125391166912110664558497711007111255104109", string2);
      
      boolean boolean0 = Strman.endsWith("\"8H({kOXlH\"o~5", "jX", (-5077), true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Strman.replace("s+$", "jX", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "params does not have value for ";
      int int0 = (-1561);
      // Undeclared exception!
      try { 
        Strman.truncate("params does not have value for ", (-1561), "params does not have value for ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "&\\W+;";
      Optional<String> optional0 = Strman.trimStart("&W+;");
      assertNotNull(optional0);
      
      String string1 = "E";
      // Undeclared exception!
      try { 
        Strman.decDecode("E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = Strman.contains("P?m]axFYR*jRANFe;", "");
      assertTrue(boolean0);
      
      String string0 = Strman.swapCase("P?m]axFYR*jRANFe;");
      assertNotNull(string0);
      assertEquals("p?M]AXfyr*JranfE;", string0);
      
      Optional<String> optional0 = Strman.trimEnd("");
      assertNotNull(optional0);
      
      String string1 = Strman.toSnakeCase("P?m]axFYR*jRANFe;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("p?m]ax_f_y_r*j_r_a_n_fe;", string1);
      
      String string2 = Strman.shuffle("h@Vn)`,_5Q");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Qh@Vn)`,_5", string2);
      
      String string3 = Strman.underscored("\u0399");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\u03B9", string3);
      
      String string4 = Strman.collapseWhitespace("p?M]AXfyr*JranfE;");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p?M]AXfyr*JranfE;", string4);
      
      boolean boolean1 = Strman.isEnclosedBetween("\u0399", "RE<Dp&@yytOX-o", "p?M]AXfyr*JranfE;");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = Strman.ensureRight("P?m]axFYR*jRANFe;", "t8(wcpZj", true);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("P?m]axFYR*jRANFe;t8(wcpZj", string5);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "&bigotimes;";
      String[] stringArray0 = Strman.between("PfCz", "J6D9k'jr>7f", "&bigotimes;");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = Strman.format("&bigotimes;", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&bigotimes;", string1);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = Strman.isLowerCase("\"-");
      assertTrue(boolean0);
      
      String string2 = Strman.escapeRegExp("PfCz");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("PfCz", string2);
      
      // Undeclared exception!
      try { 
        Strman.first("&bigotimes;", 285);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Optional<String> optional0 = Strman.trimStart("io^o[QRo[n1N!9!%");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.removeSpaces("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean0 = Strman.containsAny("", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string2 = Strman.truncate("", 3, "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        Strman.decDecode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = Strman.endsWith("g~gfLs'QP2s", "g~gfLs'QP2s", 260, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Optional<String> optional0 = Strman.tail("nudF;{JgU9%;]E");
      assertNotNull(optional0);
      
      String string0 = Strman.replace("6Cp^-", "6Cp^-", "", false);
      assertNotNull(string0);
      assertEquals("6Cp^-", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("Zc9Yi=7Z0hHDlpH{");
      assertFalse(boolean0);
      
      boolean boolean1 = Strman.contains("ak*N>wKes3(5A+", "", false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Strman.leftPad("Zc9Yi=7Z0hHDlpH{", "Zc9Yi=7Z0hHDlpH{", 3);
      assertNotNull(string0);
      assertEquals("Zc9Yi=7Z0hHDlpH{", string0);
      
      int int0 = Strman.lastIndexOf("", "", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = Strman.lines("d0Ktx@[v~;^Gf2");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.containsAny("XmrCU_xZPR&\u0005,RjoP", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = "&";
      String string1 = null;
      // Undeclared exception!
      try { 
        Strman.between("&", (String) null, "s+$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'start' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = Strman.formatNumber(1L);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      String string1 = Strman.formatNumber(0L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0", string1);
      
      String string2 = Strman.humanize("1");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("1", string2);
      
      // Undeclared exception!
      try { 
        Strman.decode("1", 953, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.countSubstr((String) null, (String) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Strman.rightTrim("ss+");
      assertNotNull(string0);
      assertEquals("ss+", string0);
      
      boolean boolean0 = Strman.isUpperCase(")f>M?uSBBEa-,eU");
      assertFalse(boolean0);
      
      boolean boolean1 = Strman.contains("ss+", ")f>M?uSBBEa-,eU");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Optional<String> optional0 = Strman.head("ss+");
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        Strman.encode((String) null, (-1168), (-1168));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Strman.swapCase("s+$");
      assertNotNull(string0);
      assertEquals("S+$", string0);
      
      String string1 = Strman.toStudlyCase("S+$");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("S+$", string1);
      
      String string2 = Strman.htmlEncode("-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("null", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S+$";
      stringArray0[1] = "s+$";
      String string3 = Strman.join(stringArray0, "-");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("S+$-s+$", string3);
      assertEquals(2, stringArray0.length);
      
      long long0 = Strman.countSubstr("", ")^y#aPn", false, false);
      assertEquals(0L, long0);
      
      String string4 = Strman.collapseWhitespace("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.removeRight("", "L|TJg<>txD+(,),?", false);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = Strman.reverse("ILVr9]");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("]9rVLI", string6);
      
      int int0 = Strman.lastIndexOf("", "", (-411), false);
      assertEquals((-1), int0);
      
      String string7 = Strman.toCamelCase("s+$");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("s+$", string7);
      
      String string8 = Strman.dasherize("");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = Strman.decEncode("^~KMw 9kbQV:520M4s");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("000940012600075000770011900032000570010700098000810008600058000530005000048000770005200115", string9);
      
      boolean boolean0 = Strman.endsWith("", "", false);
      assertTrue(boolean0);
      
      String string10 = Strman.toStudlyCase("\u1D81");
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertEquals("\u1D81", string10);
      
      String[] stringArray1 = Strman.chars("+*(");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      
      boolean boolean1 = Strman.containsAll("s+$", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      
      String string11 = Strman.reverse("-and-");
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertNotNull(string11);
      assertEquals("-dna-", string11);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = Strman.chop("s", 2);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("s", 14);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = Strman.contains("-{ _#g}z%5L;:P2_>*W", "s", true);
      assertFalse(boolean0);
      
      String string0 = Strman.decEncode("&VDash;");
      assertNotNull(string0);
      assertEquals("00038000860006800097001150010400059", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Strman.underscored("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = Strman.split("\uD835\uDD39", "\r\n?|\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = Strman.repeat("", 16);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.leftPad("\r\n?|\n", "", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r\n?|\n", string2);
      
      String string3 = Strman.toSnakeCase("<V)U_I$$W'oXz$7B%`");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("<_v)_u_i$$_w'o_xz$7_b%`", string3);
      
      String string4 = Strman.toStudlyCase("\r\n?|\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("?|", string4);
      
      String string5 = Strman.upperFirst("?|");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("?|", string5);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ZT6tep*^awy1`;";
      stringArray0[1] = "ZT6tep*^awy1`;";
      stringArray0[2] = "ZT6tep*^awy1`;";
      boolean boolean0 = Strman.containsAny("ZT6tep*^awy1`;", stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = Strman.isUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = Strman.isString("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      long long0 = Strman.countSubstr("QEYs'R)5p{<", "params does not have value for ", true, false);
      assertEquals(0L, long0);
      
      String string0 = Strman.replace("QEYs'R)5p{<", "ZT6tep*^awy1`;", "", true);
      assertNotNull(string0);
      assertEquals("QEYs'R)5p{<", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&";
      stringArray0[1] = "&";
      String string0 = Strman.prependArray("&", stringArray0);
      assertNotNull(string0);
      assertEquals("&&&", string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = Strman.append("&", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&&&", string1);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.base64Decode("&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte[] should at least have 2 bytes for base64 bytes
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = Strman.endsWith("7n us$6Mfm", "");
      assertTrue(boolean0);
      
      String string0 = "\\{(\\w+)}";
      String string1 = Strman.humanize("{(w+)}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{(w+)}", string1);
      
      String[] stringArray0 = null;
      String string2 = Strman.format("", (String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = Strman.removeLeft("", "{(w+)}");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = "";
      String string5 = Strman.toStudlyCase("");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean1 = Strman.isLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = Strman.ensureLeft("%04x", "j;(WE0'mjGgQHY;vKQ", false);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("j;(WE0'mjGgQHY;vKQ%04x", string6);
      
      String string7 = Strman.slugify("{(w+)}");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("-w", string7);
      
      String string8 = Strman.hexEncode("N@[_e9G(n");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("004e0040005b005f0065003900470028006e", string8);
      
      String string9 = null;
      // Undeclared exception!
      try { 
        Strman.htmlEncode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.endsWith("(?iZ:P(j6|`o'", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Strman.swapCase("&frac35;");
      assertNotNull(string0);
      assertEquals("&FRAC35;", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&FRAC35;";
      stringArray0[1] = "&frac35;";
      stringArray0[2] = "leftEncloser can't be null";
      stringArray0[3] = "&FRAC35;";
      stringArray0[4] = "&FRAC35;";
      stringArray0[5] = "&FRAC35;";
      stringArray0[6] = "&FRAC35;";
      // Undeclared exception!
      try { 
        Strman.trimEnd("&frac35;", stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal/unsupported escape sequence near index 19\r
         // [&FRAC35;\\&frac35;\\leftEncloser can't be null\\&FRAC35;\\&FRAC35;\\&FRAC35;\\&FRAC35;]+$\r
         //                    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "[^\\w]+";
      int int0 = Strman.length("[^w]+");
      assertEquals(5, int0);
      
      boolean boolean0 = Strman.isString("[^w]+");
      assertTrue(boolean0);
      
      String string1 = Strman.removeRight("[^w]+", "[^w]+");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "-4mcecu>WwO-/rmO`A";
      boolean boolean1 = Strman.inequal("[^w]+", "-4mcecu>WwO-/rmO`A");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Strman.reverse((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = Strman.isUpperCase("");
      assertTrue(boolean0);
      
      String[] stringArray0 = Strman.between("", "", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.replace("SKX4)QaD_<3yt'9eA", "SKX4)QaD_<3yt'9eA", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Strman.reverse("Jwb)xWb~#V0");
      assertNotNull(string0);
      assertEquals("0V#~bWx)bwJ", string0);
      
      String string1 = Strman.format("&omid;", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&omid;", string1);
      
      String string2 = Strman.removeLeft("&omid;", "0V#~bWx)bwJ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&omid;", string2);
      
      boolean boolean0 = Strman.isLowerCase("GX3!&8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Strman.truncate("7", 2490, "7");
      assertNotNull(string0);
      assertEquals("7", string0);
      
      String string1 = Strman.removeNonWords("7");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7", string1);
      
      String string2 = Strman.removeSpaces("7");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("7", string2);
      
      String string3 = Strman.truncate("", 2490, "qTk2FrI");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = Strman.ensureLeft("7", "7", false);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("7", string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7";
      stringArray0[1] = "";
      stringArray0[2] = "7";
      stringArray0[3] = "7";
      stringArray0[4] = "7";
      stringArray0[5] = "";
      stringArray0[6] = "7";
      String string5 = Strman.join(stringArray0, "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("77777", string5);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\u2322";
      stringArray0[1] = "\u2322";
      String string0 = Strman.appendArray("\u2322", stringArray0);
      assertNotNull(string0);
      assertEquals("\u2322\u2322\u2322", string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = Strman.ensureLeft("&W+;", "\u291C");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u291C&W+;", string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Strman.capitalize("Sb[QNgTj");
      assertNotNull(string0);
      assertEquals("Sb[qngtj", string0);
      
      // Undeclared exception!
      try { 
        Strman.escapeRegExp((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Optional<String> optional0 = Strman.head((String) null);
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        Strman.ensureRight("n*Q~CL=l!0!a@]!G~Gu", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Strman.lowerFirst("F sSj5Y$tS.G=|o");
      assertNotNull(string0);
      assertEquals("f sSj5Y$tS.G=|o", string0);
      
      String string1 = Strman.truncate("|!*S'|Bf", 19, "+=<T?");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("|!*S'|Bf", string1);
      
      String string2 = " X";
      String string3 = Strman.toKebabCase(" X");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("x", string3);
      
      String string4 = Strman.removeSpaces(" X");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("X", string4);
      
      String string5 = Strman.transliterate(" X");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(" X", string5);
      
      String string6 = Strman.surround("x", "", "f sSj5Y$tS.G=|o");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("xf sSj5Y$tS.G=|o", string6);
      
      String[] stringArray0 = Strman.chop("", 19);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.trimStart("X", stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 3\r
         // ^[]+\r
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Strman.truncate("", 3057, "jx`X)mq'");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.truncate("s|_|-|(?<=[a-z])(?=[A-Z])", (-2657), "s|_|-|(?<=[a-z])(?=[A-Z])");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Strman.dasherize("31");
      assertNotNull(string0);
      assertEquals("31", string0);
      
      String[] stringArray0 = Strman.between("31", "31", "31");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = Strman.humanize("31");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("31", string1);
      
      String string2 = Strman.rightPad("_", "31", 26);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_31313131313131313131313131313131313131313131313131", string2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Strman.append("&succnapprox;", stringArray0);
      assertNotNull(string0);
      assertEquals("&succnapprox;", string0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = Strman.isLowerCase("separator can't be null");
      assertTrue(boolean0);
      
      int int0 = Strman.lastIndexOf("&succnapprox;", "&succnapprox;", 0, true);
      assertEquals(0, int0);
      
      String string1 = Strman.toSnakeCase("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.format("", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = Strman.containsAll("3vnr.)L1>0|", stringArray0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Map<Character, Long> map0 = Strman.charsCount("&ecirc");
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(5, map0.size());
      
      String string0 = Strman.humanize("&ecirc");
      assertNotNull(string0);
      assertEquals("&ecirc", string0);
      
      boolean boolean0 = Strman.endsWith("&ecirc", "&ecirc", 0, false);
      assertTrue(boolean0);
      
      String string1 = Strman.base64Encode("&ecirc");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("JmVjaXJj", string1);
      
      String string2 = Strman.transliterate("&ecirc");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&ecirc", string2);
      
      String string3 = Strman.startCase("})");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("})", string3);
      
      String string4 = Strman.removeSpaces("KUn<oGdWr ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("KUn<oGdWr", string4);
      
      String string5 = Strman.toSnakeCase("KUn<oGdWr ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("k_un<o_gd_wr", string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S?93";
      stringArray0[1] = "k_un<o_gd_wr";
      stringArray0[2] = "KUn<oGdWr ";
      stringArray0[3] = "&ecirc";
      stringArray0[4] = "KUn<oGdWr";
      boolean boolean1 = Strman.containsAny("&ecirc", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, stringArray0.length);
      
      String string6 = Strman.startCase("");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = Strman.slice("%p,", 0, 0);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = Strman.endsWith("\\$0", "\\$0");
      assertTrue(boolean0);
      
      String string0 = Strman.removeSpaces("\\$0");
      assertNotNull(string0);
      assertEquals("\\$0", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\\$0";
      stringArray0[1] = "\\$0";
      stringArray0[2] = "\\$0";
      stringArray0[3] = "\\$0";
      stringArray0[4] = "\\$0";
      stringArray0[5] = "\\$0";
      stringArray0[6] = "\\$0";
      Optional<String> optional0 = Strman.trimStart("\\$0", stringArray0);
      assertNotNull(optional0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("\u0405");
      assertFalse(boolean0);
      
      String string0 = Strman.htmlEncode("\u0405");
      assertNotNull(string0);
      assertEquals("&DScy;", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = "@i;U54 z-";
      stringArray0[0] = "@i;U54 z-";
      String string2 = Strman.format("\u201D", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\u201D", string2);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("@i;U54 z-", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string3 = Strman.transliterate("@i;U54 z-");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ati;U54 z-", string3);
      
      // Undeclared exception!
      try { 
        Strman.between("THcpLz", "(ksr$Xncn%gTI", ")y_p");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'\r
         // )y_p
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = Strman.endsWith("#", "#", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = null;
      int int0 = (-1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        Strman.encode((String) null, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.lastIndexOf((String) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "";
      String string1 = Strman.lowerFirst("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.base64Encode("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = "";
      String string4 = Strman.base64Decode("");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = 910;
      boolean boolean0 = Strman.endsWith("", "", 910, true);
      assertTrue(boolean0);
      
      String string5 = "\\";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Strman.containsAny("", (String[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u2229";
      stringArray0[1] = "\u2229";
      stringArray0[2] = "\u2229";
      stringArray0[3] = "\u2229";
      stringArray0[4] = "\u2229";
      stringArray0[5] = "\u2229";
      stringArray0[6] = "\u2229";
      String string0 = Strman.appendArray("\u2229", stringArray0);
      assertNotNull(string0);
      assertEquals("\u2229\u2229\u2229\u2229\u2229\u2229\u2229\u2229", string0);
      assertEquals(7, stringArray0.length);
      
      String string1 = Strman.underscored("\u2229");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u2229", string1);
      
      String string2 = Strman.formatNumber(2050L);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2,050", string2);
      
      String string3 = Strman.safeTruncate("V~,hZv?", 0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Strman.formatNumber((-1L));
      assertNotNull(string0);
      assertEquals("-1", string0);
      
      boolean boolean0 = Strman.contains("-1", "-1", true);
      assertTrue(boolean0);
      
      String string1 = Strman.formatNumber(200L);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("200", string1);
      
      // Undeclared exception!
      try { 
        Strman.base64Decode("[^w]+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 5b
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = Strman.underscored("\u22AE");
      assertNotNull(string0);
      assertEquals("\u22AE", string0);
      
      boolean boolean0 = Strman.contains(" OG2DlYK\"jy6giwF", "2Oa5D'G`J1DoZVi", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "&OverBrace;";
      int int0 = 0;
      String string1 = Strman.safeTruncate("&OverBrace;", 0, "&OverBrace;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Strman.binDecode("6A_f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6A_f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Strman.upperFirst("A{X0!Gind_X'|you");
      assertNotNull(string0);
      assertEquals("A{X0!Gind_X'|you", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A{X0!Gind_X'|you";
      stringArray0[1] = "A{X0!Gind_X'|you";
      stringArray0[2] = "A{X0!Gind_X'|you";
      stringArray0[3] = "A{X0!Gind_X'|you";
      stringArray0[4] = "A{X0!Gind_X'|you";
      stringArray0[5] = "A{X0!Gind_X'|you";
      stringArray0[6] = "A{X0!Gind_X'|you";
      boolean boolean0 = Strman.containsAny("A{X0!Gind_X'|you", stringArray0, true);
      assertTrue(boolean0);
      assertEquals(7, stringArray0.length);
      
      String string1 = Strman.append("A{X0!Gind_X'|you", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A{X0!Gind_X'|youA{X0!Gind_X'|youA{X0!Gind_X'|youA{X0!Gind_X'|youA{X0!Gind_X'|youA{X0!Gind_X'|youA{X0!Gind_X'|youA{X0!Gind_X'|you", string1);
      assertEquals(7, stringArray0.length);
      
      int int0 = 19;
      // Undeclared exception!
      try { 
        Strman.slice("&nwArr;", 19, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.slice((String) null, (-4196), (-4196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "~2N";
      stringArray0[1] = "Gxd+ppJ3jFLm]/q^4";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = Strman.join(stringArray0, "Gxd+ppJ3jFLm]/q^4");
      assertNotNull(string0);
      assertEquals("~2NGxd+ppJ3jFLm]/q^4Gxd+ppJ3jFLm]/q^4Gxd+ppJ3jFLm]/q^4Gxd+ppJ3jFLm]/q^4Gxd+ppJ3jFLm]/q^4", string0);
      assertEquals(5, stringArray0.length);
      
      int int0 = Strman.length("Gxd+ppJ3jFLm]/q^4");
      assertEquals(17, int0);
      
      boolean boolean0 = Strman.containsAny("~2N", stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string1 = Strman.lowerFirst("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.toCamelCase("%04x");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("%04x", string2);
      
      boolean boolean1 = Strman.isBlank("&yen");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Strman.lastIndexOf((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "j}RT^b-XC+m";
      boolean boolean0 = Strman.contains("j}RT^b-XC+m", "\u01F5");
      assertFalse(boolean0);
      
      String string1 = Strman.lowerFirst("9&");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9&", string1);
      
      // Undeclared exception!
      try { 
        Strman.hexDecode("9&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "b/k0;q5k";
      // Undeclared exception!
      try { 
        Strman.base64Decode("b/k0;q5k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 3b
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1q``Jqb!r=]~_";
      stringArray0[1] = "1q``Jqb!r=]~_";
      stringArray0[2] = "1q``Jqb!r=]~_";
      stringArray0[3] = "1q``Jqb!r=]~_";
      stringArray0[4] = "1q``Jqb!r=]~_";
      stringArray0[5] = "1q``Jqb!r=]~_";
      Optional<String> optional0 = Strman.trimEnd("1q``Jqb!r=]~_", stringArray0);
      assertNotNull(optional0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean0 = Strman.containsAny("1q``Jqb!r=]~_", stringArray0);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = Strman.chars("1q``Jqb!r=]~_");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = null;
      try { 
        Strman.capitalize((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "YKw7qg*fR";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "YKw7qg*fR";
      stringArray0[1] = "YKw7qg*fR";
      // Undeclared exception!
      try { 
        Strman.trimStart("YKw7qg*fR", stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal/unsupported escape sequence near index 12\r
         // ^[YKw7qg*fR\\YKw7qg*fR]+\r
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+lgfbN{aZ4UI";
      stringArray0[1] = "+lgfbN{aZ4UI";
      stringArray0[2] = "+lgfbN{aZ4UI";
      stringArray0[3] = "+lgfbN{aZ4UI";
      stringArray0[4] = "+lgfbN{aZ4UI";
      stringArray0[5] = "+lgfbN{aZ4UI";
      stringArray0[6] = "+lgfbN{aZ4UI";
      stringArray0[7] = "+lgfbN{aZ4UI";
      stringArray0[8] = "+lgfbN{aZ4UI";
      String string0 = Strman.prepend("+lgfbN{aZ4UI", stringArray0);
      assertNotNull(string0);
      assertEquals("+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI+lgfbN{aZ4UI", string0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = Strman.chars("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = Strman.contains("", "");
      assertTrue(boolean0);
      
      String string0 = Strman.base64Encode("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = Strman.containsAll(")`ltLu0Cazvkq56", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      
      String string1 = Strman.join(stringArray0, "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Strman.shuffle("&boxdr;");
      assertNotNull(string0);
      assertEquals(";&boxdr", string0);
      
      boolean boolean0 = Strman.endsWith("zm6~Vt/O`[vv6sN", "|>Q5R", 0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      String[] stringArray0 = Strman.chop("", 1);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = Strman.lines("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string1 = Strman.transliterate("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = Strman.contains("", "ntblHYa/$");
      assertFalse(boolean0);
      
      String string2 = "r>>x4|{z-SR";
      String string3 = Strman.last("r>>x4|{z-SR", 1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("R", string3);
      
      long long0 = Strman.countSubstr("r>>x4|{z-SR", "R");
      assertEquals(1L, long0);
      
      String string4 = Strman.swapCase("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int1 = Strman.lastIndexOf("", "\r\n?|\n");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = Strman.removeEmptyStrings(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals(0, stringArray2.length);
      
      String[] stringArray3 = Strman.chop("", (-1));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray0);
      assertEquals(0, stringArray3.length);
      
      String string5 = Strman.removeNonWords("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      // Undeclared exception!
      try { 
        Strman.repeat("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1
         //
         verifyException("java.util.stream.ReferencePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Strman.binEncode("\"(R KC!,c");
      assertNotNull(string0);
      assertEquals("000000000010001000000000001010000000000001010010000000000010000000000000010010110000000001000011000000000010000100000000001011000000000001100011", string0);
      
      String string1 = Strman.leftTrim("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = Strman.chop("", 17);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Strman.replace("%w*A", "%w*A", "", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.removeLeft("F>>g!3>bL0wiV1'r-", "", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("F>>g!3>bL0wiV1'r-", string1);
      
      String[] stringArray0 = Strman.lines("");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = Strman.decEncode("F>>g!3>bL0wiV1'r-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0007000062000620010300033000510006200098000760004800119001050008600049000390011400045", string2);
      
      String string3 = Strman.removeRight("%w*A", "0.Mm1A1_](B/e");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("%w*A", string3);
      
      Optional<String> optional0 = Strman.first("F>>g!3>bL0wiV1'r-", 2);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "ctH.r'(S!3h_];";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ctH.r'(S!3h_];";
      stringArray0[1] = "ctH.r'(S!3h_];";
      stringArray0[2] = "ctH.r'(S!3h_];";
      String string1 = Strman.append("ctH.r'(S!3h_];", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ctH.r'(S!3h_];ctH.r'(S!3h_];ctH.r'(S!3h_];ctH.r'(S!3h_];", string1);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = "Cndv";
      String string3 = Strman.surround("ctH.r'(S!3h_];", "s*(_|-|s)s*", "Cndv");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("s*(_|-|s)s*ctH.r'(S!3h_];Cndv", string3);
      
      String[] stringArray2 = Strman.words("Cndv");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      // Undeclared exception!
      try { 
        Strman.words("s*(_|-|s)s*", "ctH.r'(S!3h_];ctH.r'(S!3h_];ctH.r'(S!3h_];ctH.r'(S!3h_];");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 56\r
         // ctH.r'(S!3h_];ctH.r'(S!3h_];ctH.r'(S!3h_];ctH.r'(S!3h_];\r
         //                                                         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("})");
      assertTrue(boolean0);
      
      String string0 = Strman.ensureRight("h{ N?%Sbqz(\"A", "", true);
      assertNotNull(string0);
      assertEquals("h{ N?%Sbqz(\"A", string0);
      
      int int0 = Strman.lastIndexOf("", "h{ N?%Sbqz(\"A", true);
      assertEquals((-1), int0);
      
      String string1 = Strman.htmlDecode("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null", string1);
      
      String string2 = Strman.replace("", "", "})", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("})", string2);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "yzOH?;{(zLp>eb";
      String string1 = Strman.slugify("yzOH?;{(zLp>eb");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yzoh-zlp-eb", string1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Strman.lastIndexOf("yzOH?;{(zLp>eb", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.lastIndexOf((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Strman.capitalize("9ZNfjW ");
      assertNotNull(string0);
      assertEquals("9znfjw ", string0);
      
      // Undeclared exception!
      try { 
        Strman.insert((String) null, "9znfjw ", 743);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Strman.hexEncode("S+bSGK&");
      assertNotNull(string0);
      assertEquals("0053002b006200530047004b0026", string0);
      
      long long0 = Strman.countSubstr("S+bSGK&", "(?=p{Upper})");
      assertEquals(0L, long0);
      
      String string1 = Strman.removeNonWords("(?=p{Upper})");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("pUpper", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&theta;";
      stringArray0[1] = "(?=p{Upper})";
      stringArray0[2] = "(?=p{Upper})";
      boolean boolean0 = Strman.containsAll("&theta;", stringArray0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      Optional<String> optional0 = Strman.at("pUpper", 10);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      boolean boolean0 = Strman.contains(".e78\"", ".e78\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = Strman.isBlank("&ntilde");
      assertFalse(boolean0);
      
      long long0 = Strman.countSubstr("&ntilde", "&otilde;");
      assertEquals(0L, long0);
      
      String[] stringArray0 = Strman.words("&otilde;");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = Strman.removeLeft("&otilde;", "&ntilde", true);
      assertNotNull(string0);
      assertEquals("&otilde;", string0);
      
      String string1 = Strman.removeSpaces("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]>#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]>#", string1);
      
      String string2 = Strman.shuffle("&otilde;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(";&otilde", string2);
      
      String string3 = Strman.removeRight("\u1ED3", "(?<=G.{", false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\u1ED3", string3);
      
      String[] stringArray1 = Strman.words("\u1ED3", "\u1ED3");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int0 = 13;
      // Undeclared exception!
      try { 
        Strman.rightPad((String) null, "", 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Strman.removeNonWords("&W+;");
      assertNotNull(string0);
      assertEquals("W", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "W";
      stringArray0[1] = "W";
      stringArray0[2] = "W";
      stringArray0[3] = "j;(we0'mjggqhy;vkq7n us6mfm";
      stringArray0[4] = "W";
      List<String> list0 = Strman.zip(stringArray0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(5, stringArray0.length);
      assertFalse(list0.contains("&W+;"));
      
      String string1 = Strman.removeRight("j;(we0'mjggqhy;vkq7n us6mfm", "W");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j;(we0'mjggqhy;vkq7n us6mfm", string1);
      
      String string2 = Strman.ensureLeft("\\", "j;(we0'mjggqhy;vkq7n us6mfm");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j;(we0'mjggqhy;vkq7n us6mfm\\", string2);
      
      boolean boolean0 = Strman.isLowerCase("j;(we0'mjggqhy;vkq7n us6mfm");
      assertTrue(boolean0);
      
      boolean boolean1 = Strman.isEnclosedBetween("[%s]+$", "W", "d");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = Strman.removeLeft("'value' should be not null.", "B5i{].#f~ X#lG", false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("'value' should be not null.", string3);
      
      String string4 = Strman.ensureRight("j;(we0'mjggqhy;vkq7n us6mfm", "\\", false);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("j;(we0'mjggqhy;vkq7n us6mfm\\", string4);
      
      Optional<String> optional0 = Strman.trimEnd((String) null, stringArray0);
      assertNotNull(optional0);
      assertEquals(5, stringArray0.length);
      
      String string5 = Strman.htmlEncode("j;(we0'mjggqhy;vkq7n us6mfm");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("null&semi;&lpar;nullnullnull&apos;nullnullnullnullnullnullnull&semi;nullnullnullnullnullnullnullnullnullnullnullnull", string5);
      
      String string6 = Strman.removeSpaces("'value' should be not null.");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("'value'shouldbenotnull.", string6);
      
      Optional<String> optional1 = Strman.at("W", 3306);
      assertNotNull(optional1);
      assertSame(optional1, optional0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Strman.removeLeft("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.humanize((String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.ensureLeft("[^w]+", "", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[^w]+", string2);
      
      String[] stringArray0 = Strman.chars("[^w]+");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.rightTrim((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Strman.binEncode("pie+");
      assertNotNull(string0);
      assertEquals("0000000001110000000000000110100100000000011001010000000000101011", string0);
      
      String string1 = Strman.toCamelCase("&");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&", string1);
      
      Optional<String> optional0 = Strman.at("", (-1026));
      assertNotNull(optional0);
      
      String[] stringArray0 = Strman.between("", "&", "&");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = Strman.swapCase("`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`", string2);
      
      String string3 = Strman.hexDecode("D");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      // Undeclared exception!
      try { 
        Strman.truncate((String) null, 5, "`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Strman.ensureLeft("j", "h", false);
      assertNotNull(string0);
      assertEquals("hj", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Strman.removeLeft(":", "=", false);
      assertNotNull(string0);
      assertEquals(":", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "=";
      Optional<String> optional0 = Strman.trimEnd("9C<Lv", stringArray0);
      assertNotNull(optional0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.append((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = Strman.isEnclosedBetween("(?<=g.{", "(?<=g.{", "}");
      assertFalse(boolean0);
      
      String string0 = Strman.htmlEncode("\uD835\uDCB9?");
      assertNotNull(string0);
      assertEquals("nullnull&quest;", string0);
      
      String string1 = Strman.ensureLeft("N.kH", "\u011B");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u011BN.kH", string1);
      
      String string2 = Strman.safeTruncate(" ", (-471), "\uD835\uDCB9?");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\uD835\uDCB9?", string2);
      
      String string3 = Strman.toSnakeCase("\uD835\uDCB9?");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\uD835\uDCB9?", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}";
      stringArray0[1] = string3;
      Optional<String> optional0 = Strman.trimEnd("i&1^O23U^D2`7~S&AE0", stringArray0);
      assertNotNull(optional0);
      assertEquals(2, stringArray0.length);
      
      String string4 = "I^.pe)";
      String string5 = Strman.collapseWhitespace(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("I^.pe)", string5);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = Strman.inequal("", "");
      assertFalse(boolean0);
      
      String[] stringArray0 = Strman.words("&setmn;");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = Strman.lastIndexOf("4:", "&setmn;", 0, false);
      assertEquals((-1), int0);
      
      String string0 = Strman.safeTruncate("", (-1), "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Strman.repeat("4:", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = Strman.containsAll("\u042A", stringArray0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      int int1 = Strman.indexOf("", "4:", 0, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Optional<String> optional0 = Strman.trimStart("", stringArray0);
      assertNotNull(optional0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = Strman.isEnclosedBetween("&UpArrowBar;", "W|JwnZHM+D-V%+^jx", "0,?Q+Abf3Zo");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = Strman.ensureLeft("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean3 = Strman.isEnclosedBetween("", "");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Strman.truncate("&UpArrowBar;", (-1), "&setmn;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Strman.safeTruncate("V~,hZv?", 0, "V~,hZv?");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = Strman.encode("dxTCD[X{P", 0, 0);
      assertNotNull(string0);
      assertEquals("100120846768918812312780", string0);
      
      String string1 = Strman.insert("\uD835\uDD59", "", 4377);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\uD835\uDD59", string1);
      
      String string2 = Strman.dasherize("ftO67Q`1!*H{_");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ft-o67-q`1!*-h{", string2);
      
      String string3 = Strman.transliterate("gJTP}");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("gJTP}", string3);
      
      boolean boolean0 = Strman.isBlank("");
      assertTrue(boolean0);
      
      String string4 = Strman.base64Encode("'=V T");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Jz1WIFQ=", string4);
      
      String string5 = Strman.truncate("", 0, "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = Strman.lines("dxTCD[X{P");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = Strman.underscored("Jz1WIFQ=");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("jz1_wifq=", string6);
      
      String string7 = Strman.binEncode("");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = Strman.ensureRight("Jz1WIFQ=", "1y<DUN");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("Jz1WIFQ=1y<DUN", string8);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = Strman.length("\uD835\uDCC8");
      assertEquals(2, int0);
      
      String string0 = Strman.rightTrim("ZT6tep*^awy1`;");
      assertNotNull(string0);
      assertEquals("ZT6tep*^awy1`;", string0);
      
      String string1 = Strman.binEncode("{M<J1/PVN");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("000000000111101100000000010011010000000000111100000000000100101000000000001100010000000000101111000000000101000000000000010101100000000001001110", string1);
      
      String string2 = Strman.leftTrim("@]7c'F");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("@]7c'F", string2);
      
      String string3 = Strman.toKebabCase("{M<J1/PVN");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("{-m<-j1/-p-v-n", string3);
      
      String string4 = Strman.humanize("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = Strman.ensureRight("<(", "e#.&u o< ae");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("<(e#.&u o< ae", string5);
      
      String string6 = Strman.repeat("zpw#^ agxd?ailu", 23);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("zpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailuzpw#^ agxd?ailu", string6);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      long long0 = Strman.countSubstr("S+bSGK&", "(?=p{Upper})");
      assertEquals(0L, long0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(?=p{Upper})";
      stringArray0[1] = "(?=p{Upper})";
      stringArray0[2] = "(?=p{Upper})";
      // Undeclared exception!
      try { 
        Strman.format("(?=p{Upper})", stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Upper\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = Strman.chop((String) null, 19);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.decode((String) null, (-6278), (-6278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      try { 
        Strman.lowerFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = Strman.lines((String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = Strman.underscored((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.upperFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase(",");
      assertTrue(boolean0);
      
      String[] stringArray0 = Strman.split(",", ",");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Optional<String> optional0 = Strman.head(",");
      assertNotNull(optional0);
      
      String string0 = Strman.leftPad("RE<Dp&@yytOX-o\u0399", "RE<Dp&@yytOX-o\u0399", 4971);
      assertNotNull(string0);
      
      String string1 = Strman.format("-[", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-[", string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = Strman.leftPad("'value' should be not null.", "'value' should be not null.", 54);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.'value' should be not null.", string2);
      
      String string3 = Strman.humanize("36");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("36", string3);
      
      String string4 = Strman.truncate("36", 4971, ",");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("36", string4);
      
      String string5 = null;
      Optional<String> optional1 = Strman.tail((String) null);
      assertFalse(optional1.equals((Object)optional0));
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      
      String string6 = Strman.format(",", stringArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(",", string6);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.binDecode("\u27F6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u27F6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Optional<String> optional0 = Strman.first("{(w+)}7n us$6Mfm", 3);
      assertNotNull(optional0);
      
      String string0 = Strman.swapCase((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        Strman.slice("~R&&8<zm&=ELY", 3, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = null;
      String string1 = "$I[kV/mlZ|E..eWoqPN";
      boolean boolean0 = Strman.isBlank((String) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Strman.chop("$I[kV/mlZ|E..eWoqPN", (-2087));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Strman.removeEmptyStrings((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array should not be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Map<Character, Long> map0 = Strman.charsCount((String) null);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[6] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string0 = "?\\u\\u";
      stringArray0[6] = string0;
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      try { 
        Strman.join(stringArray0, stringArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // separator can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "-";
      String string1 = Strman.transliterate("`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`", string1);
      
      try { 
        Strman.capitalize((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = ",0AhWq6zE";
      String[] stringArray0 = null;
      String string1 = Strman.prepend(",0AhWq6zE", (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(",0AhWq6zE", string1);
      
      String string2 = Strman.appendArray(",0AhWq6zE", (String[]) null);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(",0AhWq6zE", string2);
      
      // Undeclared exception!
      try { 
        Strman.trimEnd("W+", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array 'strings' can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = Strman.endsWith("7n us$6Mfm", "7n us$6Mfm");
      assertTrue(boolean0);
      
      String string0 = Strman.humanize("7n us$6Mfm");
      assertNotNull(string0);
      assertEquals("7n us$6 mfm", string0);
      
      String string1 = Strman.removeLeft("7n us$6Mfm", "7n us$6Mfm");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.toStudlyCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = Strman.isLowerCase("7n us$6Mfm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = Strman.ensureLeft("7n us$6Mfm", "j;(WE0'mjGgQHY;vKQ", false);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("j;(WE0'mjGgQHY;vKQ7n us$6Mfm", string3);
      
      String string4 = Strman.slugify("7n us$6 mfm");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("7n-us-6-mfm", string4);
      
      String string5 = Strman.hexEncode("N@[_e9G(n");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("004e0040005b005f0065003900470028006e", string5);
      
      String string6 = Strman.htmlEncode("7n us$6Mfm");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("nullnullnullnullnull&dollar;nullnullnullnull", string6);
      
      boolean boolean2 = Strman.isBlank("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string7 = Strman.swapCase("7n us$6Mfm");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("7N US$6mFM", string7);
      
      // Undeclared exception!
      try { 
        Strman.containsAny("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween(";z4", (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // leftEncloser can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.base64Decode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'value' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = Strman.removeRight("(?<=G.{", "d:*b", true);
      assertNotNull(string0);
      assertEquals("(?<=G.{", string0);
      
      String string1 = Strman.reverse("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.toKebabCase((String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = Strman.split("(?<=G.{", "");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = Strman.chop("", 480);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Strman.hexDecode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = Strman.htmlDecode("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]");
      assertNotNull(string0);
      assertEquals("null", string0);
      
      String string1 = Strman.last("Zj?I", 1926);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Zj?I", string1);
      
      String string2 = Strman.encode("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]", 1926, 1926);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Strman.binEncode("Zj?I");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("0000000001011010000000000110101000000000001111110000000001001001", string3);
      
      String string4 = Strman.repeat("Zj?I", 1926);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Optional<String> optional0 = Strman.at("input can't be null(?<=G.{", 12);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0000000001011010000000000110101000000000001111110000000001001001";
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      List<String> list0 = Strman.zip(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(64, list0.size());
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(list0.contains("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]"));
      
      String string5 = Strman.formatNumber(1926);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("1,926", string5);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      long long0 = Strman.countSubstr("\u03D1", "\u03D1", true, true);
      assertEquals(1L, long0);
      
      String[] stringArray0 = Strman.lines("\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Strman.words("\u03D1");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ZT6tep*^awy1`;";
      stringArray0[1] = "ZT6tep*^awy1`;";
      stringArray0[2] = "ZT6tep*^awy1`;";
      boolean boolean0 = Strman.isUpperCase("ZT6tep*^awy1`;");
      assertFalse(boolean0);
      
      String string0 = Strman.replace("QEYs'R)5p{<", "ZT6tep*^awy1`;", "", false);
      assertNotNull(string0);
      assertEquals("QEYs'R)5p{<", string0);
      
      String string1 = Strman.lowerFirst("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Strman.decEncode("ZT6tep*^awy1`;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0009000084000540011600101001120004200094000970011900121000490009600059", string2);
      
      String string3 = Strman.dasherize("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray1 = Strman.lines((String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Strman.truncate("QEYs'R)5p{<", (-3473), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Strman.toCamelCase("qe\"`");
      assertNotNull(string0);
      assertEquals("qe\"`", string0);
      
      String string1 = Strman.rightPad("qe\"`", "|E~lk`=T@", 3);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("qe\"`", string1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = Strman.binEncode("[q+.?6}97V");
      assertNotNull(string0);
      assertEquals("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", string0);
      
      String[] stringArray0 = Strman.chars("[q+.?6}97V");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String[] stringArray1 = Strman.chop("0000000001011011000000000111000100000000001010110000000000101110000000000011111100000000001101100000000001111101000000000011100100000000001101110000000001010110", 2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(80, stringArray1.length);
      
      String string1 = Strman.hexEncode("\u2A34");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2a34", string1);
      
      String string2 = Strman.safeTruncate("[q+.?6}97V", 2, "[q+.?6}97V");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[q+.?6}97V", string2);
      
      String string3 = Strman.htmlEncode("&ugrave;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("&AMP;nullnullnullnullnullnull&semi;", string3);
      
      String string4 = Strman.formatNumber(3099L);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("3,099", string4);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = Strman.contains("P?m]axFYR*jRANFe;", "");
      assertTrue(boolean0);
      
      Optional<String> optional0 = Strman.trimEnd("");
      assertNotNull(optional0);
      
      String string0 = Strman.shuffle("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = Strman.isUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Strman.ensureRight("P?m]axFYR*jRANFe;", "", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("P?m]axFYR*jRANFe;", string1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Strman.join(stringArray0, "|{/hu ;|@[/Ir");
      Strman.collapseWhitespace("");
      String string0 = Strman.toStudlyCase(">#");
      assertEquals(">#", string0);
      
      Strman.appendArray("&Integral;", stringArray0);
      Strman.zip(stringArray0);
      String string1 = Strman.toSnakeCase("$k,T0f8=co@$K+");
      assertEquals("$k,_t0f8=co@$_k+", string1);
      
      String string2 = Strman.escapeRegExp("");
      assertEquals("", string2);
      
      Strman.htmlEncode("");
      Strman.toSnakeCase("");
      String string3 = Strman.swapCase("&Zacute;");
      assertEquals("&zACUTE;", string3);
      
      String string4 = Strman.toCamelCase("5hu4%Z\"Jj0eSqFJEC");
      assertEquals("5hu4%Z\"Jj0eSqFJEC", string4);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = Strman.chop("@;U54 z-", 0);
      boolean boolean0 = Strman.isUpperCase("@;U54 z-");
      assertFalse(boolean0);
      
      String string0 = Strman.toKebabCase("\u0081D");
      assertEquals("\u0081-d", string0);
      
      String string1 = Strman.insert("@;U54 z-", "\u0081D", 0);
      assertEquals("\u0081D@;U54 z-", string1);
      
      Strman.reverse("0Z[M2]L^\"FLv*");
      Random.setNextRandom(3);
      String string2 = Strman.ensureRight("H(?f,8E H${", "*vLF\"^L]2M[Z0");
      assertEquals("H(?f,8E H${*vLF\"^L]2M[Z0", string2);
      
      String string3 = Strman.lowerFirst("Tra");
      assertEquals("tra", string3);
      
      String[] stringArray1 = Strman.removeEmptyStrings(stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = Strman.isLowerCase("Y6wLi/[|uY'j:[@:P&Da%F(we");
      Strman.length("Y6wLi/[|uY'j:[@:P&Da%F(we");
      Strman.countSubstr("Y6wLi/[|uY'j:[@:P&Da%F(we", "b", false, false);
      Strman.toSnakeCase("");
      String string0 = Strman.rightPad("b", "", 25);
      assertEquals("b", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y6wLi/[|uY'j:[@:P&Da%F(we";
      stringArray0[1] = "b";
      Strman.appendArray("-xsGVG%)d]", stringArray0);
      String string1 = Strman.decEncode("`s");
      assertEquals("0009600115", string1);
      
      Strman.capitalize("");
      Map<Character, Long> map0 = Strman.charsCount("Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertEquals(21, map0.size());
      
      boolean boolean1 = Strman.isEnclosedBetween("Y6wLi/[|uY'j:[@:P&Da%F(we", "b", "Y6wLi/[|uY'j:[@:P&Da%F(we");
      assertTrue(boolean1 == boolean0);
      
      Strman.trimStart("separator can't be null");
      String string2 = Strman.truncate("-xsGVG%)d]Y6wLi/[|uY'j:[@:P&Da%F(web", 25, "");
      assertEquals("-xsGVG%)d]Y6wLi/[|uY'j:[@", string2);
      
      String string3 = Strman.prepend("QrHR!291maf", stringArray0);
      assertEquals("Y6wLi/[|uY'j:[@:P&Da%F(webQrHR!291maf", string3);
      
      String string4 = Strman.swapCase("&e$:\"pL1=0A?J%Qk");
      assertEquals("&E$:\"Pl1=0a?j%qK", string4);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Strman.first("'aXcE]zI", 2);
      String string0 = Strman.lowerFirst("'aXcE]zI");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'aXcE]zI";
      String string1 = Strman.removeRight("'aXcE]zI", "'aXcE]zI");
      assertFalse(string1.equals((Object)string0));
      
      Strman.between("'aXcE]zI", "'aXcE]zI", "'aXcE]zI");
      String[] stringArray1 = Strman.between(",S])O%r>fF2Sp", ",S])O%r>fF2Sp", "Wk");
      assertEquals(1, stringArray1.length);
      
      Strman.indexOf("'aXcE]zI", "N@AV", 7, true);
      String string2 = Strman.ensureLeft("N@AV", "Wk", false);
      assertEquals("WkN@AV", string2);
      
      boolean boolean0 = Strman.isLowerCase("'aXcE]zI");
      assertFalse(boolean0);
      
      Strman.removeSpaces("N@AV");
      String string3 = Strman.slugify("N@AV");
      assertEquals("natav", string3);
      
      Map<Character, Long> map0 = Strman.charsCount(",S])O%r>fF2Sp");
      assertEquals(12, map0.size());
      
      String string4 = Strman.lowerFirst("^.w9tL?XO(0");
      assertEquals("^.w9tL?XO(0", string4);
      
      String string5 = Strman.removeLeft("separator can't be null", "'aXcE]zI", false);
      assertEquals("separator can't be null", string5);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]";
      Strman.binEncode("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]");
      Strman.surround("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]", "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]", "zpW#^ AgXd?AIlu");
      Strman.binEncode("RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]");
      // Undeclared exception!
      try { 
        Strman.split("zpW#^ AgXd?AIlu", "RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 8\r
         // RcpiwHrb\"{wJZ.]RcpiwHrb\"{wJZ.]\r
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Strman.collapseWhitespace("");
      String string0 = Strman.transliterate("y6wLi/[|uY'");
      assertEquals("y6wLi/[|uY'", string0);
      
      Strman.upperFirst("y6wLi/[|uY'");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y6wLi/[|uY'";
      stringArray0[1] = "Y6wLi/[|uY'";
      stringArray0[2] = "Y6wLi/[|uY'";
      stringArray0[4] = "";
      String string1 = Strman.prepend("Y6wLi/[|uY'", stringArray0);
      assertEquals("Y6wLi/[|uY'Y6wLi/[|uY'Y6wLi/[|uY'nullY6wLi/[|uY'", string1);
      
      String string2 = Strman.removeLeft("", "S,0AhWq6zEp");
      boolean boolean0 = Strman.isEnclosedBetween("j:[@:P&Da%F(we", "Y6wLi/[|uY'", "");
      String[] stringArray1 = Strman.between("", "=", "separator can't be null");
      String string3 = Strman.removeLeft("separator can't be null", "", false);
      assertEquals("separator can't be null", string3);
      
      boolean boolean1 = Strman.containsAll("separator can't be null", stringArray0);
      assertTrue(boolean1 == boolean0);
      
      String string4 = Strman.upperFirst("7Z,9}G* ?+}w/");
      assertEquals("7Z,9}G* ?+}w/", string4);
      
      Strman.removeSpaces("s+$");
      String string5 = Strman.removeRight("Y6wLi/[|uY'", "y6wLi/[|uY'", false);
      assertTrue(string5.equals((Object)string2));
      
      Strman.prepend("\u016B", stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Strman.lastIndexOf("", "", true);
      Strman.reverse("h");
      Strman.unequal("", "");
      String[] stringArray0 = Strman.lines("h");
      Strman.hexEncode("KOVm");
      Strman.isUpperCase("KOVm");
      Strman.countSubstr("", "004b004f0056006d", true, false);
      Strman.underscored("");
      Strman.containsAny("", stringArray0, true);
      Strman.leftTrim("");
      Strman.leftTrim("");
      Strman.startCase("");
      Strman.isBlank("h");
      Strman.containsAll("", stringArray0);
      Strman.leftPad("", "\u211E", (-2730));
      Optional<String> optional0 = Strman.at("h", (-2730));
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Strman.unequal("", "RcpiwHrb\"{wJZ.]");
      Strman.startCase("|{/hu ;|@[/Ir");
      Strman.startCase("");
      Strman.toStudlyCase("");
      Strman.repeat("&", 850);
      Strman.lowerFirst("L7EuXu<5");
      Strman.inequal("|{/hu ;|@[/Ir", "&");
      Strman.ensureLeft("", "", false);
      Strman.isEnclosedBetween("", "RcpiwHrb\"{wJZ.]");
      Strman.capitalize("RcpiwHrb\"{wJZ.]");
      Strman.insertl7EuXu<5", 0);
      Strman.safeTruncate("", 2, "y6wLi/[|uY'");
      Strman.isBlank("");
      // Undeclared exception!
      try { 
        Strman.isEnclosedBetween("IC$0Q\"U9z)2U", "FdX[jm!", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rightEncloser can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object object0 = new Object();
      Strman.isString(object0);
      Strman.lastIndexOf("", "");
      Strman.leftTrim("");
      Strman.isEnclosedBetween("MPB(eRqm.NC&", "&|;");
      Strman.swapCase("");
      // Undeclared exception!
      try { 
        Strman.between("", "W+", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'end' should be not null.
         //
         verifyException("com.strman.Strman", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Strman.chars("vkD.");
      Strman.decEncode("vkD.");
      Strman.inequal("\u0174", "00118001070006800046");
      Strman.removeNonWords("00118001070006800046");
      Strman.countSubstr("00118001070006800046", "00118001070006800046", true, false);
      Strman.encode("n,", (-2354), (-1968526675));
      Strman.replace("00118001070006800046", "00118001070006800046", "zpw#^ agxd?ailu>#", true);
      // Undeclared exception!
      try { 
        Strman.decDecode("~C");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~C\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      // Undeclared exception!
      try { 
        Strman.isString((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value can't be null
         //
         verifyException("com.strman.Strman", e);
      }
  }
}

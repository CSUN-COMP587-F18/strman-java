* Starting client
* Connecting to master process on port 8074
* Analyzing classpath: 
  - C:/DATA/JAVA/JUNIT/strman/out/production/strman
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\charsets.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\deploy.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\access-bridge-64.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\cldrdata.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\dnsns.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\jaccess.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\jfxrt.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\localedata.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\nashorn.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\sunec.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\sunjce_provider.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\sunmscapi.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\sunpkcs11.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\ext\zipfs.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\javaws.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\jce.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\jfr.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\jfxswt.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\jsse.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\management-agent.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\plugin.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\resources.jar
  - C:\Program Files\Java\jdk1.8.0_144\jre\lib\rt.jar
  - C:\DATA\JAVA\JUNIT\strman\out\production\strman
  - C:\DATA\JAVA\JUNIT\hamcrest-core-1.3.jar
  - C:\DATA\JAVA\JUNIT\junit-4.12.jar
  - C:\DATA\JAVA\JUNIT\hamcrest-all-1.3.jar
* Finished analyzing classpath
* Generating tests for class com.strman.Strman
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
[MASTER] 19:25:49.695 [pool-2-thread-1] WARN  TestSuiteSerialization - Cannot load tests because file does not exist: C:\DATA\JAVA\JUNIT\strman\.evosuite\evosuite-seeds\com.strman.Strman.seed
* Loaded 0 tests from C:\DATA\JAVA\JUNIT\strman\.evosuite\evosuite-seeds\com.strman.Strman.seed
* Total number of test goals: 
  - Line 351
  - Branch 243
  - Exception 0
  - MutationFactory 724
  - Output 287
  - Method 102
  - MethodNoException 102
  - CBranchFitnessFactory 243
* Using seed 1539138334735
* Starting evolution
* Search finished after 1080s and 919 generations, 480549 statements, best individual has fitness: 158.74085041607205
* Writing sequences to pool
* Minimizing test suite
[MASTER] 19:46:19.870 [pool-2-thread-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 351
* Number of covered goals: 342
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 98%
* Total number of goals: 243
* Number of covered goals: 237
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 132
* Number of covered goals: 132
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 724
* Number of covered goals: 677
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 68%
* Total number of goals: 287
* Number of covered goals: 195
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 243
* Number of covered goals: 233
* Generated 289 tests with total length 4618
* Resulting test suite's coverage: 94% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:47:40.673 [pool-2-thread-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66765% of time used, but only 11/289 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 19:48:48.338 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:48:48.338 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = Strman.leftPad("", "", 0);
assertNotNull(string0);
assertEquals("", string0);

String string1 = Strman.rightTrim("");
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("", string1);

String string2 = Strman.toDecamelize("", "");
assertTrue(string2.equals((Object)string0));
assertTrue(string2.equals((Object)string1));
assertNotNull(string2);
assertEquals("", string2);

int int0 = Strman.lastIndexOf("", "X0", 0, true);
assertEquals((-1), int0);

String string3 = Strman.swapCase("");
assertTrue(string3.equals((Object)string0));
assertTrue(string3.equals((Object)string2));
assertTrue(string3.equals((Object)string1));
assertNotNull(string3);
assertEquals("", string3);

Strman.countSubstr(string1, string3);

[MASTER] 19:48:54.871 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:48:54.871 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "";
String string1 = Strman.surround("", "BmQWw|}zzE", "");
assertFalse(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("BmQWw|}zzE", string1);

String string2 = ",";
boolean boolean0 = Strman.endsWith("PQ7cF8.YUB", ",");
assertFalse(boolean0);

String[] stringArray0 = Strman.between("PQ7cF8.YUB", "BmQWw|}zzE", ",");
assertNotNull(stringArray0);
assertEquals(0, stringArray0.length);

String string3 = Strman.append("", stringArray0);
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string1));
assertTrue(string3.equals((Object)string0));
assertNotNull(string3);
assertEquals("", string3);
assertEquals(0, stringArray0.length);

String string4 = Strman.removeLeft("C", ",", true);
assertFalse(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string2));
assertFalse(string4.equals((Object)string0));
assertFalse(string4.equals((Object)string3));
assertNotNull(string4);
assertEquals("C", string4);

String string5 = Strman.ensureRight("E1E", "e0j 59qk&mGc{cK", false);
assertFalse(string5.equals((Object)string3));
assertFalse(string5.equals((Object)string1));
assertFalse(string5.equals((Object)string0));
assertFalse(string5.equals((Object)string2));
assertFalse(string5.equals((Object)string4));
assertNotNull(string5);
assertEquals("E1Ee0j 59qk&mGc{cK", string5);

String string6 = Strman.formatNumber((-1L));
assertFalse(string6.equals((Object)string0));
assertFalse(string6.equals((Object)string1));
assertFalse(string6.equals((Object)string3));
assertFalse(string6.equals((Object)string2));
assertFalse(string6.equals((Object)string4));
assertFalse(string6.equals((Object)string5));
assertNotNull(string6);
assertEquals("-1", string6);

String string7 = "";
String[] stringArray1 = Strman.between("", "\u21C8", "");
assertFalse(stringArray1.equals((Object)stringArray0));
assertNotNull(stringArray1);
assertNotSame(stringArray1, stringArray0);
assertEquals(0, stringArray1.length);

Strman.countSubstr(string0, string7);
Strman.appendArray(string2, stringArray0);

[MASTER] 19:48:58.907 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:48:58.907 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "I%yv%rwFd O";
String string1 = Strman.leftTrim("I%yv%rwFd O");
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("I%yv%rwFd O", string1);

String string2 = "";
boolean boolean0 = false;
int int0 = Strman.lastIndexOf("", "I%yv%rwFd O", false);
assertEquals((-1), int0);

String string3 = Strman.base64Encode("I%yv%rwFd O");
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string2));
assertNotNull(string3);
assertEquals("SSV5diVyd0ZkIE8=", string3);

String string4 = Strman.removeSpaces("");
assertFalse(string4.equals((Object)string0));
assertFalse(string4.equals((Object)string3));
assertTrue(string4.equals((Object)string2));
assertFalse(string4.equals((Object)string1));
assertNotNull(string4);
assertEquals("", string4);

int int1 = Strman.length("SSV5diVyd0ZkIE8=");
assertFalse(int1 == int0);
assertEquals(16, int1);

String string5 = Strman.htmlEncode("I%yv%rwFd O");
assertFalse(string5.equals((Object)string4));
assertFalse(string5.equals((Object)string0));
assertFalse(string5.equals((Object)string2));
assertFalse(string5.equals((Object)string1));
assertFalse(string5.equals((Object)string3));
assertNotNull(string5);
assertEquals("null&percnt;nullnull&percnt;nullnullnullnullnullnull", string5);

boolean boolean1 = false;
Strman.countSubstr(string2, string2, boolean0, boolean1);
String string6 = "value can't be null";
int int2 = 0;
Strman.indexOf(string6, string0, int2, boolean1);
String string7 = "";
boolean boolean2 = false;
Strman.ensureLeft(string7, string2, boolean2);

[MASTER] 19:49:10.448 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:49:10.448 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = Strman.reverse("");
assertNotNull(string0);
assertEquals("", string0);

int int0 = 850;
String string1 = Strman.leftPad("", "", 850);
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("", string1);

String string2 = Strman.ensureLeft("", "");
assertTrue(string2.equals((Object)string1));
assertTrue(string2.equals((Object)string0));
assertNotNull(string2);
assertEquals("", string2);

String string3 = "RcpiwHrb\"{wJZ.]";
String[] stringArray0 = Strman.lines("RcpiwHrb\"{wJZ.]");
assertNotNull(stringArray0);
assertEquals(1, stringArray0.length);

boolean boolean0 = Strman.isEnclosedBetween("RcpiwHrb\"{wJZ.]", "RcpiwHrb\"{wJZ.]", "|{/hu ;|@[/Ir");
assertFalse(boolean0);

String string4 = Strman.rightTrim("");
assertTrue(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string3));
assertTrue(string4.equals((Object)string0));
assertTrue(string4.equals((Object)string2));
assertNotNull(string4);
assertEquals("", string4);

String string5 = Strman.startCase("|{/hu ;|@[/Ir");
assertFalse(string5.equals((Object)string1));
assertFalse(string5.equals((Object)string2));
assertFalse(string5.equals((Object)string0));
assertFalse(string5.equals((Object)string4));
assertFalse(string5.equals((Object)string3));
assertNotNull(string5);
assertEquals("|{/hu ;|@[/ir", string5);

String string6 = "K8]Z[VZG$2#m0";
String string7 = Strman.startCase("K8]Z[VZG$2#m0");
assertFalse(string7.equals((Object)string4));
assertFalse(string7.equals((Object)string6));
assertFalse(string7.equals((Object)string5));
assertFalse(string7.equals((Object)string2));
assertFalse(string7.equals((Object)string3));
assertFalse(string7.equals((Object)string1));
assertFalse(string7.equals((Object)string0));
assertNotNull(string7);
assertEquals("K8]z[vzg$2#m0", string7);

String string8 = Strman.formatNumber(850);
assertFalse(string8.equals((Object)string4));
assertFalse(string8.equals((Object)string2));
assertFalse(string8.equals((Object)string5));
assertFalse(string8.equals((Object)string3));
assertFalse(string8.equals((Object)string6));
assertFalse(string8.equals((Object)string7));
assertFalse(string8.equals((Object)string1));
assertFalse(string8.equals((Object)string0));
assertNotNull(string8);
assertEquals("850", string8);

String string9 = Strman.repeat("&", 850);
assertFalse(string9.equals((Object)string3));
assertFalse(string9.equals((Object)string0));
assertFalse(string9.equals((Object)string5));
assertFalse(string9.equals((Object)string7));
assertFalse(string9.equals((Object)string2));
assertFalse(string9.equals((Object)string8));
assertFalse(string9.equals((Object)string1));
assertFalse(string9.equals((Object)string6));
assertFalse(string9.equals((Object)string4));
assertNotNull(string9);
assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string9);

Strman.countSubstr(string1, string2, boolean0, boolean0);
String string10 = "L7EuXu<5";
Strman.lowerFirst(string10);
String string11 = Strman.htmlEncode(string9);
Strman.zip(stringArray0);
String string12 = "t0g}cFr;zV2nhwSg^F";
Strman.appendArray(string12, stringArray0);
Strman.insert(string3, string8, int0);
String string13 = "uP*]Up2SrxC$BUW9)'";
Strman.trimEnd(string13);
String string14 = "hRN&C]k)&d n";
String string15 = "";
Strman.contains(string14, string15);
boolean boolean1 = false;
Strman.ensureLeft(string11, string11, boolean1);
Strman.containsAll(string6, stringArray0);
String string16 = "9cgtG\"Q";
String string17 = "\u29B3";
Strman.inequal(string16, string17);
Strman.capitalize(string12);
int int1 = 0;
Strman.insert(string9, string16, int1);

[MASTER] 19:49:18.979 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:49:18.979 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = Strman.reverse("");
assertNotNull(string0);
assertEquals("", string0);

int int0 = 850;
String string1 = Strman.surround("", "", "");
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("", string1);

String string2 = Strman.ensureLeft("", "");
assertTrue(string2.equals((Object)string1));
assertTrue(string2.equals((Object)string0));
assertNotNull(string2);
assertEquals("", string2);

String string3 = "RcpiwHrb\"{wJZ.]";
String[] stringArray0 = Strman.lines("RcpiwHrb\"{wJZ.]");
assertNotNull(stringArray0);
assertEquals(1, stringArray0.length);

boolean boolean0 = Strman.isEnclosedBetween("RcpiwHrb\"{wJZ.]", "RcpiwHrb\"{wJZ.]", "|{/<Mhu |@[/Ir");
assertFalse(boolean0);

String string4 = Strman.rightTrim("");
assertFalse(string4.equals((Object)string3));
assertTrue(string4.equals((Object)string0));
assertTrue(string4.equals((Object)string1));
assertTrue(string4.equals((Object)string2));
assertNotNull(string4);
assertEquals("", string4);

String string5 = Strman.startCase("|{/<Mhu |@[/Ir");
assertFalse(string5.equals((Object)string4));
assertFalse(string5.equals((Object)string3));
assertFalse(string5.equals((Object)string2));
assertFalse(string5.equals((Object)string0));
assertFalse(string5.equals((Object)string1));
assertNotNull(string5);
assertEquals("|{/<mhu |@[/ir", string5);

String string6 = "K8]Z[VZG$2#m0";
String string7 = Strman.startCase("K8]Z[VZG$2#m0");
assertFalse(string7.equals((Object)string2));
assertFalse(string7.equals((Object)string0));
assertFalse(string7.equals((Object)string1));
assertFalse(string7.equals((Object)string5));
assertFalse(string7.equals((Object)string3));
assertFalse(string7.equals((Object)string6));
assertFalse(string7.equals((Object)string4));
assertNotNull(string7);
assertEquals("K8]z[vzg$2#m0", string7);

String string8 = Strman.formatNumber(850);
assertFalse(string8.equals((Object)string5));
assertFalse(string8.equals((Object)string0));
assertFalse(string8.equals((Object)string6));
assertFalse(string8.equals((Object)string2));
assertFalse(string8.equals((Object)string4));
assertFalse(string8.equals((Object)string3));
assertFalse(string8.equals((Object)string1));
assertFalse(string8.equals((Object)string7));
assertNotNull(string8);
assertEquals("850", string8);

String string9 = Strman.repeat("&", 850);
assertFalse(string9.equals((Object)string4));
assertFalse(string9.equals((Object)string6));
assertFalse(string9.equals((Object)string1));
assertFalse(string9.equals((Object)string3));
assertFalse(string9.equals((Object)string7));
assertFalse(string9.equals((Object)string2));
assertFalse(string9.equals((Object)string0));
assertFalse(string9.equals((Object)string5));
assertFalse(string9.equals((Object)string8));
assertNotNull(string9);
assertEqualsstring9);

Strman.countSubstr(string1, string2, boolean0, boolean0);
String string10 = "L7EuXu<5";
Strman.lowerFirst(string10);
String string11 = Strman.htmlEncode(string9);
Strman.zip(stringArray0);
String string12 = "t0g}cFr;zV2nhwSg^F";
Strman.appendArray(string12, stringArray0);
Strman.insert(string3, string8, int0);
String string13 = "uP*]Up2SrxC$BUW9)'";
Strman.trimEnd(string13);
String string14 = "hRN&C]k)&d n";
String string15 = "";
Strman.contains(string14, string15);
boolean boolean1 = false;
Strman.ensureLeft(string11, string11, boolean1);
Strman.containsAll(string6, stringArray0);
String string16 = "9cgtG\"Q";
String string17 = "\u29B3";
Strman.inequal(string16, string17);
Strman.capitalize(string12);
int int1 = 0;
Strman.insert(string9, string16, int1);

[MASTER] 19:49:23.345 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 19:49:23.345 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "";
String string1 = Strman.reverse("");
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("", string1);

boolean boolean0 = false;
long long0 = Strman.countSubstr("", "\u045B", false, false);
assertEquals(0L, long0);

String string2 = "";
boolean boolean1 = Strman.inequal("DK9FrzDs", "");
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

String[] stringArray0 = Strman.lines("");
assertNotNull(stringArray0);
assertEquals(1, stringArray0.length);

String string3 = "";
String string4 = Strman.hexEncode("");
assertTrue(string4.equals((Object)string3));
assertTrue(string4.equals((Object)string0));
assertTrue(string4.equals((Object)string2));
assertTrue(string4.equals((Object)string1));
assertNotNull(string4);
assertEquals("", string4);

boolean boolean2 = Strman.isUpperCase("\u045B");
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

String string5 = "";
boolean boolean3 = false;
Strman.countSubstr(string0, string5, boolean0, boolean3);
boolean boolean4 = true;
Strman.ensureRight(string2, string1, boolean4);
Strman.escapeRegExp(string1);
String string6 = "";
Strman.containsAny(string0, stringArray0, boolean0);
Strman.leftTrim(string3);
Strman.upperFirst(string6);
String string7 = "\\s+$";
Strman.startCase(string7);
String string8 = "-SQR.LE6,&`6o}";
Strman.isBlank(string8);
String string9 = ",aKHhm?";
Strman.containsAll(string9, stringArray0);

[MASTER] 19:49:38.028 [pool-2-thread-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.OutOfMemoryError: Java heap space
[MASTER] 19:49:38.028 [pool-2-thread-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "&hopf;";
String string1 = Strman.capitalize("&hopf;");
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("&hopf;", string1);

String string2 = "\uD835\uDD0D";
int int0 = 2147483645;
Strman.leftPad("\uD835\uDD0D", "&hopf;", 2147483645);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing JUnit test case 'Strman_ESTest' to C:\DATA\JAVA\JUNIT\strman\.evosuite\tmp_2018_10_09_19_25_26\tests
* Done!


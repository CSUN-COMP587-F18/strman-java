import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test001");
        int int1 = strman.Strman.length("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihiymx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_t_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ew_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_ax_m_dgw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_t_e3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ex_m_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_ghpa_gk=");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2176 + "'", int1 == 2176);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test002");
        boolean boolean2 = strman.Strman.unequal("hi!hi!", "1null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test003");
        java.lang.String str1 = strman.Strman.swapCase("ihi97hhi97hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test004");
        boolean boolean1 = strman.Strman.isBlank("006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test005");
        int int2 = strman.Strman.lastIndexOf("000720010500033001040010500033nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", "Mw==");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test006");
        boolean boolean1 = strman.Strman.isUpperCase("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test007");
        int int3 = strman.Strman.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "771228561nullnull97nnul001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test008");
        java.lang.String str1 = strman.Strman.upperFirst("00mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihistr1.equals("00mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test009");
        java.lang.String str3 = strman.Strman.rightPad("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97nnul1097null971097null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "-1", 50);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97nnul1097null971097null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str3.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97nnul1097null971097null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test010");
        boolean boolean1 = strman.Strman.isUpperCase("n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnulHi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test011");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("nULL97NNUL");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test012");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.util.List<java.lang.String> strList5 = strman.Strman.zip(strArray4);
        boolean boolean7 = strman.Strman.containsAny("", strArray4, true);
        boolean boolean9 = strman.Strman.containsAny("hi!hi!", strArray4, true);
        boolean boolean11 = strman.Strman.containsAll("10", strArray4, false);
        java.lang.String str13 = strman.Strman.join(strArray4, "hi!");
        java.lang.String str14 = strman.Strman.format("1101171081085755", strArray4);
        java.lang.String str16 = strman.Strman.join(strArray4, "10010110000000000001001000000000");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "1101171081085755" + "'", str14.equals("1101171081085755"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test013");
        java.lang.String[] strArray3 = strman.Strman.lines("hihi");
        java.lang.String str4 = strman.Strman.append("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078", strArray3);
        boolean boolean6 = strman.Strman.containsAll("001040010500110001170010800108000570005500078001100011700108", strArray3, true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi" + "'", str4.equals("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi"));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test014");
        java.lang.String str2 = strman.Strman.repeat("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", 100);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test015");
        java.lang.String str1 = strman.Strman.swapCase("00000000011010010000000001101000000000000110100100000000001011010000000001101000");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00000000011010010000000001101000000000000110100100000000001011010000000001101000" + "'", str1.equals("00000000011010010000000001101000000000000110100100000000001011010000000001101000"));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test016");
        java.lang.String str3 = strman.Strman.safeTruncatenzlsb_hvu_nzc5b_gx1bjk3_owxsd_w5_mnzlsb_hvu_tdc5b_gx1bl_u3_owxsd_w5_onzlsb_hvu");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nzlsb_hvu_nzc5b_gx1bjk3_owxsd_w5_mnzlsb_hvu_tdc5b_gx1bl_u3_owxsd_w5_onzlsb_hvu" + "'", str3.equals("nzlsb_hvu_nzc5b_gx1bjk3_owxsd_w5_mnzlsb_hvu_tdc5b_gx1bl_u3_owxsd_w5_onzlsb_hvu"));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test017");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test018");
        boolean boolean1 = strman.Strman.isLowerCase("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 Nnull97 Unull97 Lnull97 Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test019");
        java.lang.String str1 = strman.Strman.transliterate("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "str1.equals("000720010500033001040010500033nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull1097null
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test020");
        boolean boolean2 = strman.Strman.isEnclosedBetween("Null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test021");
        java.lang.String str1 = strman.Strman.leftTrim("hihiHI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hihiHI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E" + "'", str1.equals("hihiHI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E"));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test022");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test023");
        long long4 = strman.Strman.countSubstr("lunN79llunnull97null97Nnull97Unull97Lnull97Lnull979null977null97nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", false, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test024");
        java.lang.String[] strArray3 = strman.Strman.between("NULLNULL000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihiymx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_t_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ew_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_ax_m_dgw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_t_e3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ex_m_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_ghpa_gk=", "nULL97HIHIHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!NNULL97HIHIHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!UNULL97HIHIHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!LNULL97HIHIHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!LNULL979NULL977NULL97", "lunN79llun");
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test025");
        java.lang.String str1 = strman.Strman.swapCase("11");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "11" + "'", str1.equals("11"));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test026");
        java.lang.String str1 = strman.Strman.binEncode("101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test027");
        boolean boolean1 = strman.Strman.isBlank("MDAwNzIwMDEwNTAwMTA0MDAxMDUwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDExMDAwMTE3MDAxMDgwMDEwODAwMDU3MDAwNTUwMDEwNDAwMTA1MDAwMzM=");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test028");
        int int1 = strman.Strman.length("0001101001000000000110100000000000011010010000000001011111000000000110100000000000011010000000000001101001000000000010110100000000011010000000000001101001000000000011010000000000001110000000000000");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 196 + "'", int1 == 196);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test029");
        java.lang.String str1 = strman.Strman.removeNonWords("nullnullnullnullnullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;nullnull&excl;");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl" + "'", str1.equals("nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl"));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test030");
        java.lang.String[] strArray5 = strman.Strman.words("", "hi!");
        java.lang.String str6 = strman.Strman.format("79llun779llun979llunL79llunL79llunU79llunN79llun", strArray5);
        java.lang.String str7 = strman.Strman.prependArray("Hihi", strArray5);
        boolean boolean8 = strman.Strman.containsAny("a-whp-x2gstrArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "79llun779llun979llunL79llunL79llunU79llunN79llun" + "'", str6.equals("79llun779llun979llunL79llunL79llunU79llunN79llun"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Hihi" + "'", str7.equals("Hihi"));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test031");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("nULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", (int) 'a');
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test032");
        try {
            java.lang.String str3 = strman.Strman.decode("lunn79llun", 8327, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 52 greater than Character.MAX_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test033");
        java.lang.String str3 = strman.Strman.encode("hihi", 160, 50);
        org.junit.Assert.assertTrue("'" + strstr3.equals
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test034");
        boolean boolean1 = strman.Strman.isBlank("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test035");
        java.lang.String[] strArray6 = strman.Strman.chars("null");
        boolean boolean7 = strman.Strman.containsAny("null97Nnull97Unull97Lnull97Lnull979null977null97", strArray6);
        java.lang.String str8 = strman.Strman.prepend("nULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", strArray6);
        boolean boolean9 = strman.Strman.containsAll("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histrArray6);
        boolean boolean11 = strman.Strman.containsAny("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", strArray6, false);
        java.lang.String str12 = strman.Strman.append("!HI!HI!HI!6", strArray6);
        java.lang.String str14 = strman.Strman.join(strArray6, "IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL" + "'", str8.equals("nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL"));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "!HI!HI!HI!6null" + "'", str12.equals("!HI!HI!HI!6null"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "nIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101uIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101lIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101l" + "'", str14.equals("nIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101uIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101lIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101l"));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test036");
        java.lang.String str2 = strman.Strman.ensureRight("0004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056", "NULL97NNUL!ih");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "0004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056NULL97NNUL!ih" + "'", str2.equals("0004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056NULL97NNUL!ih"));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test037");
        java.lang.String[] strArray2 = strman.Strman.chars("1lunn79llun");
        try {
            java.util.Optional<java.lang.String> strOptional3 = strman.Strman.trimEnd("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", strArray2);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Illegal/unsupported escape sequence near index 3\r\n[1\\l\\u\\n\\n\\7\\9\\l\\l\\u\\n]+$\r\n   ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test038");
        java.lang.String str3 = strman.Strman.insert("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055", "0010400105nULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", 540);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055" + "'", str3.equals("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055"));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test039");
        java.lang.String str2 = strman.Strman.ensureRightull97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "00055000500004900048000530005100051001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str2.equalsull97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test040");
        java.lang.String[] strArray2 = strman.Strman.split("0004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056", "null97nnul1097null971097");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test041");
        boolean boolean2 = strman.Strman.inequal
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test042");
        java.lang.String str1 = strman.Strman.reverse("n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul-hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97-nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lunn-79llun!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih-lunn79llun-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihl-u-n-n-79l-l-u-n" + "'", str1.equals("lunn-79llun!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih-lunn79llun-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihl-u-n-n-79l-l-u-n"));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test043");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        boolean boolean2 = strman.Strman.isString((java.lang.Object) strOptional1);
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test044");
        boolean boolean2 = strman.Strman.inequal("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test045");
        long long4 = strman.Strman.countSubstr("", "0021004800490021004800490021004800490021Null97null97nnull97unull97lnull97lnull979null977null97", false, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test046");
        try {
            java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("null97nnul", 61);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 61");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test047");
        java.lang.String str4 = strman.Strman.replace("ihi97hhi97hi4848515548485157484854994848549948485553484854101484", "0000000001101001000000000110100000000000011010010000000001001000", "tNvSBdK3BM51Ba==", false);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "ihi97hhi97hi4848515548485157484854994848549948485553484854101484" + "'", str4.equals("ihi97hhi97hi4848515548485157484854994848549948485553484854101484"));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test048");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("48485457484854564848545748485310248485456484854564848545748485010048485456484854574848515248485156484851524848515648485153484851494848515348485153484851524848515648485152484851564848515348485149484851534848515548485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851524848515748485157484851524848515648485152484851564848515348485153484851534848515148485152484851564848515248485156484851534848515248485149484851484848514948485152484851564848515248485156484851534848514948485153484851534848515248485156484851524848515648485153484851494848515348485153484851524848515648485152484851564848515348485149484851534848515548485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851524848515748485157484851524848515648485152484851564848515348485153484851534848515148485152484851564848515248485156484851534848515248485149484851484848514948485152484851564848515248485156484851534848514948485153484851554848515248485156484851524848515648485153484851494848515348485153484851524848515648485152484851564848515348485149484851534848515548485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851524848515748485157484851524848515648485152484851564848515348485153484851534848515148485152484851564848515248485156484851534848515248485149484851484848514948485152484851564848515248485156484851534848515048485157484851574848515248485156484851524848515648485153484851494848515348485153484851524848515648485152484851564848515348485149484851534848515548485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851524848515748485157484851524848515648485152484851564848515348485153484851534848515148485152484851564848515248485156484851534848515248485149484851484848514948485152484851564848515248485156484851534848515048485157484851574848515248485156484851524848515648485153484851494848515348485153484851524848515648485152484851564848515348485149484851534848515548485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851524848515748485157484851524848515648485152484851564848515348485153484851534848515148485152484851564848515248485156484851534848515248485149484851484848514948485152484851564848515248485156484851534848515148485153484851514848515248485156484851524848515648485153484851494848515348485153484851524848515648485152484851564848515348485149484851534848515548485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851524848515748485157484851524848515648485152484851564848515348485153484851534848515148485152484851564848515248485156484851534848515248485149484851484848514948485152484851564848515248485156484851534848515048485149484851484848514948485152484851564848515248485156484851534848514948485153484851534848515248485156484851524848515648485153484851494848515348485155484851524848515648485152484851564848515348485152484851574848515748485152484851564848515248485156484851534848515248485157484851574848515248485156484851524848515648485153484851534848515348485151484851524848515648485152484851564848515348485152484851494848514848485149104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533104105331041053310410533", 3);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test049");
        try {
            java.lang.String str3 = strman.Strman.decode("771228561nullnull97nnul001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97", (int) (byte) 0, 505);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 505 greater than Character.MAX_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test050");
        java.lang.String str1 = strman.Strman.escapeRegExp("Null97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Null97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("Null97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test051");
        java.lang.String str1 = strman.Strman.rightTrim("n-u-l-l97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "n-u-l-l97" + "'", str1.equals("n-u-l-l97"));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test052");
        boolean boolean2 = strman.Strman.isEnclosedBetween("", "IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test053");
        java.lang.String[] strArray5 = strman.Strman.chars("null");
        boolean boolean6 = strman.Strman.containsAny("null97Nnull97Unull97Lnull97Lnull979null977null97", strArray5);
        java.lang.String str7 = strman.Strman.prepend("nULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", strArray5);
        boolean boolean8 = strman.Strman.containsAll("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histrArray5);
        java.lang.String str9 = strman.Strman.format("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL" + "'", str7.equals("nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL"));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH" + "'", str9.equals("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH"));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test054");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("Null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test055");
        java.lang.String str2 = strman.Strman.removeRight("MzU=", "nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "MzU=" + "'", str2.equals("MzU="));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test056");
        java.lang.String str3 = strman.Strman.ensureRight("null97n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullfalse);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "null97n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullstr3.equals("null97n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test057");
        java.lang.String str2 = strman.Strman.repeat("hi-hi", (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi" + "'", str2.equals("hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi"));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test058");
        boolean boolean4 = strman.Strman.endsWith("TlVMTDk3", "00110001170010800108001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001100011700108001080005700055001040010500045000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101000480004800051000550004800048000510005500048000480005100057000480004800054000990004800048000540009900048000480005500053000480004800054001010004800048000510005700048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010100048000480005200099000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101000480004800052000990004800048000510005500048000480005100057000480004800054000990004800048000540009900048000480005500053000480004800054001010004800048000530005300048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010100048000480005200101000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101", 4944, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test059");
        boolean boolean2 = strman.Strman.isEnclosedBetween("HiHinull97nnul", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test060");
        java.lang.String str1 = strman.Strman.removeSpaces("nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi"));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test061");
        int int1 = strman.Strman.length("!ihnullnull97Nnull97Unull97Lnull97Lnull979null977nuln_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnulll97NULL9748485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 656 + "'", int1 == 656);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test062");
        java.lang.String str3 = strman.Strman.truncate("", (int) (short) 0, "ll97");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test063");
        int int3 = strman.Strman.lastIndexOf("nIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101uIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101lIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101l", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test064");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test065");
        java.lang.String str1 = strman.Strman.rightTrim("NULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL" + "'", str1.equals
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test066");
        int int1 = strman.Strman.length("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 Nnull97 Unull97 Lnull97 Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 298 + "'", int1 == 298);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test067");
        boolean boolean1 = strman.Strman.isLowerCase("HiHi");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test068");
        boolean boolean3 = strman.Strman.endsWithwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test069");
        int int3 = strman.Strman.lastIndexOf("Null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test070");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("79ll040100", (int) (short) 100);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test071");
        java.lang.String str1 = strman.Strman.removeNonWords("0030003000330033");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0030003000330033" + "'", str1.equals("0030003000330033"));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test072");
        java.lang.String str1 = strman.Strman.capitalize("00000000010010000000000001101001");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00000000010010000000000001101001" + "'", str1.equals("00000000010010000000000001101001"));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test073");
        java.lang.String str1 = strman.Strman.binEncode
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test074");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("00000000011101010000000001101100");
        boolean boolean2 = strman.Strman.isString((java.lang.Object) strOptional1);
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test075");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("1null97null97_nnul_n_u_l_l97_n_n_u_l!ih000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test076");
        long long4 = strman.Strman.countSubstr("000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000000000000001100010000000000110000000000000011000000000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000000000000001100010000000000110000000000000011000000000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110001000000000011000000000000001100010000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000000000000001100010000000000110001000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000100000000001100000000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110000000000000011000100000000001100010000000000110001000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000100000000001100000000000000110001000000000011000000000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100000000000000110000000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110111000000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000011101010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101100000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110110000000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000001110010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000000110111000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111", "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test077");
        java.lang.String str3 = strman.Strman.insert("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l", "NULL97hihi", 2176);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l" + "'", str3.equals("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l"));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test078");
        java.lang.String str1 = strman.Strman.lowerFirst("Null97Nnull97Unull97Lnull97Lnull979null977null979710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97Nnull97Unull97Lnull97Lnull979null977null979710" + "'", str1.equals("null97Nnull97Unull97Lnull97Lnull979null977null979710"));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test079");
        java.lang.String[] strArray1 = null;
        java.lang.String str2 = strman.Strman.appendArray("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97", strArray1);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str2.equals("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test080");
        java.lang.String str1 = strman.Strman.decEncode("Hi\\ hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000720010500092000320010400105" + "'", str1.equals("000720010500092000320010400105"));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test081");
        java.lang.String str3 = strman.Strman.safeTruncate("NULL97NNUL", (int) '#', "lunn79llun");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "NULL97NNUL" + "'", str3.equals("NULL97NNUL"));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test082");
        java.lang.String[] strArray5 = strman.Strman.between("97", "hi!hi!", "null97Nnul");
        boolean boolean7 = strman.Strman.containsAny("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3TnVsbA==", strArray5, false);
        boolean boolean8 = strman.Strman.containsAny("null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test083");
        java.lang.String str3 = strman.Strman.truncate("nullnull97nnulnull97", (int) '4', "1097nullnull97nnulhi");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nullnull97nnulnull97" + "'", str3.equals("nullnull97nnulnull97"));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test084");
        java.lang.String str2 = strman.Strman.toDecamelize("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str2.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test085");
        boolean boolean2 = strman.Strman.isEnclosedBetween("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97n-u-l-l97-n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test086");
        java.lang.String str1 = strman.Strman.dasherize("Hi\\ hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi\\-hi" + "'", str1.equals("hi\\-hi"));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test087");
        java.lang.String str3 = strman.Strman.truncate("tNvSBdK3BM51Ba==", (int) (byte) 100, "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "tNvSBdK3BM51Ba==" + "'", str3.equals("tNvSBdK3BM51Ba=="));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test088");
        boolean boolean3 = strman.Strman.contains("Hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-hi\\-null97hi\\-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "hi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test089");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test090");
        boolean boolean3 = strman.Strman.contains("hiHinull97nnul", "nnullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihiullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test091");
        java.lang.String str1 = strman.Strman.base64Encode("Null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "TnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIW5udWxsOTdoaWhpaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhbnVsbDk3aGkhdW51bGw5N2hpaGloaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFudWxsOTdoaSFsbnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIWxudWxsOTc5bnVsbDk3N251bGw5Nw==" + "'", str1.equals("TnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIW5udWxsOTdoaWhpaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhbnVsbDk3aGkhdW51bGw5N2hpaGloaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFudWxsOTdoaSFsbnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIWxudWxsOTc5bnVsbDk3N251bGw5Nw=="));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test092");
        java.lang.String str1 = strman.Strman.capitalize("1");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1" + "'", str1.equals("1"));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test093");
        java.lang.String str3 = strman.Strman.insertn-u-l-l97-n-n-u-l
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00072001050010400105001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001100011700108001080005700055001040010500033n-u-l-l97-n-n-u-l" + "'", str3.equalsn-u-l-l97-n-n-u-l"));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test094");
        java.lang.String[] strArray4 = strman.Strman.words("", "hi!");
        java.lang.String str5 = strman.Strman.format("null", strArray4);
        java.lang.String str7 = strman.Strman.join(strArray4, "");
        java.lang.String str8 = strman.Strman.append("35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null" + "'", str5.equals("null"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi" + "'", str8.equals("35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi"));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test095");
        java.lang.String[] strArray2 = strman.Strman.wordse0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004e
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test096");
        java.lang.String str1 = strman.Strman.removeSpaces("
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "str1.equals("
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test097");
        java.lang.String str1 = strman.Strman.htmlEncode("lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test098");
        java.lang.String str1 = strman.Strman.reverse("hi!hi!null");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "llun!ih!ih" + "'", str1.equals("llun!ih!ih"));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test099");
        java.lang.String str2 = strman.Strman.ensureLeftnull97Nnull97Unull97Lnull97Lnull979null977null97NULL97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "null97Nnull97Unull97Lnull97Lnull979null977nullstr2.equals("null97Nnull97Unull97Lnull97Lnull979null977null
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test100");
        java.lang.String str3 = strman.Strman.rightPad("HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E", "lunN79llunnull97null97Nnull97Unull97Lnull97Lnull979null977null97", 480);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E" + "'", str3.equals("HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E"));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test101");
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.util.List<java.lang.String> strList4 = strman.Strman.zip(strArray3);
        boolean boolean6 = strman.Strman.containsAny("", strArray3, true);
        boolean boolean8 = strman.Strman.containsAny("hi!hi!", strArray3, true);
        boolean boolean10 = strman.Strman.containsAnystrArray3, false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test102");
        java.lang.String[] strArray3 = strman.Strman.words("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        java.util.List<java.lang.String> strList4 = strman.Strman.zip(strArray3);
        java.lang.String[] strArray5 = strman.Strman.removeEmptyStrings(strArray3);
        java.lang.String str6 = strman.Strman.format("Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97", strArray5);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97" + "'", str6.equals("Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97"));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test103");
        java.lang.String str1 = strman.Strman.toCamelCase("IHI_HHI_HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "iHIHHIHI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("iHIHHIHI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test104");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("", 30);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test105");
        long long2 = strman.Strman.countSubstr("ihi-h", "hi_hi0000000001001000000000000110100197_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_null97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test106");
        int int1 = strman.Strman.length("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 402 + "'", int1 == 402);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test107");
        java.lang.String str1 = strman.Strman.binEncode("003900370010400105");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000011000000000000001100000000000000110011000000000011100100000000001100000000000000110000000000000011001100000000001101110000000000110000000000000011000000000000001100010000000000110000000000000011010000000000001100000000000000110000000000000011000100000000001100000000000000110101" + "'", str1.equals("000000000011000000000000001100000000000000110011000000000011100100000000001100000000000000110000000000000011001100000000001101110000000000110000000000000011000000000000001100010000000000110000000000000011010000000000001100000000000000110000000000000011000100000000001100000000000000110101"));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test108");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test109");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 6432);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test110");
        java.lang.String str1 = strman.Strman.binEncode("Mw==Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test111");
        java.lang.String str3 = strman.Strman.ensureLeft("006900680069005f006800680069002dlunn79llun", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lunn79llun006900680069005f006800680069002dstr3.equals("lunn79llun006900680069005f006800680069002d
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test112");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("000720010500092000320010400105");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test113");
        long long4 = strman.Strman.countSubstr("3kdtmV lT hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS", "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihiymx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_t_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ew_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_ax_m_dgw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_t_e3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ex_m_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_ghpa_gk=", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test114");
        int int4 = strman.Strman.indexOf("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", 5, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test115");
        java.lang.String str1 = strman.Strman.upperFirst("n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test116");
        boolean boolean2 = strman.Strman.endsWith("hihi", "n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test117");
        java.lang.String str1 = strman.Strman.decEncode("3kdtmV lT hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0005100107001000011600109000860003200108000840003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083" + "'", str1.equals("0005100107001000011600109000860003200108000840003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083000320010400107001010008300032001040010700101000830003200104001070010100083"));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test118");
        java.lang.String str2 = strman.Strman.removeLeft("NULL97NNUL", "006e0075006c006c0039003700390037");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "NULL97NNUL" + "'", str2.equals("NULL97NNUL"));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test119");
        boolean boolean2 = strman.Strman.unequal("nULL97", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test120");
        java.lang.String str1 = strman.Strman.humanize("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000 ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih" + "'", str1.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000 ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih"));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test121");
        int int3 = strman.Strman.lastIndexOf("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "Hi!hi!", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test122");
        java.lang.String[] strArray4 = strman.Strman.chop("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3", 294);
        java.lang.String str5 = strman.Strman.prepend("00078001170010800108000570005500110001100011700108", strArray4);
        java.lang.String str7 = strman.Strman.join(strArray4, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        java.lang.String str8 = strman.Strman.prepend("00110001170010800108000570005500078001100011700108hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", strArray4);
        java.lang.Class<?> wildcardClass9 = strArray4.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108" + "'", str5.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3" + "'", str7.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300110001170010800108000570005500078001100011700108hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str8.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300110001170010800108000570005500078001100011700108hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test123");
        java.lang.String str4 = strman.Strman.replace("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", "TnVsbDk3bm51bA==", "Null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", false);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str4.equals("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test124");
        java.lang.String[] strArray3 = strman.Strman.between("nullnull&excl;nullnull&excl;", "-1", "Hi!hi!hi!hi!NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        java.lang.String[] strArray4 = strman.Strman.removeEmptyStrings(strArray3);
        java.lang.String str6 = strman.Strman.join(strArray4, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test125");
        boolean boolean2 = strman.Strman.endsWith("00001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi-h
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test126");
        java.lang.String[] strArray3 = strman.Strman.words("000720010500033001040010500033nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        boolean boolean5 = strman.Strman.containsAll("lunN79llunnull97null97Nnull97Unull97Lnull97Lnull979null977null97", strArray3, true);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test127");
        java.lang.String str3 = strman.Strman.removeLeft("", "n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnulln-u-l-l97-n-n-u-l", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test128");
        java.lang.String str3 = strman.Strman.encode("-1", 0, 294);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "4549" + "'", str3.equals("4549"));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test129");
        java.lang.String str2 = strman.Strman.removeRight("n-u-l-l97-n-n-u-l", "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "n-u-l-l97-n-n-u-l" + "'", str2.equals("n-u-l-l97-n-n-u-l"));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test130");
        int int4 = strman.Strman.indexOfhinullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", 402, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test131");
        boolean boolean2 = strman.Strman.contains("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH00390037", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test132");
        java.lang.String[] strArray3 = strman.Strman.lines("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        java.lang.String str4 = strman.Strman.prepend("null97", strArray3);
        java.lang.String str6 = strman.Strman.join(strArray3, "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null");
        java.lang.String[] strArray7 = strman.Strman.removeEmptyStrings(strArray3);
        java.lang.String str8 = strman.Strman.prepend("1097null97", strArray7);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str4.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str6.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!1097null97" + "'", str8.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!1097null97"));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test133");
        int int3 = strman.Strman.lastIndexOf("0021004800490021004800490021004800490021Null97null97nnull97unull97lnull97lnull979null977null97", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 Nnull97 Unull97 Lnull97 Lnull979null977null97", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test134");
        java.lang.String[] strArray3 = strman.Strman.words("", "null");
        java.util.Optional<java.lang.String> strOptional4 = strman.Strman.trimStart("", strArray3);
        java.lang.String[] strArray5 = strman.Strman.removeEmptyStrings(strArray3);
        java.lang.String[] strArray6 = strman.Strman.removeEmptyStrings(strArray3);
        java.util.List<java.lang.String> strList7 = strman.Strman.zip(strArray6);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strOptional4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test135");
        java.lang.String str1 = strman.Strman.formatNumber((long) 480);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "480" + "'", str1.equals("480"));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test136");
        java.lang.String str1 = strman.Strman.humanize("n-u-l-l97hihi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "N u l l97hihi" + "'", str1.equals("N u l l97hihi"));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test137");
        java.lang.String str3 = strman.Strman.rightPad("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", "101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", (int) (short) 100);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056" + "'", str3.equals("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056"));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test138");
        java.lang.String str1 = strman.Strman.collapseWhitespace
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100100000000011010000000000001101001000000000101111100000000011010000000000001101000000000000110100100000000001011010000000001101000000000000110100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011010100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100100000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100100000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100110000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100100000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011010100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110111000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010100000000001101010000000000110011000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011000100000000001100000000000000110001" + "'", str1.equals
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test139");
        java.lang.String str1 = strman.Strman.htmlDecode("Hi!hi!NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test140");
        int int4 = strman.Strman.indexOf("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "ullnullnullnullnullnullnull", 480, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test141");
        java.lang.String str1 = strman.Strman.transliterate("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97" + "'", str1.equals("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97"));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test142");
        java.lang.String str3 = strman.Strman.insert("7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", (int) '#');
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hn-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnulli!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3.equals("7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hn-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnulli!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test143");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("Nnullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037hihiullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", 5);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test144");
        boolean boolean1 = strman.Strman.isBlank("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test145");
        java.lang.String str1 = strman.Strman.decEncode("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        org.junit.Assert.assertTrue("'" + strstr1.equals("000550005700076000760008500078000550005500057000760007600085000780005700055000570007600076000850007800108000550005700076000760008500078001080005500057000760007600085000780011700055000570007600076000850007800110000550005700076000760008500078000550005700076000760008500078000550005500057000760007600085000780005700055000570007600076000850007800108000550005700076000760008500078001080005500057000760007600085000780011700055000570007600076000850007800110000550005700076000760008500078"));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test146");
        java.lang.String str2 = strman.Strman.toDecamelize("hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_null97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006eaWhpX2g=");
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test147");
        java.lang.String str1 = strman.Strman.startCase("9ihiH7");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "9ihi H7" + "'", str1.equals("9ihi H7"));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test148");
        java.lang.String[] strArray1 = strman.Strman.chars("null97_nnull97_unull97_lnull97_lnull979null977null97_null97");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test149");
        java.lang.String str2 = strman.Strman.removeLeft("null97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "null97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnul" + "'", str2.equals("null97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnul"));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test150");
        java.lang.String str3 = strman.Strman.safeTruncate("null97nnul", 0, "00072001050010400105001050010400105000950010400104001050009500104001050005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530004900053000530005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530004900053000550005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000057000570005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000057000570005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005100053000510005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000049000480004900052000560005200056000530004900053000530005200056000520005600053000490005300055000520005600052000560005300052000570005700052000560005200056000530005200057000570005200056000520005600053000530005300051000520005600052000560005300052000490004800049");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test151");
        java.lang.String str1 = strman.Strman.toSnakeCase("300300301301300300300301301313300300301300320300300301300320300300300311313300300300311311300300300313320300300301301300300300301301313300300301300320");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "300300301301300300300301301313300300301300320300300301300320300300300311313300300300311311300300300313320300300301301300300300301301313300300301300320" + "'", str1.equals("300300301301300300300301301313300300301300320300300301300320300300300311313300300300311311300300300313320300300301301300300300301301313300300301300320"));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test152");
        int int4 = strman.Strman.indexOf("1null97null97 nnul n u l l97 n n u l!ih", "hi!hi!null", (int) (byte) 100, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test153");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("00110001170010800108000570005500078001100011700108hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test154");
        int int1 = strman.Strman.length("MzU=");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test155");
        java.lang.String str1 = strman.Strman.reverse("nullnull&excl;nullnull&excl;");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + ";lcxe&llunllun;lcxe&llunllun" + "'", str1.equals(";lcxe&llunllun;lcxe&llunllun"));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test156");
        java.lang.String str3 = strman.Strman.leftPad("006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "79llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun", 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006900680069005f006800680069002d0068006900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003500340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003700340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500330035003300340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320031003000310034003800340038003500310035003500340038003400380035003100350037003400380034003800350034003900390034003800340038003500340039003900340038003400380035003500350033003400380034003800350034003100300031hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3.equals("006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test157");
        java.lang.String str1 = strman.Strman.reverse("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1.equals("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test158");
        java.lang.String str3 = strman.Strman.safeTruncate("NULL97N UllnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullHihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", (int) (byte) 0, "000480004800048000480004800048000480004800048000490005500057000760007600085000780005500055000570007600076000850007800057000550005700076000760008500078001080005500057000760007600085000780010800055000570007600076000850007800117000550005700076000760008500078001100005500057000760007600085000780004900048000490004800048000480004800048000480004800048000480004800048000480004900049000480004900048000480004900048000480004800048000480004800048000480004800048000490004800049000490004800049000480004800048000480004800048000480004800048000490004900048000490004800048000480004800048000480004800048000480004800048000480004900049000480004900048000480004900048000480004800048000480004800048000480004800049000490004800049000490004900048000480004800048000480004800048000480004800048000490004900049000480004900048000490004800048000480004800048000480004800048000480004900049000480004900049000480004800048000480004800048000480004800048000480004800049000490004800049000490004800048000480004800048000480004800048000480004800048000480004900049000490004800048000490004800048000480004800048000480004800048000480004800049000490004800049000490004900048000480004800048000480004800048000480004800049000490004800049000490004900048000480004800048000480004800048000480004800048000490004900048000490004900049000480004800048000480004800048000480004800048000480004900049000490004800049000480004900048000480004800048000480004800048000480004800049000490004800049000490004800048");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test159");
        boolean boolean2 = strman.Strman.endsWith("9710", "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test160");
        java.lang.String[] strArray2 = strman.Strman.chop("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", (int) (short) 0);
        java.lang.String str4 = strman.Strman.join(strArray2, "mda2006e0075006c006c00390037ztaw006e0075006c006c00390037nz006e0075006c006c00390037uw006e0075006c006c00390037mdzj006e0075006c006c00390037mda2006e0075006c006c00390037yz006e0075006c006c00390037aw006e0075006c006c00390037mzkw006e0075006c006c00390037mdm3");
        boolean boolean5 = strman.Strman.isString((java.lang.Object) str4);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str4.equals("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test161");
        int int2 = strman.Strman.lastIndexOf("hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi", "NULL97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test162");
        boolean boolean2 = strman.Strman.endsWith("000720010500033001040010500033nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLnullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", "hi");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test163");
        boolean boolean2 = strman.Strman.inequal("1", "Null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test164");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("Hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test165");
        java.lang.String str2 = strman.Strman.toDecamelize
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "0004800048000490004800052000480004800049000480005300048000480004900048000520004800048000490004800053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000490004800048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004900049000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000490004800056000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000480005600048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004800053000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000480005300053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800048000530005500048000480004800053000530004800048000480005200057000480004800048000520005600048000480004900049000480004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056000480004800048000520005300048000480004900048000560004800048000480005300055000480004800048000530005300048000480004800052000530004800048000490004900048000480004800048000520005300048000480004900049000480004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056" + "'", str2.equals
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test166");
        java.lang.String str1 = strman.Strman.hexEncode("HiHi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0048006900480069" + "'", str1.equals("0048006900480069"));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test167");
        java.lang.String[] strArray3 = strman.Strman.between("1null97null97_nnul_n_u_l_l97_n_n_u_lih", "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null", "330005010040100330005010027000");
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test168");
        java.lang.String str3 = strman.Strman.ensureRight("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str3.equals("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test169");
        java.lang.String str3 = strman.Strman.ensureRightullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0011000117001080010800104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500104001050004500110001170010800108000570005500104001050004500048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010100048000480005100055000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101000480004800051000570004800048000510005500048000480005100057000480004800054000990004800048000540009900048000480005500053000480004800054001010004800048000520009900048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010100048000480005200099000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101000480004800053000530004800048000510005500048000480005100057000480004800054000990004800048000540009900048000480005500053000480004800054001010004800048000520010100048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010148485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str3.equalsullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test170");
        java.lang.String str1 = strman.Strman.upperFirst("00000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test171");
        java.lang.String str2 = strman.Strman.ensureRight("Hi!hi!NULL97", "=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Hi!hi!NULL97=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histr2.equals("Hi!hi!NULL97=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test172");
        java.lang.String str1 = strman.Strman.base64Encode("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi-h");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAxMDAxMTEwMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwMTAxMTAxMDAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaS1o" + "'", str1.equals("MDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAxMDAxMTEwMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwMTAxMTAxMDAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaS1o"));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test173");
        java.lang.String str2 = strman.Strman.ensureRight("null97", "nULL97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "null97nULL97" + "'", str2.equals("null97nULL97"));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test174");
        java.lang.String str2 = strman.Strman.ensureRight("IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul-hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97-nnul");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul-hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97-nnul" + "'", str2.equals("IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul-hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97-nnul"));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test175");
        boolean boolean2 = strman.Strman.isEnclosedBetween("", "00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test176");
        java.lang.String[] strArray2 = strman.Strman.split("hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97", "771228561");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test177");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test178");
        java.lang.String str1 = strman.Strman.slugify("0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004e
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004estr1.equals("0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004e00310030003100300030003000300030003000300030003000300030003000310031003000310030003000310030003000300030003000300030003000300030003100300031003100300031003000300030003000300030003000300030003100310030003100300030003000300030003000300030003000300030003000310031003000310030003000310030003000300030003000300030003000300031003100300031003100310030003000300030003000300030003000300030003100310031003000310030003100300030003000300030003000300030003000310031003000310031003000300030003000300030003000300030003000300031003100300031003100300030003000300030003000300030003000300030003000310031003100300030003100300030003000300030003000300030003000300031003100300031003100310030003000300030003000300030003000300031003100300031003100310030003000300030003000300030003000300030003100310030003100310031003000300030003000300030003000300030003000310031003100300031003000310030003000300030003000300030003000300031003100300031003100300030"));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test179");
        int int4 = strman.Strman.indexOf("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3TnVsbA==", 402, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test180");
        boolean boolean2 = strman.Strman.endsWith("ullnullnullnullnullnullnullNull97nnul1097null971097", "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test181");
        java.lang.String str1 = strman.Strman.humanize("hihi
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hihistr1.equals("Hihi
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test182");
        java.lang.String[] strArray2 = strman.Strman.words("hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_null97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        boolean boolean4 = strman.Strman.containsAny("null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", strArray2, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test183");
        boolean boolean3 = strman.Strman.isEnclosedBetween("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97", "00110000850007600076000570005500078000780008500076", "hinullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test184");
        java.lang.String str3 = strman.Strman.removeLeft("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", "hi!hi!97", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str3.equals("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test185");
        java.lang.String str1 = strman.Strman.slugify("ihi_h");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "ihi_h" + "'", str1.equals("ihi_h"));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test186");
        int int1 = strman.Strman.length("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 740 + "'", int1 == 740);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test187");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test188");
        int int2 = strman.Strman.lastIndexOf("NULL970000000001001000000000000110100197", "N u l l97hihi");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test189");
        java.lang.String str2 = strman.Strman.toDecamelize("1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "110117108108575500000000017900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n77900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n97900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nu7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nn7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str2.equals("110117108108575500000000017900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n77900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n97900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nu7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nn7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test190");
        java.lang.String str1 = strman.Strman.toStudlyCase("Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055" + "'", str1.equals("Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055"));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test191");
        int int2 = strman.Strman.lastIndexOf("Null97Nnull97Unull97Lnull97Lnull979null977null97", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test192");
        java.lang.String[] strArray2 = strman.Strman.words
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test193");
        java.lang.String str2 = strman.Strman.removeRight
        org.junit.Assert.assertTrue("'" + strstr2.equals("000000000100111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100"));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test194");
        int int2 = strman.Strman.lastIndexOf("110117108108575500000000017900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n77900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n97900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nu7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nn7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test195");
        boolean boolean2 = strman.Strman.isEnclosedBetween("", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test196");
        try {
            java.lang.String str3 = strman.Strman.slice("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97", 202, 4342);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 4342");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test197");
        java.lang.String str1 = strman.Strman.binEncode("9710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0000000000111001000000000011011100000000001100010000000000110000" + "'", str1.equals("0000000000111001000000000011011100000000001100010000000000110000"));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test198");
        java.lang.String str1 = strman.Strman.formatNumber((long) 256);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "256" + "'", str1.equals("256"));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test199");
        java.lang.String str1 = strman.Strman.decEncode("00000000001100110000000000110101null97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000480004800048000480004800048000480004800048000480004900049000480004800049000490004800048000480004800048000480004800048000480004800049000490004800049000480004900110001170010800108000570005500110001100011700108" + "'", str1.equals("000480004800048000480004800048000480004800048000480004900049000480004800049000490004800048000480004800048000480004800048000480004800049000490004800049000480004900110001170010800108000570005500110001100011700108"));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test200");
        java.lang.String[] strArray2 = strman.Strman.splitih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97hihihi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test201");
        java.lang.String str1 = strman.Strman.hexEncode("hi-hi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00680069002dstr1.equals("00680069002d
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test202");
        try {
            java.lang.String str3 = strman.Strman.decode("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", 160, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 97 greater than Character.MAX_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test203");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) "Hihiihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test204");
        java.lang.String str1 = strman.Strman.underscored("hi-hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi_hi" + "'", str1.equals("hi_hi"));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test205");
        java.lang.String str1 = strman.Strman.hexEncode("79llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e006c00370039006c006c0075006e006c00370039006c006c0075006e007500370039006c006c0075006e006e00370039006c006c0075006e00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e006c00370039006c006c0075006e006c00370039006c006c0075006e007500370039006c006c0075006e006e00370039006c006c0075006e" + "'", str1.equals("00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e006c00370039006c006c0075006e006c00370039006c006c0075006e007500370039006c006c0075006e006e00370039006c006c0075006e00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e006c00370039006c006c0075006e006c00370039006c006c0075006e007500370039006c006c0075006e006e00370039006c006c0075006e"));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test206");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test207");
        java.lang.String str2 = strman.Strman.ensureLeft("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histr2.equals("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!000000000100111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100"));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test208");
        java.lang.String str3 = strman.Strman.truncate("n-u-l-l97-n-n-u-l", 480, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "n-u-l-l97-n-n-u-l" + "'", str3.equals("n-u-l-l97-n-n-u-l"));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test209");
        java.lang.String str3 = strman.Strman.encodeint) (short) 100);
        org.junit.Assert.assertTrue("'" + strstr3.equals
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test210");
        java.lang.String str1 = strman.Strman.toStudlyCase("33727333727333727333");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "33727333727333727333" + "'", str1.equals("33727333727333727333"));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test211");
        java.lang.String str1 = strman.Strman.upperFirst("hi-hinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi-hinull97nnul" + "'", str1.equals("Hi-hinull97nnul"));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test212");
        int int1 = strman.Strman.length("256");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test213");
        java.lang.String str1 = strman.Strman.swapCase("HiHinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hIhINULL97NNUL" + "'", str1.equals("hIhINULL97NNUL"));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test214");
        long long2 = strman.Strman.countSubstrih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihg2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test215");
        boolean boolean2 = strman.Strman.containswNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihMw==Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnulnull000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test216");
        java.lang.String[] strArray4 = strman.Strman.split("hi!hi!", "hi!");
        java.lang.String str6 = strman.Strman.join(strArray4, "hihi");
        java.lang.String[] strArray7 = strman.Strman.removeEmptyStrings(strArray4);
        java.util.List<java.lang.String> strList8 = strman.Strman.zip(strArray7);
        java.lang.String[] strArray9 = strman.Strman.removeEmptyStrings(strArray7);
        boolean boolean10 = strman.Strman.containsAny("!HI!HI!HI!", strArray7);
        java.lang.String str11 = strman.Strman.appendArray("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3", strArray7);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3" + "'", str11.equals("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3"));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test217");
        java.lang.String str1 = strman.Strman.capitalize("null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Null97" + "'", str1.equals("Null97"));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test218");
        int int4 = strman.Strman.indexOf("null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 8327, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test219");
        try {
            java.lang.String[] strArray2 = strman.Strman.chop("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: -300");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test220");
        java.lang.String str1 = strman.Strman.removeNonWords("Hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihinull97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str1.equals("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihinull97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test221");
        java.lang.String[] strArray4 = strman.Strman.lines("hi!hi!");
        java.util.Optional<java.lang.String> strOptional5 = strman.Strman.trimStart("hihi", strArray4);
        java.util.Optional<java.lang.String> strOptional6 = strman.Strman.trimStart("", strArray4);
        boolean boolean7 = strman.Strman.containsAny("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strOptional5);
        org.junit.Assert.assertNotNull(strOptional6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test222");
        long long2 = strman.Strman.countSubstr("", "Hi\\ hi");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test223");
        java.lang.String str1 = strman.Strman.toKebabCase("6");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "6" + "'", str1.equals("6"));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test224");
        java.lang.String str1 = strman.Strman.humanize("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 nnull97 unull97 lnull97 lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 nnull97 unull97 lnull97 lnull979null977null97"));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test225");
        java.lang.String[] strArray2 = strman.Strman.split("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!0033", "nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test226");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 nnull97 unull97 lnull97 lnull979null977null97 hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test227");
        try {
            java.lang.String str3 = strman.Strman.slice("001040ll97", 298, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -291");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test228");
        java.lang.String str1 = strman.Strman.underscored("35");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "35" + "'", str1.equals("35"));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test229");
        java.lang.String str1 = strman.Strman.lowerFirst("HiHinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hiHinull97nnul" + "'", str1.equals("hiHinull97nnul"));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test230");
        java.lang.String str1 = strman.Strman.startCase("ihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Ihi Hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str1.equals("Ihi Hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test231");
        java.lang.String str1 = strman.Strman.dasherize("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97-nnull97-unull97-lnull97-lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97-nnull97-unull97-lnull97-lnull979null977null97"));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test232");
        java.lang.String[] strArray2 = new java.lang.String[] { "hihi" };
        java.util.List<java.lang.String> strList3 = strman.Strman.zip(strArray2);
        java.lang.String str5 = strman.Strman.join(strArray2, "null");
        java.lang.String str7 = strman.Strman.join(strArray2, "ihi_h");
        boolean boolean9 = strman.Strman.containsAll("1101171081085755", strArray2, true);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hihi" + "'", str5.equals("hihi"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hihi" + "'", str7.equals("hihi"));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test233");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("nhihiHiHiuhihiHiHilhihiHiHil");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test234");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test235");
        java.lang.String[] strArray4 = strman.Strman.chars("null");
        java.lang.String str5 = strman.Strman.format("null97nnul", strArray4);
        java.lang.String str6 = strman.Strman.prepend("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", strArray4);
        java.lang.String str8 = strman.Strman.join(strArray4, "TnVsbDk3bm51bA==");
        boolean boolean10 = strman.Strman.containsAnystrArray4, false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null97nnul" + "'", str5.equals("null97nnul"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str6.equals("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l" + "'", str8.equals("nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l"));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test236");
        java.lang.String[] strArray2 = strman.Strman.chars("");
        java.lang.String str3 = strman.Strman.appendArray("006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3.equals("006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test237");
        boolean boolean2 = strman.Strman.endsWith("null97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnulnull97Nnul", "Null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull9ihiH7");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test238");
        java.lang.String str1 = strman.Strman.base64Encode("00680069002d
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MDA2ODAwNjkwMDJkMDA2ODAwNjkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMxMDAzNTAwMzUwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMxMDAzNTAwMzcwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMyMDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMyMDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMzMDAzNTAwMzMwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMyMDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMxMDAzNTAwMzUwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNzAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNDAwMzkwMDM5MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzUwMDM1MDAzMzAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNDAwMzEwMDMwMDAzMTAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzEwMDMwMDAzMDAwMzEwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMxMDAzMTAwMzAwMDMxMDAzMDAwMzAwMDMx" + "'", str1.equals("MDA2ODAwNjkwMDJkMDA2ODAwNjkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMxMDAzNTAwMzUwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMxMDAzNTAwMzcwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMyMDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMyMDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMzMDAzNTAwMzMwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzMTAwMzUwMDM3MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzQwMDM5MDAzOTAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNTAwMzUwMDMzMDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMyMDAzMTAwMzAwMDMxMDAzNDAwMzgwMDM0MDAzODAwMzUwMDMxMDAzNTAwMzUwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzEwMDM1MDAzNzAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNDAwMzkwMDM5MDAzNDAwMzgwMDM0MDAzODAwMzUwMDM0MDAzOTAwMzkwMDM0MDAzODAwMzQwMDM4MDAzNTAwMzUwMDM1MDAzMzAwMzQwMDM4MDAzNDAwMzgwMDM1MDAzNDAwMzEwMDMwMDAzMTAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzEwMDMwMDAzMDAwMzEwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMwMDAzMDAwMzAwMDMxMDAzMTAwMzAwMDMxMDAzMDAwMzAwMDMx"));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test239");
        java.lang.String[] strArray3 = strman.Strman.chars("null");
        java.lang.String str4 = strman.Strman.prepend("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", strArray3);
        java.lang.String str5 = strman.Strman.format("N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str4.equals("nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str5.equals("N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test240");
        java.lang.String str1 = strman.Strman.transliterate("1null97null97 nnul n u l l97 n n u l!ih!HI!HI!HI!6");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1null97null97 nnul n u l l97 n n u l!ih!HI!HI!HI!6" + "'", str1.equals("1null97null97 nnul n u l l97 n n u l!ih!HI!HI!HI!6"));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test241");
        java.lang.String str1 = strman.Strman.underscored("00055000570010800108001170011000104001050010400105000550005500057001080010800117001100005700055000570010800108001170011000076000550005700108001080011700110000760005500057001080010800117001100008500055000570010800108001170011000078000550005700108001080011700110");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00055000570010800108001170011000104001050010400105000550005500057001080010800117001100005700055000570010800108001170011000076000550005700108001080011700110000760005500057001080010800117001100008500055000570010800108001170011000078000550005700108001080011700110" + "'", str1.equals("00055000570010800108001170011000104001050010400105000550005500057001080010800117001100005700055000570010800108001170011000076000550005700108001080011700110000760005500057001080010800117001100008500055000570010800108001170011000078000550005700108001080011700110"));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test242");
        int int3 = strman.Strman.lastIndexOf("-1", "i006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037h006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037i006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037h006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037h006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037i006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037h006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037i48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test243");
        try {
            java.lang.String str3 = strman.Strman.decode("1null97null97 nnul n u l l97 n n u l!ih!HI!HI!HI!6", 1, 404);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 404 greater than Character.MAX_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test244");
        java.lang.String str1 = strman.Strman.toStudlyCase("lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Lunn79llun" + "'", str1.equals("Lunn79llun"));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test245");
        java.lang.String str1 = strman.Strman.removeSpaces("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str1.equals("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test246");
        boolean boolean3 = strman.Strman.contains("", "0004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056NULL97NNUL!ih", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test247");
        java.lang.String str3 = strman.Strman.leftPad("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "", 404);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str3.equals("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test248");
        java.lang.String str2 = strman.Strman.repeat("nullnull97nnulnull97", 4944);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test249");
        java.lang.String[] strArray3 = strman.Strman.words("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        java.util.List<java.lang.String> strList4 = strman.Strman.zip(strArray3);
        java.lang.String[] strArray5 = strman.Strman.removeEmptyStrings(strArray3);
        java.lang.String str6 = strman.Strman.prepend("4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056" + "'", str6.equals("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056"));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test250");
        int int4 = strman.Strman.indexOf("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", "", 1, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test251");
        java.lang.String str1 = strman.Strman.swapCase("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH" + "'", str1.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH-IH"));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test252");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test253");
        try {
            java.lang.String str3 = strman.Strman.decode("hi-hi", 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 0 less than Character.MIN_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test254");
        java.lang.String str2 = strman.Strman.repeat("ihi H", 540);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "ihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi H" + "'", str2.equals("ihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi H"));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test255");
        java.lang.String[] strArray4 = strman.Strman.words("", "hi!");
        java.lang.String str5 = strman.Strman.format("null", strArray4);
        java.util.List<java.lang.String> strList6 = strman.Strman.zip(strArray4);
        java.lang.Class<?> wildcardClass7 = strArray4.getClass();
        boolean boolean9 = strman.Strman.containsAny("MDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAxMDAxMTEwMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwMTAxMTAxMDAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaS1o", strArray4, true);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null" + "'", str5.equals("null"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test256");
        java.lang.String str1 = strman.Strman.dasherize("109700078001170010800108000570005500110001100011700108");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "109700078001170010800108000570005500110001100011700108" + "'", str1.equals("109700078001170010800108000570005500110001100011700108"));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test257");
        java.lang.String str3 = strman.Strman.leftPad("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul", "", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul" + "'", str3.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul"));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test258");
        java.lang.String str1 = strman.Strman.toCamelCase("4549");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "4549" + "'", str1.equals("4549"));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test259");
        java.lang.String str1 = strman.Strman.capitalize("35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "35blvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxm000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi" + "'", str1.equals("35blvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxmtlvmte5vtexovuxm000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi"));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test260");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test261");
        java.lang.String str1 = strman.Strman.removeNonWords("YmxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TTAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3ODAwMDAwMDAwNTUwMDAwMDAwMDU1MDAwMDAwMDA1NzAwMDAwMDAwNzYwMDAwMDAwMDc2MDAwMDAwMDA4NTAwMDAwMDAwNzgwMDAwMDAwMDU3MDAwMDAwMDA1NTAwMDAwMDAwNTcwMDAwMDAwMDc2MDAwMDAwMDA3NjAwMDAwMDAwODUwMDAwMDAwMDc4MDAwMDAwMDEwODAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3ODAwMDAwMDAxMDgwMDAwMDAwMDU1MDAwMDAwMDA1NzAwMDAwMDAwNzYwMDAwMDAwMDc2MDAwMDAwMDA4NTAwMDAwMDAwNzgwMDAwMDAwMTE3MDAwMDAwMDA1NTAwMDAwMDAwNTcwMDAwMDAwMDc2MDAwMDAwMDA3NjAwMDAwMDAwODUwMDAwMDAwMDc4MDAwMDAwMDExMDAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3OGhpaGk=");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "YmxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TTAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3ODAwMDAwMDAwNTUwMDAwMDAwMDU1MDAwMDAwMDA1NzAwMDAwMDAwNzYwMDAwMDAwMDc2MDAwMDAwMDA4NTAwMDAwMDAwNzgwMDAwMDAwMDU3MDAwMDAwMDA1NTAwMDAwMDAwNTcwMDAwMDAwMDc2MDAwMDAwMDA3NjAwMDAwMDAwODUwMDAwMDAwMDc4MDAwMDAwMDEwODAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3ODAwMDAwMDAxMDgwMDAwMDAwMDU1MDAwMDAwMDA1NzAwMDAwMDAwNzYwMDAwMDAwMDc2MDAwMDAwMDA4NTAwMDAwMDAwNzgwMDAwMDAwMTE3MDAwMDAwMDA1NTAwMDAwMDAwNTcwMDAwMDAwMDc2MDAwMDAwMDA3NjAwMDAwMDAwODUwMDAwMDAwMDc4MDAwMDAwMDExMDAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3OGhpaGk" + "'", str1.equals("YmxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TVRsVk1URTVWVEV4T1ZVeE1UbFZNVEU1VlRFeE9WVXhNVGxWTVRFNVZURXhPVlV4TTAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3ODAwMDAwMDAwNTUwMDAwMDAwMDU1MDAwMDAwMDA1NzAwMDAwMDAwNzYwMDAwMDAwMDc2MDAwMDAwMDA4NTAwMDAwMDAwNzgwMDAwMDAwMDU3MDAwMDAwMDA1NTAwMDAwMDAwNTcwMDAwMDAwMDc2MDAwMDAwMDA3NjAwMDAwMDAwODUwMDAwMDAwMDc4MDAwMDAwMDEwODAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3ODAwMDAwMDAxMDgwMDAwMDAwMDU1MDAwMDAwMDA1NzAwMDAwMDAwNzYwMDAwMDAwMDc2MDAwMDAwMDA4NTAwMDAwMDAwNzgwMDAwMDAwMTE3MDAwMDAwMDA1NTAwMDAwMDAwNTcwMDAwMDAwMDc2MDAwMDAwMDA3NjAwMDAwMDAwODUwMDAwMDAwMDc4MDAwMDAwMDExMDAwMDAwMDAwNTUwMDAwMDAwMDU3MDAwMDAwMDA3NjAwMDAwMDAwNzYwMDAwMDAwMDg1MDAwMDAwMDA3OGhpaGk"));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test262");
        boolean boolean4 = strman.Strman.endsWith("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH", "ihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi Hihi H", (-1), false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test263");
        java.lang.String str2 = strman.Strman.removeRight("hi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97", "001040ll97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str2.equals("hi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test264");
        boolean boolean2 = strman.Strman.contains
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test265");
        boolean boolean2 = strman.Strman.inequal("006e0075006c006c00390037hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnulln-u-l-l97-n-n-u-l");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test266");
        boolean boolean1 = strman.Strman.isUpperCase("hihiHI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-nULL97NNULHI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-HI-NULL97HI-00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test267");
        java.lang.String[] strArray2 = strman.Strman.chars("NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        try {
            java.util.Optional<java.lang.String> strOptional3 = strman.Strman.trimEnd("1null97null97_nnul_n_u_l_l97_n_n_u_lih", strArray2);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Illegal/unsupported escape sequence near index 3\r\n[N\\U\\L\\L\\9\\7\\N\\ \\U\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l\\n\\u\\l\\l]+$\r\n   ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test268");
        int int2 = strman.Strman.lastIndexOf("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi_h1null97null97_nnul_n_u_l_l97_n_n_u_lih");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test269");
        java.lang.String str1 = strman.Strman.htmlDecode("00072001050010400105001050010400105000950010400104001050009500104001050005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530004900053000530005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530004900053000550005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000057000570005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000057000570005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005100053000510005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000049000480004900052000560005200056000530004900053000530005200056000520005600053000490005300055000520005600052000560005300052000570005700052000560005200056000530005200057000570005200056000520005600053000530005300051000520005600052000560005300052000490004800049");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test270");
        boolean boolean2 = strman.Strman.contains("5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", "5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test271");
        java.lang.String str1 = strman.Strman.toKebabCase("Hibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mhibl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mtl Vmte5vtex Ovux Mnull97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mnull97" + "'", str1.equals("hibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mnull97"));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test272");
        java.lang.String str3 = strman.Strman.rightPad("00300030003100310030003000300031003100370030003000310030003800300030003100300038003000300030003500370030003000300035003500300030003000370038003000300031003100300030003000310031003700300030003100300038nullnullnullnullnullnullnullnullnullnull", "10145848435558484994584849945848475158484551584841012584841014584843555848499458484994584847515848455158484353584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484751584841014584843555848499458484994584847515848455158484551584841014584843555848499458484994584847515848455158484ih-ihh-ih-i", (int) (short) 100);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00300030003100310030003000300031003100370030003000310030003800300030003100300038003000300030003500370030003000300035003500300030003000370038003000300031003100300030003000310031003700300030003100300038nullnullnullnullnullnullnullnullnullnull" + "'", str3.equals("00300030003100310030003000300031003100370030003000310030003800300030003100300038003000300030003500370030003000300035003500300030003000370038003000300031003100300030003000310031003700300030003100300038nullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test273");
        long long4 = strman.Strman.countSubstr("", "Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", false, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test274");
        java.lang.String[] strArray1 = null;
        try {
            java.util.Optional<java.lang.String> strOptional2 = strman.Strman.trimEnd("Hi", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array 'strings' can't be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test275");
        java.lang.String str3 = strman.Strman.truncate("0004900108001170011000110000550005700108001080011700110", 505, "00104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300110001170010800108000570005579llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0004900108001170011000110000550005700108001080011700110" + "'", str3.equals("0004900108001170011000110000550005700108001080011700110"));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test276");
        java.lang.String[] strArray1 = strman.Strman.chars("00104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300110001170010800108000570005579llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test277");
        java.lang.String str3 = strman.Strman.ensureLeft("null97nULL97", "ihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "ihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97null97nULL97" + "'", str3.equals("ihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97null97nULL97"));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test278");
        java.lang.String str1 = strman.Strman.humanize("n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul-hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97-nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "N u l l97 n n u lhi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi null97hi null97nnul hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97 nnul" + "'", str1.equals("N u l l97 n n u lhi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi null97hi null97nnul hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97 nnul"));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test279");
        boolean boolean2 = strman.Strman.contains("N u l l97 n n u lhi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi hi null97hi null97nnul hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97 nnul", "hi-hi0000000001001000000000000110100197-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test280");
        java.lang.String[] strArray4 = strman.Strman.between("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "Null", "nullnull97nnul");
        boolean boolean6 = strman.Strman.containsAll("nIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101uIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101lIHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101l", strArray4, true);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test281");
        int int4 = strman.Strman.lastIndexOf("a-whp-x2gf006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 50, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test282");
        boolean boolean2 = strman.Strman.inequal("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", "1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test283");
        java.lang.String str3 = strman.Strman.rightPad
        org.junit.Assert.assertTrue("'" + strstr3.equals
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test284");
        java.lang.String str1 = strman.Strman.htmlEncode("hinullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hiih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test285");
        boolean boolean1 = strman.Strman.isBlank("nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test286");
        java.lang.String str1 = strman.Strman.transliterate("Hi!hi!NULL97=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi!hi!NULL97=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histr1.equals("Hi!hi!NULL97=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test287");
        java.lang.String str1 = strman.Strman.humanize("00077000680006500050000900008400065001190007800122000850011900077000680009000106000770006800065000500008900122000650011900077001220010700119000770006800077000510004800048000480005500056000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000490004900048000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00077000680006500050000900008400065001190007800122000850011900077000680009000106000770006800065000500008900122000650011900077001220010700119000770006800077000510004800048000480005500056000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000490004900048000480004800049000490004800048000480004900049000550004800048000490004800056" + "'", str1.equals("00077000680006500050000900008400065001190007800122000850011900077000680009000106000770006800065000500008900122000650011900077001220010700119000770006800077000510004800048000480005500056000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000490004900048000480004800049000490004800048000480004900049000550004800048000490004800056"));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test288");
        java.lang.String str3 = strman.Strman.removeLeft("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "TnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIW5udWxsOTdoaWhpaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhbnVsbDk3aGkhdW51bGw5N2hpaGloaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFudWxsOTdoaSFsbnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIWxudWxsOTc5bnVsbDk3N251bGw5Nw==", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str3.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test289");
        java.lang.String str3 = strman.Strman.ensureLeft("00680069002dtrue);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0000000001001000000000000110100100680069002dstr3.equals("0000000001001000000000000110100100680069002d
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test290");
        java.lang.String str2 = strman.Strman.ensureLeft("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "9ihiH7");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "9ihiH7006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str2.equals("9ihiH7006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test291");
        java.lang.String str1 = strman.Strman.base64Encode("NULL97hihi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "TlVMTDk3aGloaQ==" + "'", str1.equals("TlVMTDk3aGloaQ=="));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test292");
        java.lang.String[] strArray5 = strman.Strman.split("nullnull97nnulih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        java.lang.String str6 = strman.Strman.prependArray("97", strArray5);
        java.lang.String str7 = strman.Strman.format("null97nnul1097null971097", strArray5);
        java.lang.String str8 = strman.Strman.prepend("null97", strArray5);
        java.util.List<java.lang.String> strList9 = strman.Strman.zip(strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "nullnull97nnul97" + "'", str6.equals("nullnull97nnul97"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "null97nnul1097null971097" + "'", str7.equals("null97nnul1097null971097"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "nullnull97nnulnull97" + "'", str8.equals("nullnull97nnulnull97"));
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test293");
        java.lang.String str1 = strman.Strman.reverse("Ihi Hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihH ihI" + "'", str1.equals("79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihH ihI"));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test294");
        java.lang.String[] strArray3 = strman.Strman.chop("006e0075006c006c0039003700390037", (int) (short) 1);
        java.lang.String str4 = strman.Strman.format("Null97nnul1097null971097nULL97NNULNullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101hihi", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Null97nnul1097null971097nULL97NNULNullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101hihi" + "'", str4.equals("Null97nnul1097null971097nULL97NNULNullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101hihi"));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test295");
        boolean boolean2 = strman.Strman.endsWith("", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test296");
        java.lang.String str1 = strman.Strman.capitalize("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh tl vmtdk3" + "'", str1.equals("Sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh sekh tl vmtdk3"));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test297");
        java.lang.String str1 = strman.Strman.removeSpaces("Hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str1.equals("Hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test298");
        java.lang.String str1 = strman.Strman.toCamelCase("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test299");
        java.lang.String str1 = strman.Strman.humanize("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97"));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test300");
        java.lang.String str4 = strman.Strman.replacei-hinull97nnul", "hi-hi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001", false);
        org.junit.Assert.assertTrue("'" + strstr4.equals("00000000011010000000000001101001000000000010110100000000011010000000000001101001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101010000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101010000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110111000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101010000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011001000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101010000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011001000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101010000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011001100000000001101010000000000110011000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101010000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011001000000000001100010000000000110000000000000011000100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000001101001000000000110100000000000011010010000000001001000"));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test301");
        java.lang.String str1 = strman.Strman.dasherize("0048006900480069");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0048006900480069" + "'", str1.equals("0048006900480069"));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test302");
        java.lang.String str3 = strman.Strman.removeLeft("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97", "null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str3.equals("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test303");
        java.lang.String str2 = strman.Strman.repeat("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3", (int) (short) 0);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test304");
        java.lang.String str3 = strman.Strman.inserthI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 330);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000000000hstr3.equals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000000000h
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test305");
        long long2 = strman.Strman.countSubstrih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", "53");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test306");
        java.lang.String[] strArray4 = strman.Strman.chop("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", (int) (short) 0);
        java.lang.String str5 = strman.Strman.format("hi-hinull97nnul", strArray4);
        boolean boolean6 = strman.Strman.containsAny("IHI97HHI97HI48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101n-u-l-l97-n-n-u-lhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul-hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97-nnul", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi-hinull97nnul" + "'", str5.equals("hi-hinull97nnul"));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test307");
        java.lang.String str2 = strman.Strman.repeat("tNvSBdK3BM51Ba==", 656);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test308");
        java.lang.String str1 = strman.Strman.escapeRegExp("Null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Null97" + "'", str1.equals("Null97"));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test309");
        java.lang.String str1 = strman.Strman.rightTrim("Hihiihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hihiihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("Hihiihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test310");
        java.lang.String str1 = strman.Strman.formatNumber((long) 540);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "540" + "'", str1.equals("540"));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test311");
        int int3 = strman.Strman.lastIndexOf("110117108108575500000000017900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n77900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97n97900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nl7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nu7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nn7900000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97l00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97u00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97nih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test312");
        java.lang.String str1 = strman.Strman.collapseWhitespace("nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl" + "'", str1.equals("nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl"));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test313");
        boolean boolean3 = strman.Strman.contains("10010110000000000001001000000000", "00110001170010800108000570005500078001100011700108hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test314");
        java.lang.String str1 = strman.Strman.decEncode("006e0075006c006c006e0075006c006c00390037006e006e0075006c");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0004800048000540010100048000480005500053000480004800054000990004800048000540009900048000480005400101000480004800055000530004800048000540009900048000480005400099000480004800051000570004800048000510005500048000480005400101000480004800054001010004800048000550005300048000480005400099" + "'", str1.equals("0004800048000540010100048000480005500053000480004800054000990004800048000540009900048000480005400101000480004800055000530004800048000540009900048000480005400099000480004800051000570004800048000510005500048000480005400101000480004800054001010004800048000550005300048000480005400099"));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test315");
        java.lang.String str1 = strman.Strman.base64Encode("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037-null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5Nw==" + "'", str1.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5Nw=="));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test316");
        java.lang.String[] strArray6 = strman.Strman.split("97", "");
        boolean boolean7 = strman.Strman.containsAll("Hihi", strArray6);
        java.lang.String str8 = strman.Strman.appendArray("", strArray6);
        java.lang.String str10 = strman.Strman.join(strArray6, "ihiH");
        java.lang.String str11 = strman.Strman.appendArray("00000000010010000000000001101001", strArray6);
        boolean boolean13 = strman.Strman.containsAnystrArray6, false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "97" + "'", str8.equals("97"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "9ihiH7" + "'", str10.equals("9ihiH7"));
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "0000000001001000000000000110100197" + "'", str11.equals("0000000001001000000000000110100197"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test317");
        java.lang.String str2 = strman.Strman.ensureRight("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3", "MDAwNzIwMDEwNTAwMTA0MDAxMDUwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDExMDAwMTE3MDAxMDgwMDEwODAwMDU3MDAwNTUwMDEwNDAwMTA1MDAwMzM=");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDAwNzIwMDEwNTAwMTA0MDAxMDUwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDExMDAwMTE3MDAxMDgwMDEwODAwMDU3MDAwNTUwMDEwNDAwMTA1MDAwMzM=" + "'", str2.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDAwNzIwMDEwNTAwMTA0MDAxMDUwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDEwNDAwMTA1MDAwMzMwMDExMDAwMTE3MDAxMDgwMDEwODAwMDU3MDAwNTUwMDEwNDAwMTA1MDAwMzM="));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test318");
        int int3 = strman.Strman.lastIndexOf("Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055", "79llun779llun979llunL79llunL79llunU79llunN79lluN", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test319");
        java.lang.String str2 = strman.Strman.repeat("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!000000000100111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100", (int) (short) 100);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test320");
        java.lang.String[] strArray3 = strman.Strman.chars("null");
        java.lang.String[] strArray4 = strman.Strman.removeEmptyStrings(strArray3);
        boolean boolean6 = strman.Strman.containsAny("Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3", strArray3, true);
        java.lang.String str7 = strman.Strman.append("Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97null" + "'", str7.equals("Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97null"));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test321");
        boolean boolean2 = strman.Strman.unequalih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihhiHinull97nnul");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test322");
        java.lang.String[] strArray2 = strman.Strman.lines("33727333727333727333");
        java.lang.String str3 = strman.Strman.prepend("Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055", strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "33727333727333727333Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055" + "'", str3.equals("33727333727333727333Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055"));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test323");
        java.lang.String str3 = strman.Strman.removeLeftull000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "7710097503212211697119321101223211711932109100122106321091009750321211223297119321091221071193210910010951110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556484848484848484853534848484848484848535348484848484848485355484848484848484855544848484848484848555448484848484848485653484848484848484855564848484848484848535548484848484848485353484848484848484853554848484848484848555448484848484848485554484848484848484856534848484848484848555648484848484848494856484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556484848484848484948564848484848484848535348484848484848485355484848484848484855544848484848484848555448484848484848485653484848484848484855564848484848484849495548484848484848485353484848484848484853554848484848484848555448484848484848485554484848484848484856534848484848484848555648484848484848494948484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556104105104105" + "'", str3.equals
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test324");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hiMw==", 64);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test325");
        java.lang.String[] strArray1 = strman.Strman.lines("Null97nnul1097null971097nULL97NNULNullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101hihi");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test326");
        java.lang.String str2 = strman.Strman.removeRight("N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str2.equals("N-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test327");
        java.lang.String str4 = strman.Strman.replace("Hi!hi!hi!hi!NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "4549", false);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Hi!hi!hi!hi!NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str4.equals("Hi!hi!hi!hi!NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test328");
        java.lang.String str1 = strman.Strman.decEncode("006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test329");
        try {
            java.lang.String str3 = strman.Strman.slice("10145848435558484994584849945848475158484551584841012584841014584843555848499458484994584847515848455158484353584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484751584841014584843555848499458484994584847515848455158484551584841014584843555848499458484994584847515848455158484ih-ihh_ihI", 61, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -26");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test330");
        java.lang.String[] strArray4 = new java.lang.String[] { "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "hi-hinull97nnul", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi};
        boolean boolean5 = strman.Strman.containsAll("003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003100300030003000310031003700300030003100300038003000300031003000380030003000300035003700300030003000350035", strArray4);
        java.util.List<java.lang.String> strList6 = strman.Strman.zip(strArray4);
        java.lang.String[] strArray7 = strman.Strman.removeEmptyStrings(strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test331");
        java.lang.String str1 = strman.Strman.transliterate("nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!nullnull97nnulnull971lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!nullnull97nnulnull971lunn79llun" + "'", str1.equals("nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!nullnull97nnulnull971lunn79llun"));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test332");
        java.lang.String str1 = strman.Strman.transliterate("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str1.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test333");
        java.lang.String str1 = strman.Strman.leftTrim("00055000570010800108001170011000104001050010400105000550005500057001080010800117001100005700055000570010800108001170011000076000550005700108001080011700110000760005500057001080010800117001100008500055000570010800108001170011000078000550005700108001080011700110");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00055000570010800108001170011000104001050010400105000550005500057001080010800117001100005700055000570010800108001170011000076000550005700108001080011700110000760005500057001080010800117001100008500055000570010800108001170011000078000550005700108001080011700110" + "'", str1.equals("00055000570010800108001170011000104001050010400105000550005500057001080010800117001100005700055000570010800108001170011000076000550005700108001080011700110000760005500057001080010800117001100008500055000570010800108001170011000078000550005700108001080011700110"));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test334");
        java.lang.String str3 = strman.Strman.safeTruncate("00110001170010800108000570005500078001100011700108", 5, "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97-nnull97-unull97-lnull97-lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97-nnull97-unull97-lnull97-lnull979null977null97" + "'", str3.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97-nnull97-unull97-lnull97-lnull979null977null97"));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test335");
        java.lang.String str1 = strman.Strman.transliterate("32");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "32" + "'", str1.equals("32"));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test336");
        int int4 = strman.Strman.lastIndexOf("97-n-n-u-l", "nULL97NNUL", 505, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test337");
        int int4 = strman.Strman.indexOf("480", "", 298, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test338");
        java.lang.String str2 = strman.Strman.last("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", 0);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test339");
        java.lang.String str1 = strman.Strman.lowerFirst("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test340");
        java.lang.String str1 = strman.Strman.htmlEncode("79llunhihi779llun979llunL79llunL79llunU79llunN79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test341");
        java.lang.String str1 = strman.Strman.reverse("9ihiH7006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih73009300c600c6005700e6007Hihi9" + "'", str1.equals("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih73009300c600c6005700e6007Hihi9"));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test342");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test343");
        java.lang.String str1 = strman.Strman.swapCase("000000000100100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110100000000000011010010000000000100001");
        org.junit.Assert.assertTrue("'" + strstr1.equals("000000000100100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110100000000000011010010000000000100001000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110100000000000011010010000000000100001"));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test344");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("Null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test345");
        java.lang.String str1 = strman.Strman.base64Encode("hinullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hiih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "aGludWxsaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDAxMDAwMDAwMDAwIWloNzlsbHVuIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTU0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTc0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUzNTM0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyMTAxNDg0ODUxNTU0ODQ4NTE1NzQ4NDg1NDk5NDg0ODU0OTk0ODQ4NTU1MzQ4NDg1NDEwMQ==" + "'", str1.equals("aGludWxsaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMTAxMDExMTAwMDAwMDAwMDAxMTEwMTEwMDAwMDAwMDAwMDExMDExMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDAxMDAwMDAwMDAwIWloNzlsbHVuIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloIWloaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTU0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTc0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUzNTM0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyMTAxNDg0ODUxNTU0ODQ4NTE1NzQ4NDg1NDk5NDg0ODU0OTk0ODQ4NTU1MzQ4NDg1NDEwMQ=="));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test346");
        java.lang.String str3 = strman.Strman.encode("hihi", 4, 4);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1220122112201221" + "'", str3.equals("1220122112201221"));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test347");
        java.lang.String str3 = strman.Strman.surround("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk
        org.junit.Assert.assertTrue("'" + strekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk30000000001001000000000000110100197" + "'", str3.equalsekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk30000000001001000000000000110100197"));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test348");
        java.lang.String str2 = strman.Strman.toDecamelize("hi-hi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001", "001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hiih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihhi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001" + "'", str2.equals("hi001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihhi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001"));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test349");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("0033");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test350");
        java.lang.String str1 = strman.Strman.rightTrim(";lcxe&llunllun;lcxe&llunllun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + ";lcxe&llunllun;lcxe&llunllun" + "'", str1.equals(";lcxe&llunllun;lcxe&llunllun"));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test351");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!5");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test352");
        java.lang.String str1 = strman.Strman.hexEncode("000480004800048000480004800048000480004800048000480004900049000480004800049000490004800048000480004800048000480004800048000480004800049000490004800049000480004900110001170010800108000570005500110001100011700108");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test353");
        java.lang.String str1 = strman.Strman.collapseWhitespace("nullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test354");
        try {
            java.lang.String str3 = strman.Strman.slice("nzlsb_hvu_nzc5b_gx1bjk3_owxsd_w5_mnzlsb_hvu_tdc5b_gx1bl_u3_owxsd_w5_onzlsb_hvu", (int) (byte) 10, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test355");
        java.lang.String str3 = strman.Strman.encode("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", (int) (short) 100, (int) '#');
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test356");
        try {
            java.lang.String str3 = strman.Strman.truncate("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", 1, "000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000490004800048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004900049000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000490004800056000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000480005600048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004800053000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000480005300053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1199");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test357");
        boolean boolean2 = strman.Strman.unequal("null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "SEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhTlVMTDk330");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test358");
        java.lang.String str4 = strman.Strman.replace("n-u-l-l97hihi", "9ihi H7", "nullnull97nnul", true);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "n-u-l-l97hihi" + "'", str4.equals("n-u-l-l97hihi"));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test359");
        java.lang.String str1 = strman.Strman.toStudlyCase("hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HiHihiHihiHihiHihiHihiHihiHihiHihiHihiHi" + "'", str1.equals("HiHihiHihiHihiHihiHihiHihiHihiHihiHihiHi"));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test360");
        java.lang.String str1 = strman.Strman.htmlDecode("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test361");
        boolean boolean3 = strman.Strman.endsWith("1097null97", "Hihiihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test362");
        java.lang.String str3 = strman.Strman.rightPadih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", 4944);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test363");
        java.lang.String str1 = strman.Strman.base64Encode("Hihiihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "SGloaWloaV9oaGlfaGk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTU0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTc0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUzNTM0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyMTAxNDg0ODUxNTU0ODQ4NTE1NzQ4NDg1NDk5NDg0ODU0OTk0ODQ4NTU1MzQ4NDg1NDEwMQ==" + "'", str1.equals("SGloaWloaV9oaGlfaGk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTU0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUxNTc0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyOTk0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUzNTM0ODQ4NTE1NTQ4NDg1MTU3NDg0ODU0OTk0ODQ4NTQ5OTQ4NDg1NTUzNDg0ODU0MTAxNDg0ODUyMTAxNDg0ODUxNTU0ODQ4NTE1NzQ4NDg1NDk5NDg0ODU0OTk0ODQ4NTU1MzQ4NDg1NDEwMQ=="));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test364");
        java.lang.String str3 = strman.Strman.surround("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000 ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih", "lunn-79llun!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih-lunn79llun-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihl-u-n-n-79l-l-u-n", "006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "lunn-79llun!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih-lunn79llun-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihl-u-n-n-79l-l-u-n001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000 ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih006e0075006c006c00390037" + "'", str3.equals("lunn-79llun!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih-lunn79llun-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihl-u-n-n-79l-l-u-n001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000 ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih ih006e0075006c006c00390037"));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test365");
        java.lang.String str3 = strman.Strman.ensureLeft("Null97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "7710097503212211697119321101223211711932109100122106321091009750321211223297119321091221071193210910010951110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556484848484848484853534848484848484848535348484848484848485355484848484848484855544848484848484848555448484848484848485653484848484848484855564848484848484848535548484848484848485353484848484848484853554848484848484848555448484848484848485554484848484848484856534848484848484848555648484848484848494856484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556484848484848484948564848484848484848535348484848484848485355484848484848484855544848484848484848555448484848484848485653484848484848484855564848484848484849495548484848484848485353484848484848484853554848484848484848555448484848484848485554484848484848484856534848484848484848555648484848484848494948484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556104105104105", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "7710097503212211697119321101223211711932109100122106321091009750321211223297119321091221071193210910010951110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108110117108108484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556484848484848484853534848484848484848535348484848484848485355484848484848484855544848484848484848555448484848484848485653484848484848484855564848484848484848535548484848484848485353484848484848484853554848484848484848555448484848484848485554484848484848484856534848484848484848555648484848484848494856484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556484848484848484948564848484848484848535348484848484848485355484848484848484855544848484848484848555448484848484848485653484848484848484855564848484848484849495548484848484848485353484848484848484853554848484848484848555448484848484848485554484848484848484856534848484848484848555648484848484848494948484848484848484853534848484848484848535548484848484848485554484848484848484855544848484848484848565348484848484848485556104105104105Null97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str3.equalsull97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test366");
        java.lang.String str1 = strman.Strman.formatNumber(0L);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0" + "'", str1.equals("0"));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test367");
        java.lang.String str1 = strman.Strman.htmlDecode("3kdtmV lT hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test368");
        java.lang.String str1 = strman.Strman.dasherize("hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi" + "'", str1.equals("hi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hihi-hi"));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test369");
        java.lang.String str1 = strman.Strman.collapseWhitespace("null97nnul1097null971097");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97nnul1097null971097" + "'", str1.equals("null97nnul1097null971097"));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test370");
        java.lang.String str1 = strman.Strman.slugify("003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003100300030003000310031003700300030003100300038003000300031003000380030003000300035003700300030003000350035");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test371");
        int int2 = strman.Strman.lastIndexOf("006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test372");
        java.lang.String str1 = strman.Strman.toSnakeCase("hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97" + "'", str1.equals("hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97"));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test373");
        java.lang.String[] strArray3 = strman.Strman.between("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037", "aWhpX2gihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97null97nULL97");
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test374");
        java.lang.String str2 = strman.Strman.ensureLeft("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97hihihi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull
        org.junit.Assert.assertTrue("'" + strnull97null97nnull97unull97lnull97lnull979null977null97hihihi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str2.equalsnull97null97nnull97unull97lnull97lnull979null977null97hihihi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test375");
        java.lang.String str1 = strman.Strman.swapCase
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test376");
        java.lang.String str1 = strman.Strman.decEncode("00000000001100110000000000110101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0004800048000480004800048000480004800048000480004800049000490004800048000490004900048000480004800048000480004800048000480004800048000490004900048000490004800049" + "'", str1.equals("0004800048000480004800048000480004800048000480004800049000490004800048000490004900048000480004800048000480004800048000480004800048000490004900048000490004800049"));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test377");
        java.lang.String str3 = strman.Strman.safeTruncate("!ihnull", (int) (short) 0, "TnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIW5udWxsOTdoaWhpaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhaGkhbnVsbDk3aGkhdW51bGw5N2hpaGloaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFoaSFudWxsOTdoaSFsbnVsbDk3aGloaWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIWhpIW51bGw5N2hpIWxudWxsOTc5bnVsbDk3N251bGw5Nw==");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test378");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("860096001200c4005500e400e40073009300c400c4005500e400hi!LUNN79LLUNlunN79llun79llun1");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test379");
        java.lang.String[] strArray4 = strman.Strman.lines("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        java.lang.String str5 = strman.Strman.prepend("null97", strArray4);
        java.util.List<java.lang.String> strList6 = strman.Strman.zip(strArray4);
        boolean boolean8 = strman.Strman.containsAll("Hi!hi!", strArray4, true);
        java.lang.String[] strArray9 = strman.Strman.removeEmptyStrings(strArray4);
        java.lang.String str10 = strman.Strman.prepend("0004800048000480004800048000480004800048000480004800049000490004800048000490004900048000480004800048000480004800048000480004800048000490004900048000490004800049", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str5.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!0004800048000480004800048000480004800048000480004800049000490004800048000490004900048000480004800048000480004800048000480004800048000490004900048000490004800049" + "'", str10.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!0004800048000480004800048000480004800048000480004800049000490004800048000490004900048000480004800048000480004800048000480004800048000490004900048000490004800049"));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test380");
        java.lang.String str1 = strman.Strman.reverse("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "6500084000940008400084000550009400094000840008400084000940009400084000840006500055000840008400084000350003500084000840008400055000350008400084000840006500084000940008400084000650008400094000840008400055000940009400084000840008400094000940008400084000" + "'", str1.equals("6500084000940008400084000550009400094000840008400084000940009400084000840006500055000840008400084000350003500084000840008400055000350008400084000840006500084000940008400084000650008400094000840008400055000940009400084000840008400094000940008400084000"));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test381");
        boolean boolean1 = strman.Strman.isBlank("Null97Nnull97Unull97Lnull97Lnull979Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3null977null97NULL97Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test382");
        java.lang.String str1 = strman.Strman.startCase
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test383");
        long long2 = strman.Strman.countSubstr("001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", "null97nULL97");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test384");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("771228561nullnull97nnul");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test385");
        java.lang.String str1 = strman.Strman.decEncode("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test386");
        java.lang.String[] strArray1 = strman.Strman.words("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test387");
        boolean boolean2 = strman.Strman.contains("lunn79llun
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test388");
        java.lang.String[] strArray1 = strman.Strman.chars("Nnullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037hihiullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test389");
        java.lang.String[] strArray4 = strman.Strman.between("hi-hinull97nnul", "000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055", "MzU=");
        java.lang.String str6 = strman.Strman.join(strArray4, "30");
        java.lang.String str7 = strman.Strman.append("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str7.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test390");
        java.lang.String[] strArray2 = strman.Strman.lines("null97nnul1097null971097");
        boolean boolean3 = strman.Strman.containsAll("000780011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080011000117001080010800110001170010800108001100011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001100011700108001080005700055100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test391");
        java.lang.String[] strArray3 = strman.Strman.chars("null");
        java.lang.String str4 = strman.Strman.format("null97nnul", strArray3);
        java.lang.String[] strArray5 = strman.Strman.removeEmptyStrings(strArray3);
        java.lang.String str6 = strman.Strman.appendllun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "null97nnul" + "'", str4.equals("null97nnul"));
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "00104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300104001050003300110001170010800108000570005579llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llunnull" + "'", str6.equalsllun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llunnull"));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test392");
        java.lang.String str1 = strman.Strman.removeNonWords("0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004e00310030003100300030003000300030003000300030003000300030003000310031003000310030003000310030003000300030003000300030003000300030003100300031003100300031003000300030003000300030003000300030003100310030003100300030003000300030003000300030003000300030003000310031003000310030003000310030003000300030003000300030003000300031003100300031003100310030003000300030003000300030003000300030003100310031003000310030003100300030003000300030003000300030003000310031003000310031003000300030003000300030003000300030003000300031003100300031003100300030003000300030003000300030003000300030003000310031003100300030003100300030003000300030003000300030003000300031003100300031003100310030003000300030003000300030003000300031003100300031003100310030003000300030003000300030003000300030003100310030003100310031003000300030003000300030003000300030003000310031003100300031003000310030003000300030003000300030003000300031003100300031003100300030");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004estr1.equals("0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004e
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test393");
        java.lang.String str2 = strman.Strman.ensureLeft("Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055", "0000000001101001000000000110100000000000011010010000000001001000");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "0000000001101001000000000110100000000000011010010000000001001000Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055" + "'", str2.equals("0000000001101001000000000110100000000000011010010000000001001000Null000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055"));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test394");
        java.lang.String str2 = strman.Strman.toDecamelizeihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107" + "'", str2.equals
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test395");
        boolean boolean3 = strman.Strman.isEnclosedBetween("TlVMTDk3aGloaQ==", "00072001050010400105001050010400105000950010400104001050009500104001050005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530004900053000530005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530004900053000550005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000057000570005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000057000570005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005100053000510005200056000520005600053000490005300053000520005600052000560005300049000530005500052000560005200056000530005200057000570005200056000520005600053000520005700057000520005600052000560005300053000530005100052000560005200056000530005200049000480004900052000560005200056000530005000049000480004900052000560005200056000530004900053000530005200056000520005600053000490005300055000520005600052000560005300052000570005700052000560005200056000530005200057000570005200056000520005600053000530005300051000520005600052000560005300052000490004800049", "79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test396");
        java.lang.String str1 = strman.Strman.removeSpaces("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056" + "'", str1.equals("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056"));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test397");
        java.lang.String str1 = strman.Strman.swapCase("null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test398");
        java.lang.String[] strArray1 = null;
        try {
            boolean boolean3 = strman.Strman.containsAny("79llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun", strArray1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test399");
        int int4 = strman.Strman.indexOfnull97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108", 2, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test400");
        java.lang.String str2 = strman.Strman.ensureRight("000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055", "33727333727333727333");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "00078000850007600076000570005500110000780008500076000760005700055001170007800085000760007600057000550010800078000850007600076000570005500108000780008500076000760005700055000570007800085000760007600057000550005500078000850007600076000570005533727333727333727333" + "'", str2.equals("00078000850007600076000570005500110000780008500076000760005700055001170007800085000760007600057000550010800078000850007600076000570005500108000780008500076000760005700055000570007800085000760007600057000550005500078000850007600076000570005533727333727333727333"));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test401");
        java.lang.String str3 = strman.Strman.removeRight("97NNUL", "!HI!HI!HI!", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "97NNUL" + "'", str3.equals("97NNUL"));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test402");
        java.lang.String str2 = strman.Strman.toDecamelize("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "=g2xphwA000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str2.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test403");
        java.lang.String str2 = strman.Strman.ensureLeft("1097null97", "null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null971097null97" + "'", str2.equals("null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null971097null97"));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test404");
        boolean boolean2 = strman.Strman.isEnclosedBetween("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihinull97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5NzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNy1udWxsOTcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzctbnVsbDk3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3LW51bGw5Nw==");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test405");
        java.lang.String[] strArray3 = strman.Strman.split("00110000850007600076000570005500078000780008500076006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037", "hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        java.lang.String str4 = strman.Strman.format("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str4.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test406");
        java.lang.String str1 = strman.Strman.toStudlyCase("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037" + "'", str1.equals("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037"));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test407");
        java.lang.String str2 = strman.Strman.last("nullnull97nnul97", 1);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "7" + "'", str2.equals("7"));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test408");
        java.lang.String str3 = strman.Strman.truncate("0004800048000540010100048000480005500053000480004800054000990004800048000540009900048000480005400101000480004800055000530004800048000540009900048000480005400099000480004800051000570004800048000510005500048000480005400101000480004800054001010004800048000550005300048000480005400099", 0, "ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test409");
        int int1 = strman.Strman.length("n-u-l-l97-n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 203 + "'", int1 == 203);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test410");
        java.lang.String str1 = strman.Strman.reverse("001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histr1.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test411");
        java.lang.String str3 = strman.Strman.safeTruncate("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihiymx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_v_rs_vk1_u_r_t_v_w_v_e_v4_t1_z_ve_e1_ub_f_z_n_v_e_u1_vl_r_fe_e9_w_v_xh_n_v_gx_w_t_v_r_f_n_v_z_u_r_xh_p_vl_v4_t_t_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ew_o_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_d_aw_m_d_aw_m_d_ax_m_dgw_m_d_aw_m_d_aw_m_d_u1_m_d_aw_m_d_aw_m_d_a1_nz_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a4_n_t_aw_m_d_aw_m_d_aw_nzgw_m_d_aw_m_d_aw_m_t_e3_m_d_aw_m_d_aw_m_d_a1_n_t_aw_m_d_aw_m_d_aw_n_tcw_m_d_aw_m_d_aw_m_dc2_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_o_d_uw_m_d_aw_m_d_aw_m_dc4_m_d_aw_m_d_aw_m_d_ex_m_d_aw_m_d_aw_m_d_aw_n_t_uw_m_d_aw_m_d_aw_m_d_u3_m_d_aw_m_d_aw_m_d_a3_nj_aw_m_d_aw_m_d_aw_nz_yw_m_d_aw_m_d_aw_m_dg1_m_d_aw_m_d_aw_m_d_a3_o_ghpa_gk=", (int) (short) 10, "00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108" + "'", str3.equals("00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108"));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test412");
        java.lang.String str3 = strman.Strman.truncate("3kdtmV lT hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS hkeS", (int) ' ', "30");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "3kdtmV lT hkeS hkeS hkeS hkeS 30" + "'", str3.equals("3kdtmV lT hkeS hkeS hkeS hkeS 30"));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test413");
        java.lang.String[] strArray4 = strman.Strman.between("Hi!", "", "Null97nnul1097null971097");
        boolean boolean5 = strman.Strman.containsAny("hi-hi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test414");
        java.lang.String[] strArray3 = strman.Strman.words("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        java.lang.String str4 = strman.Strman.append("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", strArray3);
        boolean boolean6 = strman.Strman.containsAll("0030003000310030003400300030003100300035006e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c004e0055004c004c0031003100300031003100370031003000380031003000380035003700350035003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004estrArray3, false);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN" + "'", str4.equals("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN"));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test415");
        java.lang.String[] strArray4 = strman.Strman.chars("null");
        java.lang.String str5 = strman.Strman.format("null97nnul", strArray4);
        boolean boolean7 = strman.Strman.containsAll("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histrArray4, true);
        boolean boolean8 = strman.Strman.containsAny("1lunn79llun", strArray4);
        java.lang.String[] strArray9 = strman.Strman.removeEmptyStrings(strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null97nnul" + "'", str5.equals("null97nnul"));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test416");
        java.lang.String[] strArray1 = strman.Strman.chars("1-");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test417");
        java.lang.String str1 = strman.Strman.hexEncode("000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004estr1.equals("003000300030003000300030003000300030003100370039004c004c0055004e003700370039004c004c0055004e003900370039004c004c0055004e006c00370039004c004c0055004e006c00370039004c004c0055004e007500370039004c004c0055004e006e00370039004c004c0055004e
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test418");
        java.lang.String[] strArray2 = strman.Strman.words("hibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mhibl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mtl-vmte5vtex-ovux-mnull97", "hi-hi4848515548485157484854994848549948485553484854101484851554848515548485157484854994848549948485553484854101484851574848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484852994848515548485157484854994848549948485553484854101484853534848515548485157484854994848549948485553484854101484852101484851554848515748485499484854994848555348485410100000000010010000000000001101001");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test419");
        try {
            long long4 = strman.Strman.countSubstr("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull&UnderBar;null", "", true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test420");
        java.lang.String[] strArray1 = null;
        try {
            boolean boolean2 = strman.Strman.containsAll("", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test421");
        java.lang.String str1 = strman.Strman.slugify("97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97" + "'", str1.equals("97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97"));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test422");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) "1null97null97_nnul_n_u_l_l97_n_n_u_l!ih000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test423");
        java.lang.String[] strArray1 = strman.Strman.charsih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test424");
        java.lang.String str2 = strman.Strman.ensureRightihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97null97nULL97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000490004800048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004900049000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000490004800056000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000480005600048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004800053000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000480005300053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053ihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97null97nULL97" + "'", str2.equalsihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97null97nULL97"));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test425");
        boolean boolean1 = strman.Strman.isUpperCase("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test426");
        java.lang.String str2 = strman.Strman.removeLeft("nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", "7");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL" + "'", str2.equals("nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL"));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test427");
        java.lang.String str3 = strman.Strman.ensureLeftn_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullstr3.equals("n_u_l_l97_n_ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test428");
        java.lang.String str1 = strman.Strman.dasherize("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul" + "'", str1.equals("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-null97nnul"));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test429");
        boolean boolean2 = strman.Strman.unequal("tNvSBdK3BM51Ba==", "Hi\\ hi");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test430");
        int int3 = strman.Strman.lastIndexOf("48485151", "00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test431");
        java.lang.String str3 = strman.Strman.ensureLeft("7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hitrue);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test432");
        java.lang.String str2 = strman.Strman.ensureLeft("!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e!" + "'", str2.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e!"));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test433");
        java.lang.String str1 = strman.Strman.toSnakeCase("null33727333727333727333");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null33727333727333727333" + "'", str1.equals("null33727333727333727333"));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test434");
        java.lang.String str1 = strman.Strman.reverse("null97nnul1097null971097null97nnulnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10145848435558484994584849945848475158484551584841012584841014584843555848499458484994584847515848455158484353584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484751584841014584843555848499458484994584847515848455158484551584841014584843555848499458484994584847515848455158484ih-ihllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunlunn79llun790179llun7901lunn79llun" + "'", str1.equals("10145848435558484994584849945848475158484551584841012584841014584843555848499458484994584847515848455158484353584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484751584841014584843555848499458484994584847515848455158484551584841014584843555848499458484994584847515848455158484ih-ihllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunllunlunn79llun790179llun7901lunn79llun"));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test435");
        try {
            java.lang.String str2 = strman.Strman.last("Hi!", (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test436");
        java.lang.String str1 = strman.Strman.decEncode("hIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMNULL97");
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test437");
        long long4 = strman.Strman.countSubstr("00110001170010800108000570005500078001100011700108hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "null97null97Nnull97Unull97Lnull97Lnull979null977null97", true, false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test438");
        java.lang.String str3 = strman.Strman.truncate("860096001200c4005500e400e40073009300c400c4005500e400hi!LUNN79LLUNlunN79llun79llun1", 0, "nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!nullnull97nnulnull971lunn79llun");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test439");
        try {
            java.lang.String str3 = strman.Strman.decode("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hiint) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 1 less than Character.MIN_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test440");
        java.lang.String str1 = strman.Strman.slugify("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str1.equals("hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test441");
        java.lang.String str1 = strman.Strman.rightTrim("Lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Lunn79llun" + "'", str1.equals("Lunn79llun"));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test442");
        boolean boolean2 = strman.Strman.inequal("nULL97nNULL97uNULL97lNULL97l
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test443");
        java.lang.String[] strArray1 = strman.Strman.lines("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test444");
        java.lang.String str1 = strman.Strman.toCamelCase("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str1.equals("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test445");
        long long2 = strman.Strman.countSubstr("TlVMTDk3", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 nnull97 unull97 lnull97 lnull979null977null97 hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test446");
        java.lang.String str1 = strman.Strman.underscored("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ihMw==Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnulnull000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "mda2_ztaw_nz_uw_mdzj_mda2_yz_aw_mzkw_mdm3_mda0_ztaw_nm_uw_mdc1_mda2_yz_aw_nm_mw_mdm5_mdaz_nz_aw_ntuw_mdzl_mda3_ntaw_nm_mw_mdzj_mdaz_otaw_mzcw_mdrj_mda2_ztaw_nz_uw_mdzj_mda2_yz_aw_mzkw_mdm3_mda0_yz_aw_nm_uw_mdc1_mda2_yz_aw_nm_mw_mdm5_mdaz_nz_aw_mzkw_mdzl_mda3_ntaw_nm_mw_mdzj_mdaz_otaw_mzcw_mdm3_mda2_ztaw_nz_uw_mdzj_mda2_yz_aw_mzkw_mdmih79llun_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_mw==hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97_nnulnull000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055_null97n_null97u_null97l_null97l_null979_null977_null979710" + "'", str1.equals("mda2_ztaw_nz_uw_mdzj_mda2_yz_aw_mzkw_mdm3_mda0_ztaw_nm_uw_mdc1_mda2_yz_aw_nm_mw_mdm5_mdaz_nz_aw_ntuw_mdzl_mda3_ntaw_nm_mw_mdzj_mdaz_otaw_mzcw_mdrj_mda2_ztaw_nz_uw_mdzj_mda2_yz_aw_mzkw_mdm3_mda0_yz_aw_nm_uw_mdc1_mda2_yz_aw_nm_mw_mdm5_mdaz_nz_aw_mzkw_mdzl_mda3_ntaw_nm_mw_mdzj_mdaz_otaw_mzcw_mdm3_mda2_ztaw_nz_uw_mdzj_mda2_yz_aw_mzkw_mdmih79llun_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_ih_mw==hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97_nnulnull000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055_null97n_null97u_null97l_null97l_null979_null977_null979710"));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test447");
        boolean boolean3 = strman.Strman.contains("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "30", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test448");
        java.lang.String str1 = strman.Strman.toSnakeCase("771228561");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "771228561" + "'", str1.equals("771228561"));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test449");
        java.lang.String str3 = strman.Strman.ensureLeft("hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "Hi\\ hi", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Hi\\ hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str3.equals("Hi\\ hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test450");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("10", 10);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test451");
        java.lang.String str1 = strman.Strman.hexEncode
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00300030003000370032003000300031003000350030003000310030003400300030003100300035003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003100300030003000310031003700300030003100300038003000300031003000380030003000300035003700300030003000350035003000300031003000340030003000310030003500300030003000330033" + "'", str1.equals
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test452");
        boolean boolean1 = strman.Strman.isBlank("Nnullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037hihiullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test453");
        java.lang.String str1 = strman.Strman.humanize("9ihiH7");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "9ihi h7" + "'", str1.equals("9ihi h7"));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test454");
        long long4 = strman.Strman.countSubstr("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihihi", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e!", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test455");
        java.lang.String str1 = strman.Strman.leftTrim("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str1.equals("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test456");
        java.lang.String str3 = strman.Strman.leftPad("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97Mw==nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", 280);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test457");
        java.lang.String[] strArray3 = strman.Strman.words("006e0075006c006c00390037");
        java.lang.String str4 = strman.Strman.prepend("hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", strArray3);
        java.lang.String str5 = strman.Strman.format("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "006e0075006c006c00390037hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str4.equals("006e0075006c006c00390037hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055" + "'", str5.equals("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055"));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test458");
        java.lang.String str3 = strman.Strman.encode("hIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMHIblVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMNULL97", 402, 330);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test459");
        java.lang.String str4 = strman.Strman.replace("00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97", "hi_hinull97nnul", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", false);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97" + "'", str4.equals("00000000011010010000000001101000000000000110100100000000001011010000000001101000NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97"));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test460");
        java.lang.String[] strArray2 = strman.Strman.chop("nzlsb_hvu_nzc5b_gx1bjk3_owxsd_w5_mnzlsb_hvu_tdc5b_gx1bl_u3_owxsd_w5_onzlsb_hvu", (int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test461");
        java.lang.String str1 = strman.Strman.slugify("Null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97" + "'", str1.equals("null97"));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test462");
        long long4 = strman.Strman.countSubstr("1097nullnull97nnulhi", "hi-hinull97nnul", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test463");
        java.lang.String str1 = strman.Strman.toStudlyCase("Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Sekh Tl Vmtdk3");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "SekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhTlVmtdk3" + "'", str1.equals("SekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhSekhTlVmtdk3"));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test464");
        try {
            java.lang.String str3 = strman.Strman.slice("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", 294, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -244");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test465");
        boolean boolean3 = strman.Strman.endsWith("null97null97Nnull97Unull97Lnull97Lnull979null977null97", "300300301301300300300301301313300300301300320300300301300320300300300311313300300300311311300300300313320300300301301300300300301301313300300301300320", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test466");
        java.lang.String str3 = strman.Strman.removeRight("nzlsb-hvu-nzc5b-gx1bjk3-owxsd-w5-mnzlsb-hvu-tdc5b-gx1bl-u3-owxsd-w5-onzlsb-hvu", "860096001200c4005500e400e40073009300c400c4005500e400hi!LUNN79LLUNlunN79llun79llun1", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nzlsb-hvu-nzc5b-gx1bjk3-owxsd-w5-mnzlsb-hvu-tdc5b-gx1bl-u3-owxsd-w5-onzlsb-hvu" + "'", str3.equals("nzlsb-hvu-nzc5b-gx1bjk3-owxsd-w5-mnzlsb-hvu-tdc5b-gx1bl-u3-owxsd-w5-onzlsb-hvu"));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test467");
        java.lang.String str1 = strman.Strman.transliterate("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str1.equals("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test468");
        java.lang.String str1 = strman.Strman.leftTrim("00000000001100110000000000110101000000000011001100000000001101010000000000110011000000000011010100000000001100110000000000110101000000000011001100000000001101010000000000110011000000000011010100000000001100110000000000110101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00000000001100110000000000110101000000000011001100000000001101010000000000110011000000000011010100000000001100110000000000110101000000000011001100000000001101010000000000110011000000000011010100000000001100110000000000110101" + "'", str1.equals("00000000001100110000000000110101000000000011001100000000001101010000000000110011000000000011010100000000001100110000000000110101000000000011001100000000001101010000000000110011000000000011010100000000001100110000000000110101"));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test469");
        java.lang.String str2 = strman.Strman.ensureLeft("NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull
        org.junit.Assert.assertTrue("'" + strllnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str2.equals("000000000011000100000000001100000000000000110001000000000011000100000000001101110000000000110001000000000011000000000000001110000000000000110001000000000011000000000000001110000000000000110101000000000011011100000000001101010000000000110101000000000100111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000100111000000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000010101010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001001100000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000100110000000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000001110010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000000110111000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test470");
        java.lang.String str3 = strman.Strman.rightPad("SEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhTlVMTDk330", "0NULL971null97null97Nnull97Unull97Lnull97Lnull979null977nullint) '#');
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "SEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhTlVMTDk330" + "'", str3.equals("SEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhTlVMTDk330"));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test471");
        int int4 = strman.Strman.indexOf("==AbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnbsxWduxGb15GbsVnb", "nULL97NNULNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", 330, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test472");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("00390037", 505);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test473");
        java.lang.String[] strArray5 = new java.lang.String[] { "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "hi-hinull97nnul", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi};
        boolean boolean6 = strman.Strman.containsAllstrArray5);
        java.util.List<java.lang.String> strList7 = strman.Strman.zip(strArray5);
        try {
            java.util.Optional<java.lang.String> strOptional8 = strman.Strman.trimStartih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", strArray5);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Illegal character range near index 398\r\n^[48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101\\hi-hinull97nnul\\hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hir\n                                                                                                                                                                                                                                                                                                                                                                                                              ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test474");
        java.lang.String str1 = strman.Strman.collapseWhitespace("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97" + "'", str1.equals("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97"));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test475");
        java.lang.String str2 = strman.Strman.last("!ih", 203);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "!ih" + "'", str2.equals("!ih"));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test476");
        java.lang.String str3 = strman.Strman.removeRight("", "550007500067000670005800087000550005500075000670006700058000870007500055000750006700067000580008700080100550007500067000670005800087000801005500075000670006700058000870007110055000750006700067000580008700001100550007500067000670005800087000llun", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test477");
        java.lang.String str1 = strman.Strman.leftTrim("9ihiH7");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "9ihiH7" + "'", str1.equals("9ihiH7"));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test478");
        java.lang.String[] strArray3 = strman.Strman.between("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "hinullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hiih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test479");
        java.lang.String[] strArray3 = strman.Strman.lines("hihi");
        java.lang.String str4 = strman.Strman.prepend("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", strArray3);
        java.util.Optional<java.lang.String> strOptional5 = strman.Strman.trimEnd("ih", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str4.equals("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
        org.junit.Assert.assertNotNull(strOptional5);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test480");
        java.lang.String str1 = strman.Strman.removeSpaces("0033");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0033" + "'", str1.equals("0033"));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test481");
        java.lang.String str4 = strman.Strman.replace("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!nullnull97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "NzlsbHVuNzc5bGx1bjk3OWxsdW5MNzlsbHVuTDc5bGx1blU3OWxsdW5ONzlsbHVu", true);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str4.equals("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test482");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97 Nnull97 Unull97 Lnull97 Lnull979null977null97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test483");
        java.lang.String str1 = strman.Strman.reverse("NzlsbHVuNzc5bGx1bjk3OWxsdW5MNzlsbHVuTDc5bGx1blU3OWxsdW5ONzlsbHVu");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "uVHbslzNO5WdsxWO3Ulb1xGb5cDTuVHbslzNM5WdsxWO3kjb1xGb5czNuVHbslzN" + "'", str1.equals("uVHbslzNO5WdsxWO3Ulb1xGb5cDTuVHbslzNM5WdsxWO3kjb1xGb5czNuVHbslzN"));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test484");
        java.lang.String[] strArray1 = strman.Strman.lines("ihi_hhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test485");
        java.lang.String str1 = strman.Strman.removeNonWords("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97" + "'", str1.equals("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97"));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test486");
        java.lang.String str1 = strman.Strman.removeSpaces("aWhpX2g
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "aWhpX2gstr1.equals("aWhpX2g
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test487");
        int int2 = strman.Strman.lastIndexOf("1null97null97_nnull97_unull97_lnull97_lnull979null977null97", "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test488");
        java.lang.String str3 = strman.Strman.surround("MDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAxMDAxMTEwMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwMTAxMTAxMDAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaS1o", "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAxMDAxMTEwMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwMTAxMTAxMDAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaS1o" + "'", str3.equals("Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullMDAxMTAxMTAwMDAwMDAwMDEwMTAxMTEwMDAwMDAwMDAwMTExMDExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDAxMDAxMTEwMDAwMDAwMDAwMDAxMTAxMTAwMDAwMDAwMDAwMTEwMTEwMDAwMDAwMDAxMDEwMTExMDAwMDAwMDAwMDExMTAxMTAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwMTAxMTAxMDAwMDAwMDAwMDEwMDEwMTEwMDAwMDAwMDAwMDAxMDExMDAwMDAwMDAwaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaWhpaGloaS1o"));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test489");
        java.lang.String str1 = strman.Strman.transliterate("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test490");
        boolean boolean2 = strman.Strman.unequal("9ihiH7006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "0001101001000000000110100000000000011010010000000001011111000000000110100000000000011010000000000001101001000000000010110100000000011010000000000001101001000000000011010000000000001110000000000000");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test491");
        java.lang.String[] strArray5 = strman.Strman.words("", "hi!");
        java.lang.String str6 = strman.Strman.format("null", strArray5);
        boolean boolean7 = strman.Strman.containsAll("ullnullnullnullnullnullnullNull97nnul1097null971097", strArray5);
        boolean boolean8 = strman.Strman.containsAny("00078001170010800108000570005500110001100011700108", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "null" + "'", str6.equals("null"));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test492");
        try {
            java.lang.String str3 = strman.Strman.decode("000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107hihi", (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix -1 less than Character.MIN_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test493");
        boolean boolean2 = strman.Strman.endsWith("nullnull97nnul97", "llun!ih!ih");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test494");
        boolean boolean2 = strman.Strman.isEnclosedBetween("101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test495");
        java.lang.String str2 = strman.Strman.removeRight("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi" + "'", str2.equals("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi"));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test496");
        java.lang.String str2 = strman.Strman.last("bnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbA==", 2176);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "bnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbA==" + "'", str2.equals("bnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbA=="));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test497");
        int int2 = strman.Strman.lastIndexOf("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test498");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) "nnullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006eunullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006elnullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006el");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test499");
        int int2 = strman.Strman.lastIndexOf("nullnullnullnullnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexclnullnullexcl", "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test500");
        java.lang.String[] strArray4 = strman.Strman.split("nullnull97nnulih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        java.lang.String str5 = strman.Strman.prependArray("97", strArray4);
        java.lang.String str6 = strman.Strman.appendArray("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", strArray4);
        java.lang.String[] strArray7 = strman.Strman.removeEmptyStrings(strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "nullnull97nnul97" + "'", str5.equals("nullnull97nnul97"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul" + "'", str6.equals("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul"));
        org.junit.Assert.assertNotNull(strArray7);
    }
}


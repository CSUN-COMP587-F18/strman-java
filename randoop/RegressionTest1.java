import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test001");
        int int2 = strman.Strman.lastIndexOf("0000000001101001000000000110100000000000011010010000000001001000", "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test002");
        java.lang.String str1 = strman.Strman.slugify("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test003");
        java.lang.String str3 = strman.Strman.rightPad("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str3.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test004");
        java.lang.String str2 = strman.Strman.ensureLeft("hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "ihi_h");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str2.equals("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test005");
        java.lang.String[] strArray1 = null;
        try {
            boolean boolean2 = strman.Strman.containsAll("nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test006");
        boolean boolean3 = strman.Strman.isEnclosedBetween("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul", "Mw==", "Null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test007");
        java.lang.String str1 = strman.Strman.formatNumber((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "-1" + "'", str1.equals("-1"));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test008");
        java.lang.String[] strArray1 = strman.Strman.lines("001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test009");
        java.lang.String str3 = strman.Strman.removeRight("null97Nnull97Unull97Lnull97Lnull979null977null97", "Null97Nnull97Unull97Lnull97Lnull979null977null97", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str3.equals("null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test010");
        boolean boolean3 = strman.Strman.endsWith("0033", "006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test011");
        java.lang.String str1 = strman.Strman.transliterate("1097");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1097" + "'", str1.equals("1097"));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test012");
        java.lang.String str2 = strman.Strman.toDecamelize("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "97");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "ihi97hhi97hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str2.equals("ihi97hhi97hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test013");
        java.lang.String str1 = strman.Strman.base64Encode("ihi_h");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "aWhpX2g=" + "'", str1.equals("aWhpX2g="));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test014");
        java.lang.String str3 = strman.Strman.ensureRight("", "ll97", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "ll97" + "'", str3.equals("ll97"));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test015");
        java.lang.String[] strArray3 = strman.Strman.between("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "nullnull97nnul97", "");
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test016");
        boolean boolean2 = strman.Strman.unequal("0031006c0075006e006e00370039006c006c0075006e", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test017");
        java.lang.String str3 = strman.Strman.insert("79llun779llun979llunL79llunL79llunU79llunN79llun", "hihi", 6);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "79llunhihi779llun979llunL79llunL79llunU79llunN79llun" + "'", str3.equals("79llunhihi779llun979llunL79llunL79llunU79llunN79llun"));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test018");
        java.lang.String[] strArray3 = strman.Strman.between("1lunn79llun", "lunN79llunnull97null97Nnull97Unull97Lnull97Lnull979null977null97", "Ihi H");
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test019");
        java.lang.String str2 = strman.Strman.last("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", (int) ' ');
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "00000000011101010000000001101100" + "'", str2.equals("00000000011101010000000001101100"));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test020");
        java.lang.String str1 = strman.Strman.base64Encode("35");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MzU=" + "'", str1.equals("MzU="));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test021");
        java.lang.String str1 = strman.Strman.reverse("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH" + "'", str1.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH"));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test022");
        java.lang.String[] strArray4 = strman.Strman.words("", "null");
        java.util.Optional<java.lang.String> strOptional5 = strman.Strman.trimStart("", strArray4);
        java.lang.String[] strArray6 = strman.Strman.removeEmptyStrings(strArray4);
        java.lang.String[] strArray7 = strman.Strman.removeEmptyStrings(strArray4);
        try {
            java.util.Optional<java.lang.String> strOptional8 = strman.Strman.trimEnd("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", strArray4);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 3\r\n[]+$\r\n   ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strOptional5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test023");
        java.lang.String str1 = strman.Strman.toCamelCase("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str1.equals("nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test024");
        java.lang.String str2 = strman.Strman.repeat("!ih", (int) '4');
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih" + "'", str2.equals("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih"));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test025");
        java.lang.String str1 = strman.Strman.slugify("Null97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97nnul" + "'", str1.equals("null97nnul"));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test026");
        java.lang.String str1 = strman.Strman.htmlDecode("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test027");
        java.lang.String str1 = strman.Strman.decEncode("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108" + "'", str1.equals("00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108"));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test028");
        int int2 = strman.Strman.lastIndexOf("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "NULL97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test029");
        java.lang.String str3 = strman.Strman.ensureRight("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH", "00390037", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH00390037" + "'", str3.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH00390037"));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test030");
        java.lang.String str3 = strman.Strman.rightPad("0010400105", "!ihnull", 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0010400105" + "'", str3.equals("0010400105"));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test031");
        java.lang.String[] strArray2 = strman.Strman.words("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul", "nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test032");
        long long2 = strman.Strman.countSubstr("", "Null97nnul");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test033");
        java.lang.String str1 = strman.Strman.toCamelCase("hi-hinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hiHinull97nnul" + "'", str1.equals("hiHinull97nnul"));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test034");
        java.lang.String str1 = strman.Strman.toStudlyCase("nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str1.equals("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test035");
        java.lang.String str2 = strman.Strman.toDecamelize("Null97nnul", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "null97nnul" + "'", str2.equals("null97nnul"));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test036");
        java.lang.String str1 = strman.Strman.rightTrim("9710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "9710" + "'", str1.equals("9710"));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test037");
        java.lang.String str2 = strman.Strman.ensureLeftih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihstr2.equals("001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test038");
        int int1 = strman.Strman.length
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4944 + "'", int1 == 4944);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test039");
        java.lang.String str1 = strman.Strman.capitalize("7210533");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "7210533" + "'", str1.equals("7210533"));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test040");
        java.lang.String str1 = strman.Strman.formatNumber((long) 4);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "4" + "'", str1.equals("4"));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test041");
        boolean boolean2 = strman.Strman.unequal("00300030003100310030003000300031003100370030003000310030003800300030003100300038003000300030003500370030003000300035003500300030003000370038003000300031003100300030003000310031003700300030003100300038", "hi-hi");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test042");
        int int1 = strman.Strman.length("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 61 + "'", int1 == 61);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test043");
        boolean boolean3 = strman.Strman.isEnclosedBetween("n-u-l-l97-n-n-u-l", "nULL97NNUL", "hiHinull97nnul");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test044");
        java.lang.String[] strArray2 = strman.Strman.split("79llunhihi779llun979llunL79llunL79llunU79llunN79llun", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test045");
        boolean boolean4 = strman.Strman.endsWith("null", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", 30, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test046");
        boolean boolean3 = strman.Strman.isEnclosedBetween("", "nullnull97nnul", "Ihi H");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test047");
        boolean boolean2 = strman.Strman.inequal("35", "hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test048");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test049");
        java.lang.String str1 = strman.Strman.toStudlyCase("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test050");
        boolean boolean3 = strman.Strman.isEnclosedBetween("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi", "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test051");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("ihi-h");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test052");
        java.lang.String str1 = strman.Strman.slugifyih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        org.junit.Assert.assertTrue("'" + strih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih" + "'", str1.equalsih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih"));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test053");
        boolean boolean2 = strman.Strman.unequal("!ihnull", "null97nnul");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test054");
        try {
            java.lang.String str2 = strman.Strman.last("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test055");
        java.lang.String str1 = strman.Strman.formatNumber((long) 30);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "30" + "'", str1.equals("30"));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test056");
        java.lang.String str2 = strman.Strman.last("", 330);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test057");
        java.lang.String str1 = strman.Strman.htmlEncode("hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnull&excl;nullnull&excl;" + "'", str1.equals("nullnull&excl;nullnull&excl;"));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test058");
        java.lang.String str1 = strman.Strman.escapeRegExp("lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lunn79llun" + "'", str1.equals("lunn79llun"));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test059");
        java.lang.String str1 = strman.Strman.decEncode("nULL97NNUL");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00110000850007600076000570005500078000780008500076" + "'", str1.equals("00110000850007600076000570005500078000780008500076"));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test060");
        long long2 = strman.Strman.countSubstr("", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test061");
        java.lang.String str1 = strman.Strman.humanize
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test062");
        long long4 = strman.Strman.countSubstr("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "ihiH", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test063");
        boolean boolean4 = strman.Strman.endsWith("null97Nnull97Unull97Lnull97Lnull979null977null97", "7210533", (-1), true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test064");
        try {
            java.lang.String str3 = strman.Strman.slice("nullnull97nnul", 100, 330);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 330");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test065");
        boolean boolean2 = strman.Strman.endsWith("nullnull&excl;nullnull&excl;", "000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test066");
        java.lang.String str3 = strman.Strman.truncate("", 4944, "97");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test067");
        java.lang.String str3 = strman.Strman.ensureRight("00390037", "0010400105", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "003900370010400105" + "'", str3.equals("003900370010400105"));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test068");
        java.lang.String str1 = strman.Strman.hexEncode
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test069");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("NULL97");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test070");
        boolean boolean2 = strman.Strman.isEnclosedBetween("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test071");
        boolean boolean2 = strman.Strman.contains("1null97null97_nnull97_unull97_lnull97_lnull979null977null97", "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test072");
        java.lang.String[] strArray4 = strman.Strman.between("", "hi", "000000000100111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100");
        boolean boolean5 = strman.Strman.containsAny("9ihiH7", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test073");
        java.lang.String str1 = strman.Strman.removeNonWords("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH" + "'", str1.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH"));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test074");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("nullnull97nnul");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test075");
        java.lang.String str3 = strman.Strman.ensureRight("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037", "Null", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null" + "'", str3.equals("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null"));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test076");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("null97nnul");
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test077");
        boolean boolean2 = strman.Strman.unequal("null97", "N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test078");
        boolean boolean2 = strman.Strman.contains("003900370010400105", "HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test079");
        java.lang.String str2 = strman.Strman.ensureLeft("", "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH" + "'", str2.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH"));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test080");
        java.lang.String str3 = strman.Strman.ensureLeft("Null97Nnull97Unull97Lnull97Lnull979null977null97", "1101171081085755", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str3.equals("1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test081");
        java.lang.String[] strArray3 = strman.Strman.between("", "hi
        boolean boolean4 = strman.Strman.isString((java.lang.Object) "");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test082");
        int int4 = strman.Strman.indexOf("Ihifalse);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test083");
        java.lang.String str3 = strman.Strman.encode("Ihi H", 4944, (int) (byte) 100);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test084");
        boolean boolean2 = strman.Strman.endsWith("HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test085");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("10");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test086");
        java.lang.String str3 = strman.Strman.truncate("Ihi H", (int) (short
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Ihi H" + "'", str3.equals("Ihi H"));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test087");
        try {
            java.lang.String str3 = strman.Strman.decode("Mw==", 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix -1 less than Character.MIN_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test088");
        boolean boolean1 = strman.Strman.isUpperCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test089");
        boolean boolean2 = strman.Strman.inequal("TlVMTDk3", "0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test090");
        int int4 = strman.Strman.indexOf("HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "79llunhihi779llun979llunL79llunL79llunU79llunN79llun", (int) (byte) 10, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test091");
        java.lang.String str1 = strman.Strman.removeNonWords("1null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1null97null97_nnull97_unull97_lnull97_lnull979null977null97" + "'", str1.equals("1null97null97_nnull97_unull97_lnull97_lnull979null977null97"));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test092");
        java.lang.String str3 = strman.Strman.encodeih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", (int) '4', (int) (short) -1);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test093");
        int int4 = strman.Strman.indexOf("", "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", (int) (short) 0, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test094");
        java.lang.String str3 = strman.Strman.encodeih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihint) (byte) 0, 330);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test095");
        boolean boolean4 = strman.Strman.endsWith("null97nnul", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", (int) (byte) -1, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test096");
        java.lang.String str1 = strman.Strman.dasherize("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test097");
        boolean boolean2 = strman.Strman.inequal("0000000001101001000000000110100000000000011010010000000001001000", "blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test098");
        java.lang.String[] strArray2 = strman.Strman.lines("10");
        boolean boolean4 = strman.Strman.containsAll("000000000110100000000000011010010000000000100001", strArray2, false);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test099");
        java.lang.String[] strArray1 = strman.Strman.lines("3");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test100");
        java.lang.String str2 = strman.Strman.ensureLeft("ihiH", "hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101ihiH" + "'", str2.equals("hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101ihiH"));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test101");
        java.lang.String[] strArray2 = strman.Strman.split("", "0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test102");
        java.lang.String str1 = strman.Strman.startCase("Mw==");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Mw==" + "'", str1.equals("Mw=="));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test103");
        int int4 = strman.Strman.indexOf("97", "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH", 1, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test104");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("lunN79llunnull97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test105");
        java.lang.String str2 = strman.Strman.removeRight("10", "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "10" + "'", str2.equals("10"));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test106");
        java.lang.String str1 = strman.Strman.removeSpaces("0000000001101001000000000110100000000000011010010000000001001000");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0000000001101001000000000110100000000000011010010000000001001000" + "'", str1.equals("0000000001101001000000000110100000000000011010010000000001001000"));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test107");
        java.lang.String str3 = strman.Strman.safeTruncate("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", 1, "");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test108");
        java.lang.String str1 = strman.Strman.toSnakeCase("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "ihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("ihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test109");
        java.lang.String str1 = strman.Strman.decEncode("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00110001170010800108001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001040010500045001100011700108001080005700055001040010500045000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101000480004800051000550004800048000510005500048000480005100057000480004800054000990004800048000540009900048000480005500053000480004800054001010004800048000510005700048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010100048000480005200099000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101000480004800052000990004800048000510005500048000480005100057000480004800054000990004800048000540009900048000480005500053000480004800054001010004800048000530005300048000480005100055000480004800051000570004800048000540009900048000480005400099000480004800055000530004800048000540010100048000480005200101000480004800051000550004800048000510005700048000480005400099000480004800054000990004800048000550005300048000480005400101" + "'", str1.equals
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test110");
        int int1 = strman.Strman.length("null97nnul");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test111");
        java.lang.String str3 = strman.Strman.leftPad("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "n-u-l-l97-n-n-u-l", 330);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str3.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test112");
        java.lang.String str1 = strman.Strman.binEncode("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100100000000011010000000000001101001000000000101111100000000011010000000000001101000000000000110100100000000001011010000000001101000000000000110100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011010100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011011100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100100000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100100000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100110000000000110101000000000011001100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110101000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110001000000000011010100000000001101110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010000000000001110010000000000111001000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110101000000000011010100000000001100110000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100100000000000110001000000000011000000000000001100010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001100010000000000110101000000000011010100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011000100000000001101010000000000110111000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011100100000000001110010000000000110100000000000011100000000000001101000000000000111000000000000011010100000000001101000000000000111001000000000011100100000000001101000000000000111000000000000011010000000000001110000000000000110101000000000011010100000000001101010000000000110011000000000011010000000000001110000000000000110100000000000011100000000000001101010000000000110100000000000011000100000000001100000000000000110001" + "'", str1.equals
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test113");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test114");
        boolean boolean3 = strman.Strman.isEnclosedBetween("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "9710", "9ihiH7");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test115");
        java.lang.String str2 = strman.Strman.ensureLeft("null97", "1097");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1097null97" + "'", str2.equals("1097null97"));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test116");
        java.lang.String str1 = strman.Strman.slugify("hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi" + "'", str1.equals("hi"));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test117");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test118");
        java.lang.String str1 = strman.Strman.lowerFirst("hiHinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hiHinull97nnul" + "'", str1.equals("hiHinull97nnul"));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test119");
        boolean boolean3 = strman.Strman.contains("Hi!hi!hi!hi!NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test120");
        java.lang.String str1 = strman.Strman.reverse("00000000010010000000000001101001");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10010110000000000001001000000000" + "'", str1.equals("10010110000000000001001000000000"));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test121");
        java.lang.String str3 = strman.Strman.safeTruncate("NULL97", (int) (byte) 10, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "NULL97" + "'", str3.equals("NULL97"));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test122");
        boolean boolean4 = strman.Strman.endsWith("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l", "hi-hi", (int) (byte) 10, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test123");
        java.lang.String str3 = strman.Strman.truncate("null97Nnull97Unull97Lnull97Lnull979null977null97", (int) (byte) 0, "hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test124");
        boolean boolean1 = strman.Strman.isUpperCase("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test125");
        java.lang.String[] strArray2 = strman.Strman.lines("hihi");
        java.lang.String str3 = strman.Strman.format("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", strArray2);
        boolean boolean4 = strman.Strman.isString((java.lang.Object) "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str3.equals("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test126");
        boolean boolean1 = strman.Strman.isBlank("10010110000000000001001000000000");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test127");
        java.lang.String[] strArray1 = null;
        java.lang.String str2 = strman.Strman.prependArray("0000000001101001000000000110100000000000011010010000000001001000", strArray1);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "0000000001101001000000000110100000000000011010010000000001001000" + "'", str2.equals("0000000001101001000000000110100000000000011010010000000001001000"));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test128");
        int int1 = strman.Strman.length("hi!");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test129");
        java.lang.String str1 = strman.Strman.escapeRegExp("null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97" + "'", str1.equals("null97"));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test130");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("null97nnul");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test131");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("10");
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        boolean boolean3 = strman.Strman.isString((java.lang.Object) strOptional1);
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test132");
        boolean boolean2 = strman.Strman.contains("1", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test133");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("Null");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test134");
        java.lang.String str4 = strman.Strman.replace("1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hifalse);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str4.equals("1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test135");
        try {
            java.lang.String str3 = strman.Strman.decode("1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", 2, 30);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"UN\"");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test136");
        java.lang.String str1 = strman.Strman.humanize("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3" + "'", str1.equals("Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3"));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test137");
        java.lang.String[] strArray3 = strman.Strman.chars("null");
        java.lang.String str4 = strman.Strman.format("null97nnul", strArray3);
        java.lang.String str5 = strman.Strman.prepend("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "null97nnul" + "'", str4.equals("null97nnul"));
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "nullHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str5.equals("nullHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test138");
        java.lang.String str1 = strman.Strman.toStudlyCase("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN" + "'", str1.equals("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN"));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test139");
        java.lang.String str1 = strman.Strman.swapCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97" + "'", str1.equals("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97"));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test140");
        java.lang.String str1 = strman.Strman.transliterate("10");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10" + "'", str1.equals("10"));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test141");
        long long2 = strman.Strman.countSubstr("00300030003100310030003000300031003100370030003000310030003800300030003100300038003000300030003500370030003000300035003500300030003000370038003000300031003100300030003000310031003700300030003100300038", "1null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test142");
        java.lang.String str3 = strman.Strman.encode("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", (int) 'a', (int) (short) -1);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test143");
        java.lang.String str1 = strman.Strman.removeNonWords("1null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str1.equals("1null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test144");
        boolean boolean2 = strman.Strman.contains("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", "null97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test145");
        java.lang.String str1 = strman.Strman.formatNumber((long) 6);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "6" + "'", str1.equals("6"));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test146");
        long long2 = strman.Strman.countSubstr("00110000850007600076000570005500078000780008500076", "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test147");
        java.lang.String str2 = strman.Strman.repeat("", 0);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test148");
        try {
            java.lang.String str3 = strman.Strman.slice("", (-1), 4944);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test149");
        boolean boolean1 = strman.Strman.isBlank("-1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test150");
        java.lang.String[] strArray1 = strman.Strman.words("1lunn79llun");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test151");
        java.lang.String str3 = strman.Strman.encode("00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", (int) (byte) -1, 4944);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str3.equals("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test152");
        java.lang.String str2 = strman.Strman.last("", 100);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test153");
        java.lang.String str3 = strman.Strman.rightPad("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l", "001040010500110001170010800108000570005500078001100011700108", (int) (short) 0);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l" + "'", str3.equals("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l"));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test154");
        java.lang.String str1 = strman.Strman.removeNonWords("00110000850007600076000570005500078000780008500076");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00110000850007600076000570005500078000780008500076" + "'", str1.equals("00110000850007600076000570005500078000780008500076"));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test155");
        java.lang.String str1 = strman.Strman.decEncode
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test156");
        int int2 = strman.Strman.lastIndexOf("", "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test157");
        java.lang.String str4 = strman.Strman.replace("006e0075006c006c00390037", "hi", "!ih", true);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "006e0075006c006c00390037" + "'", str4.equals("006e0075006c006c00390037"));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test158");
        java.lang.String str2 = strman.Strman.ensureLeft("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!000000000100111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100000000000110111000000000011101010000000001101100000000000110110000000000011011100000000001110101000000000110110000000000011011000000000001101110000000000111010100000000011011000000000001101100", "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histr2.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test159");
        java.lang.String str1 = strman.Strman.capitalize("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test160");
        int int1 = strman.Strman.length("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test161");
        java.lang.String str1 = strman.Strman.base64Encode("Null97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "TnVsbDk3bm51bA==" + "'", str1.equals("TnVsbDk3bm51bA=="));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test162");
        int int2 = strman.Strman.lastIndexOf("00110000850007600076000570005500078000780008500076", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test163");
        try {
            java.lang.String str3 = strman.Strman.decode("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH", (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 0 less than Character.MIN_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test164");
        java.lang.String str2 = strman.Strman.removeRight("", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test165");
        java.lang.String str1 = strman.Strman.underscored("Ihi H");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "ihi_h" + "'", str1.equals("ihi_h"));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test166");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount("null97Nnul");
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test167");
        java.lang.String str1 = strman.Strman.upperFirst("35");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "35" + "'", str1.equals("35"));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test168");
        boolean boolean3 = strman.Strman.isEnclosedBetween("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul", "10010110000000000001001000000000", "ihi97hhi97hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test169");
        java.lang.String str1 = strman.Strman.htmlDecode("4");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test170");
        boolean boolean3 = strman.Strman.contains("4", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test171");
        java.lang.String str1 = strman.Strman.humanize("10");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10" + "'", str1.equals("10"));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test172");
        java.lang.String str1 = strman.Strman.slugify("hi-hinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi-hinull97nnul" + "'", str1.equals("hi-hinull97nnul"));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test173");
        boolean boolean3 = strman.Strman.isEnclosedBetween("N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test174");
        java.lang.String str1 = strman.Strman.rightTrimih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        org.junit.Assert.assertTrue("'" + strih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih" + "'", str1.equalsih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih"));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test175");
        java.lang.String str1 = strman.Strman.base64Encode("006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3" + "'", str1.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3"));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test176");
        boolean boolean2 = strman.Strman.inequal("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test177");
        boolean boolean3 = strman.Strman.endsWith("", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test178");
        java.lang.String[] strArray4 = strman.Strman.chop("", (int) '4');
        java.lang.String str5 = strman.Strman.appendArray("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97", strArray4);
        try {
            java.util.Optional<java.lang.String> strOptional6 = strman.Strman.trimEnd("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", strArray4);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 3\r\n[]+$\r\n   ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97" + "'", str5.equals("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97"));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test179");
        java.lang.String str1 = strman.Strman.formatNumber((long) 100);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "100" + "'", str1.equals("100"));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test180");
        java.lang.String str3 = strman.Strman.safeTruncate("10", (int) (short) 0, "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test181");
        try {
            java.lang.String str3 = strman.Strman.insert("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "Hihi", (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test182");
        java.lang.String str1 = strman.Strman.toSnakeCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test183");
        java.lang.String str1 = strman.Strman.formatNumber((long) 10);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10" + "'", str1.equals("10"));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test184");
        java.lang.String[] strArray2 = strman.Strman.lines("NULL97NNUL");
        java.lang.String str3 = strman.Strman.prependArray("!ih", strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "NULL97NNUL!ih" + "'", str3.equals("NULL97NNUL!ih"));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test185");
        java.lang.String str3 = strman.Strman.removeRight("1null97null97_nnull97_unull97_lnull97_lnull979null977null97", "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1null97null97_nnull97_unull97_lnull97_lnull979null977null97" + "'", str3.equals("1null97null97_nnull97_unull97_lnull97_lnull979null977null97"));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test186");
        boolean boolean2 = strman.Strman.endsWith("000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "00078001170010800108000570005500110001100011700108");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test187");
        boolean boolean2 = strman.Strman.isEnclosedBetween("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH00390037", "NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test188");
        java.lang.String str1 = strman.Strman.toCamelCase
        org.junit.Assert.assertTrue("'" + strstr1.equals("001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001040010500033001100011700108001080005700055"));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test189");
        java.lang.String str2 = strman.Strman.toDecamelize("Null97Nnull97Unull97Lnull97Lnull979null977null97", "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97" + "'", str2.equals("null97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!nnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!unull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull97hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!lnull979null977null97"));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test190");
        java.lang.String str1 = strman.Strman.capitalize("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "79llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun" + "'", str1.equals("79llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun"));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test191");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("00110001170010800108000570005500078001100011700108");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test192");
        java.lang.String str3 = strman.Strman.ensureRight("79llunhihi779llun979llunL79llunL79llunU79llunN79llun", "Hihi", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi" + "'", str3.equals("79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi"));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test193");
        long long4 = strman.Strman.countSubstr("", "006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037", true, false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test194");
        java.lang.String str1 = strman.Strman.swapCase("NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL" + "'", str1.equals("null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL"));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test195");
        int int1 = strman.Strman.length("hi-hi");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test196");
        java.lang.String str1 = strman.Strman.leftTrimih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
        org.junit.Assert.assertTrue("'" + strih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihstr1.equalsih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test197");
        java.lang.String str1 = strman.Strman.transliterate("hiHinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hiHinull97nnul" + "'", str1.equals("hiHinull97nnul"));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test198");
        java.lang.String[] strArray3 = strman.Strman.words("", "null");
        java.lang.Class<?> wildcardClass4 = strArray3.getClass();
        java.lang.String str5 = strman.Strman.append("ihi_h", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "ihi_h" + "'", str5.equals("ihi_h"));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test199");
        boolean boolean1 = strman.Strman.isLowerCase("nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test200");
        java.lang.String str1 = strman.Strman.base64Encode("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "SEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhTlVMTDk3" + "'", str1.equals("SEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhSEkhTlVMTDk3"));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test201");
        java.lang.String str3 = strman.Strman.encode("", 330, 61);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test202");
        int int2 = strman.Strman.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test203");
        java.lang.String[] strArray4 = strman.Strman.words("", "null");
        java.util.Optional<java.lang.String> strOptional5 = strman.Strman.trimStart("", strArray4);
        java.lang.String[] strArray6 = strman.Strman.removeEmptyStrings(strArray4);
        try {
            java.util.Optional<java.lang.String> strOptional7 = strman.Strman.trimEnd("nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", strArray4);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 3\r\n[]+$\r\n   ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strOptional5);
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test204");
        boolean boolean1 = strman.Strman.isUpperCase
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test205");
        int int4 = strman.Strman.lastIndexOf("001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", "hihi", 2, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test206");
        boolean boolean1 = strman.Strman.isBlank("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test207");
        boolean boolean1 = strman.Strman.isUpperCase("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test208");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("lunn79llun");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test209");
        boolean boolean3 = strman.Strman.contains("00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "NULL97", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test210");
        int int2 = strman.Strman.lastIndexOf("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", "null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test211");
        java.lang.String str1 = strman.Strman.base64Encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "bnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbA==" + "'", str1.equals("bnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbG51bGxudWxsbnVsbA=="));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test212");
        java.lang.String[] strArray3 = strman.Strman.lines("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        java.lang.String str4 = strman.Strman.prepend("null97", strArray3);
        boolean boolean5 = strman.Strman.containsAny("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97" + "'", str4.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97"));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test213");
        java.lang.String str1 = strman.Strman.decEncode("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test214");
        java.lang.String str1 = strman.Strman.transliterate("HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str1.equals("HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test215");
        java.lang.String str2 = strman.Strman.last("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97", 4);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "ll97" + "'", str2.equals("ll97"));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test216");
        java.lang.String str1 = strman.Strman.hexEncode("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006900680069005f006800680069002dstr1.equals("006900680069005f006800680069002d0068006900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003500340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003700340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500330035003300340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320031003000310034003800340038003500310035003500340038003400380035003100350037003400380034003800350034003900390034003800340038003500340039003900340038003400380035003500350033003400380034003800350034003100300031"));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test217");
        boolean boolean4 = strman.Strman.endsWith("Hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "0010400105", (int) (byte) 1, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test218");
        java.lang.String str1 = strman.Strman.hexEncode("nullnull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c006e0075006c006c00390037006e006e0075006c" + "'", str1.equals("006e0075006c006c006e0075006c006c00390037006e006e0075006c"));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test219");
        long long4 = strman.Strman.countSubstr("TnVsbDk3bm51bA==", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3", true, false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test220");
        java.lang.String str3 = strman.Strman.ensureLeft("97", "hi!hi!", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!hi!97" + "'", str3.equals("hi!hi!97"));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test221");
        boolean boolean2 = strman.Strman.unequal("aWhpX2g=", "1097null97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test222");
        java.lang.String str1 = strman.Strman.underscored("00000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00000000011101010000000001101100" + "'", str1.equals("00000000011101010000000001101100"));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test223");
        java.lang.String str3 = strman.Strman.ensureLeftih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih" + "'", str3.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih"));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test224");
        try {
            java.lang.String str3 = strman.Strman.slice("32", (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test225");
        java.lang.String[] strArray3 = strman.Strman.words("1", "");
        java.lang.String str4 = strman.Strman.appendArray("1", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "11" + "'", str4.equals("11"));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test226");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("hi!hi!", 330);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test227");
        java.lang.String str3 = strman.Strman.leftPad("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null", "1101171081085755", (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null" + "'", str3.equals("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null"));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test228");
        java.lang.String str1 = strman.Strman.toSnakeCase("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97"));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test229");
        boolean boolean3 = strman.Strman.isEnclosedBetween("00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108", "", "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test230");
        java.lang.String str1 = strman.Strman.capitalize("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("Ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test231");
        java.lang.String str1 = strman.Strman.rightTrim("NULL97NNUL!ih");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NULL97NNUL!ih" + "'", str1.equals("NULL97NNUL!ih"));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test232");
        java.lang.String str1 = strman.Strman.lowerFirst("0031006c0075006e006e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0031006c0075006e006e00370039006c006c0075006e" + "'", str1.equals("0031006c0075006e006e00370039006c006c0075006e"));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test233");
        java.lang.String str1 = strman.Strman.swapCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E" + "'", str1.equals("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97HI!00370039006C006C0075006E003700370039006C006C0075006E003900370039006C006C0075006E004C00370039006C006C0075006E004C00370039006C006C0075006E005500370039006C006C0075006E004E00370039006C006C0075006E"));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test234");
        java.lang.String str1 = strman.Strman.swapCase("006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006E0075006C006C00390037HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1.equals("006E0075006C006C00390037HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test235");
        boolean boolean2 = strman.Strman.endsWith("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "null97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test236");
        java.lang.String str1 = strman.Strman.htmlEncode("006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test237");
        try {
            java.lang.String str3 = strman.Strman.slice("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test238");
        boolean boolean1 = strman.Strman.isBlank("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test239");
        java.lang.String str1 = strman.Strman.toSnakeCase("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_null97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str1.equals("hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_null97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test240");
        long long2 = strman.Strman.countSubstr("nULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", "nullnull97nnul");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test241");
        java.lang.String str3 = strman.Strman.ensureLeft("00078001170010800108000570005500110001100011700108", "1097", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "109700078001170010800108000570005500110001100011700108" + "'", str3.equals("109700078001170010800108000570005500110001100011700108"));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test242");
        java.lang.String str1 = strman.Strman.startCase("006900680069005f006800680069002d0068006900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003500340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003700340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500330035003300340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320031003000310034003800340038003500310035003500340038003400380035003100350037003400380034003800350034003900390034003800340038003500340039003900340038003400380035003500350033003400380034003800350034003100300031");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006900680069005f006800680069002dstr1.equals("006900680069005f006800680069002d
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test243");
        java.lang.String str3 = strman.Strman.safeTruncate("00110000850007600076000570005500078000780008500076", 5, "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97" + "'", str3.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97"));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test244");
        java.lang.String str1 = strman.Strman.swapCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1.equals("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test245");
        java.lang.String str1 = strman.Strman.dasherize("00000000010010000000000001101001");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00000000010010000000000001101001" + "'", str1.equals("00000000010010000000000001101001"));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test246");
        int int4 = strman.Strman.indexOf("nullnull&excl;nullnull&excl;", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", 4944, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test247");
        java.lang.String str2 = strman.Strman.last("lunN79llun", 10);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "lunN79llun" + "'", str2.equals("lunN79llun"));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test248");
        java.lang.String str2 = strman.Strman.last("006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1" + "'", str2.equals("1"));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test249");
        java.lang.String str3 = strman.Strman.ensureLeft("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi", "blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi" + "'", str3.equals("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi"));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test250");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("hi!hi!97", (int) (byte) -1);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test251");
        java.lang.String str2 = strman.Strman.ensureRight("hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str2.equals("hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test252");
        java.lang.String str1 = strman.Strman.startCase("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test253");
        java.lang.String str3 = strman.Strman.removeLeft("006e0075006c006c0039003700390037", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006e0075006c006c0039003700390037" + "'", str3.equals("006e0075006c006c0039003700390037"));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test254");
        java.lang.String str2 = strman.Strman.removeLeft("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", "ihi_h");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN" + "'", str2.equals("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN"));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test255");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) "10");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test256");
        java.lang.String str1 = strman.Strman.removeNonWords("006e0075006c006c0039003700390037");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c0039003700390037" + "'", str1.equals("006e0075006c006c0039003700390037"));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test257");
        java.lang.String str1 = strman.Strman.capitalize("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97"));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test258");
        java.lang.String str1 = strman.Strman.underscoredih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih00000000010010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011010000000000001101001000000000010000100000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000011010000000000001101001000000000010000135");
        org.junit.Assert.assertTrue("'" + strih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihstr1.equalsih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test259");
        java.lang.String str3 = strman.Strman.ensureLeft("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi", "35", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi" + "'", str3.equals("35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi"));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test260");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test261");
        boolean boolean2 = strman.Strman.inequal("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test262");
        java.lang.String str1 = strman.Strman.startCase("-1");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1" + "'", str1.equals("1"));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test263");
        boolean boolean2 = strman.Strman.isEnclosedBetween("hi!", "Mda2 ztaw nz uw mdzj mda2 yz aw mzkw mdm3");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test264");
        java.lang.String str2 = strman.Strman.last("0000000001001000000000000110100197", 0);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test265");
        boolean boolean2 = strman.Strman.inequal
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test266");
        try {
            java.lang.String str3 = strman.Strman.decode("00000000011101010000000001101100", 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 1 less than Character.MIN_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test267");
        try {
            java.lang.String str3 = strman.Strman.decode("1null97null97_nnull97_unull97_lnull97_lnull979null977null97", 4944, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"1null97null97_nnull97_unull97_lnull97_lnull979null977null97\"");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test268");
        int int4 = strman.Strman.lastIndexOf("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037", "", 0, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test269");
        java.lang.String str1 = strman.Strman.formatNumber((long) 0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0" + "'", str1.equals("0"));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test270");
        java.lang.String str1 = strman.Strman.underscored("1lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1lunn79llun" + "'", str1.equals("1lunn79llun"));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test271");
        int int2 = strman.Strman.lastIndexOf("0031006c0075006e006e00370039006c006c0075006e", "1null97null97_nnull97_unull97_lnull97_lnull979null977null97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test272");
        try {
            java.lang.String str3 = strman.Strman.decode("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", 5, 330);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 330 greater than Character.MAX_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test273");
        java.lang.String str3 = strman.Strman.rightPad("Hi!hi!hi!hi!NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", 4944);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test274");
        java.lang.String str3 = strman.Strman.safeTruncate("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 0, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test275");
        java.lang.String str1 = strman.Strman.binEncode("");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "" + "'", str1.equals(""));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test276");
        java.lang.String str3 = strman.Strman.removeRight("nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi", "hi-hi", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi" + "'", str3.equals("nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi"));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test277");
        java.lang.String str3 = strman.Strman.removeRight("hi!hi!97", "003900370010400105", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!hi!97" + "'", str3.equals("hi!hi!97"));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test278");
        boolean boolean3 = strman.Strman.contains("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "null97", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test279");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test280");
        java.lang.String str2 = strman.Strman.ensureLeft("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihihi" + "'", str2.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihihi"));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test281");
        java.lang.String[] strArray3 = strman.Strman.chop("ihiH", 1);
        boolean boolean4 = strman.Strman.containsAny("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test282");
        java.lang.String str2 = strman.Strman.removeLeft("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str2.equals("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test283");
        java.lang.String str3 = strman.Strman.safeTruncate("nullHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 2, "");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test284");
        java.lang.String[] strArray3 = strman.Strman.split("hi!hi!", "hi!");
        java.lang.String str5 = strman.Strman.join(strArray3, "hihi");
        java.lang.String[] strArray6 = strman.Strman.removeEmptyStrings(strArray3);
        try {
            java.util.Optional<java.lang.String> strOptional7 = strman.Strman.trimEnd("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", strArray3);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 3\r\n[]+$\r\n   ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "" + "'", str5.equals(""));
        org.junit.Assert.assertNotNull(strArray6);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test285");
        java.lang.String str2 = strman.Strman.removeRightih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihlunN79llunnull97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + strih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihstr2.equalsih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test286");
        java.lang.String str1 = strman.Strman.decEncode("7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test287");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) "Hi!hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test288");
        java.lang.String str1 = strman.Strman.binEncode("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test289");
        boolean boolean2 = strman.Strman.unequal("MzU=", "0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test290");
        java.lang.String str3 = strman.Strman.removeLeft("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "Mw==", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str3.equals("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test291");
        int int3 = strman.Strman.lastIndexOf("1097null97", "006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test292");
        java.lang.String str4 = strman.Strman.replace("nullnullnullnullnullnullnullnullnullnull", "100", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", true);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "nullnullnullnullnullnullnullnullnullnull" + "'", str4.equals("nullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test293");
        java.lang.String str1 = strman.Strman.transliterate("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str1.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test294");
        java.lang.String str3 = strman.Strman.encode("79llun779llun979llunl79llunl79llunu79llunn79llun79llun779llun979llunl79llunl79llunu79llunn79llun", 6, 30);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k" + "'", str3.equals("00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k"));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test295");
        int int4 = strman.Strman.lastIndexOf("00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97", 10, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test296");
        java.lang.String str1 = strman.Strman.toStudlyCase("hi-hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HiHi" + "'", str1.equals("HiHi"));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test297");
        java.lang.String str1 = strman.Strman.dasherizeih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih");
        org.junit.Assert.assertTrue("'" + strih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih" + "'", str1.equalsih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih"));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test298");
        java.lang.String str1 = strman.Strman.collapseWhitespace("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test299");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("nullHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test300");
        java.lang.String str3 = strman.Strman.rightPad("00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k", "nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", 6);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k" + "'", str3.equals("00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k"));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test301");
        java.lang.String str1 = strman.Strman.dasherize("000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000000000000001100010000000000110000000000000011000000000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000000000000001100010000000000110000000000000011000000000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110001000000000011000000000000001100010000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000000000000001100010000000000110001000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000100000000001100000000000000110000000000000011000100000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000100000000001100010000000000110000000000000011000100000000001100010000000000110001000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100010000000000110001000000000011000100000000001100000000000000110001000000000011000000000000001100010000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110000000000000011000000000000001100000000000000110001000000000011000100000000001100000000000000110001000000000011000100000000001100000000000000110000000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110111000000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000011101010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101100000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111000000000110110000000000011011100000000001110101000000000110110000000000011011000000000000111001000000000011011100000000001110010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000000110111000000000110111000000000011101010000000001101100000000000110110000000000001110010000000000110111");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test302");
        java.lang.String str1 = strman.Strman.toStudlyCase("hi-hinull97nnul");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HiHinull97nnul" + "'", str1.equals("HiHinull97nnul"));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test303");
        java.lang.String str3 = strman.Strman.surround("1097null97", "null97nnul", "1097");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "null97nnul1097null971097" + "'", str3.equals("null97nnul1097null971097"));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test304");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test305");
        java.lang.String str3 = strman.Strman.rightPad("97", "null97", 330);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97" + "'", str3.equals("97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97"));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test306");
        java.lang.String str1 = strman.Strman.toKebabCase("79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "79llunhihi779llun979llun-l79llun-l79llun-u79llun-n79llun-hihi" + "'", str1.equals("79llunhihi779llun979llun-l79llun-l79llun-u79llun-n79llun-hihi"));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test307");
        long long4 = strman.Strman.countSubstr("0000000001101001000000000110100000000000011010010000000001001000", "nULL97NNUL", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test308");
        boolean boolean1 = strman.Strman.isUpperCase("7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test309");
        try {
            java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("10", (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test310");
        java.lang.String[] strArray0 = null;
        try {
            java.util.List<java.lang.String> strList1 = strman.Strman.zip(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test311");
        java.lang.String str1 = strman.Strman.leftTrim("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97" + "'", str1.equals("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97"));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test312");
        int int4 = strman.Strman.indexOf("10010110000000000001001000000000", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", 4, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test313");
        int int2 = strman.Strman.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "1101171081085755000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test314");
        try {
            java.lang.String str3 = strman.Strman.slice("000720010500033001040010500033", 4944, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -4938");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test315");
        java.lang.Object obj0 = null;
        try {
            boolean boolean1 = strman.Strman.isString(obj0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value can't be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test316");
        java.lang.String str1 = strman.Strman.toStudlyCase("006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006900680069005f006800680069002dstr1.equals("006900680069005f006800680069002d
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test317");
        java.lang.String[] strArray2 = strman.Strman.words("", "null");
        java.lang.Class<?> wildcardClass3 = strArray2.getClass();
        java.lang.String[] strArray4 = strman.Strman.removeEmptyStrings(strArray2);
        boolean boolean5 = strman.Strman.isString((java.lang.Object) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test318");
        boolean boolean3 = strman.Strman.contains("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", "hi!hi!", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test319");
        java.lang.String str1 = strman.Strman.collapseWhitespace("006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037" + "'", str1.equals("006e0075006c006c00390037004e006e0075006c006c003900370055006e0075006c006c00390037004c006e0075006c006c00390037004c006e0075006c006c003900370039006e0075006c006c003900370037006e0075006c006c00390037"));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test320");
        java.lang.String str3 = strman.Strman.removeLeft("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM", "nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM" + "'", str3.equals("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM"));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test321");
        java.lang.String str3 = strman.Strman.truncate("10", (int) (short) 0, "nullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test322");
        java.lang.String str3 = strman.Strman.rightPad("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str3.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test323");
        int int1 = strman.Strman.length("1097");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test324");
        java.lang.String str1 = strman.Strman.decEncode("NULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055" + "'", str1.equals("000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055"));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test325");
        try {
            java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("00000000010010000000000001101001", (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 35");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test326");
        java.lang.String str1 = strman.Strman.formatNumber((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0" + "'", str1.equals("0"));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test327");
        java.lang.String str1 = strman.Strman.toStudlyCase("006e0075006c006c00390037");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "006e0075006c006c00390037" + "'", str1.equals("006e0075006c006c00390037"));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test328");
        int int3 = strman.Strman.lastIndexOf("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!NULL97", "00110000850007600076000570005500078000780008500076", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test329");
        java.lang.String str2 = strman.Strman.last("", (int) ' ');
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test330");
        java.lang.String str1 = strman.Strman.capitalize("nullHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1.equals("Nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test331");
        java.lang.String str2 = strman.Strman.repeat("nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi", (int) (short) 10);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi" + "'", str2.equals("nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihinullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi"));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test332");
        java.lang.String str2 = strman.Strman.removeLeft("aWhpX2g=", "006e0075006c006c00390037hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "aWhpX2g=" + "'", str2.equals("aWhpX2g="));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test333");
        boolean boolean2 = strman.Strman.inequal("006e0075006c006c0039003700390037", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test334");
        java.lang.String str2 = strman.Strman.repeat("hi!hi!97", 30);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97" + "'", str2.equals("hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97hi!hi!97"));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test335");
        java.lang.String str1 = strman.Strman.capitalize("6");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "6" + "'", str1.equals("6"));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test336");
        java.lang.String str2 = strman.Strman.removeLeft("nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l", "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l" + "'", str2.equals("nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l"));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test337");
        java.lang.String str2 = strman.Strman.repeat("hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", 294);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test338");
        boolean boolean2 = strman.Strman.contains("1097nullih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test339");
        java.lang.String str1 = strman.Strman.rightTrim("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test340");
        java.lang.String str2 = strman.Strman.toDecamelize("hi", "");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi" + "'", str2.equals("hi"));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test341");
        java.lang.String[] strArray2 = strman.Strman.split("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "79llunhihi779llun979llun-l79llun-l79llun-u79llun-n79llun-hihi");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test342");
        java.lang.String str2 = strman.Strman.last("109700078001170010800108000570005500110001100011700108", 4944);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "109700078001170010800108000570005500110001100011700108" + "'", str2.equals("109700078001170010800108000570005500110001100011700108"));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test343");
        boolean boolean2 = strman.Strman.contains("nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test344");
        int int3 = strman.Strman.lastIndexOf("Ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "NULL97", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test345");
        try {
            java.lang.String str3 = strman.Strman.slice("Null97Nnull97Unull97Lnull97Lnull979null977null97", (int) (byte) 1, 4944);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 4944");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test346");
        java.lang.String str1 = strman.Strman.capitalize("null97nnul1097null971097");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Null97nnul1097null971097" + "'", str1.equals("Null97nnul1097null971097"));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test347");
        java.lang.String[] strArray2 = strman.Strman.split("hi!hi!", "hi!");
        java.lang.String str4 = strman.Strman.join(strArray2, "hihi");
        java.lang.String[] strArray5 = strman.Strman.removeEmptyStrings(strArray2);
        java.util.List<java.lang.String> strList6 = strman.Strman.zip(strArray5);
        java.util.List<java.lang.String> strList7 = strman.Strman.zip(strArray5);
        java.lang.String str9 = strman.Strman.join(strArray5, "10010110000000000001001000000000");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test348");
        java.lang.String str2 = strman.Strman.removeRight("Ihi H", "000000000179LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN10100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Ihi H" + "'", str2.equals("Ihi H"));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test349");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("aWhpX2g=");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test350");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("nullnull97nnul97");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test351");
        java.lang.String[] strArray0 = null;
        try {
            java.lang.String[] strArray1 = strman.Strman.removeEmptyStrings(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array should not be null");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test352");
        java.lang.String[] strArray1 = strman.Strman.words("0");
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test353");
        int int3 = strman.Strman.lastIndexOf("lunn79llun", "hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_hi_null97hi00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test354");
        int int2 = strman.Strman.lastIndexOf("", "00000000001100110000000000110101");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test355");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("00078001170010800108000570005500110001100011700108", (int) 'a');
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test356");
        java.lang.String str2 = strman.Strman.removeRight("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str2.equals("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test357");
        int int1 = strman.Strman.length("001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000!ih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8327 + "'", int1 == 8327);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test358");
        java.lang.String str1 = strman.Strman.removeSpaces("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078");
        org.junit.Assert.assertTrue("'" + strstr1.equals("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078"));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test359");
        java.lang.String[] strArray2 = strman.Strman.words("1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", "0000000001101001000000000110100000000000011010010000000001001000");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test360");
        java.lang.String str1 = strman.Strman.decEncode("Null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055" + "'", str1.equals("000780011700108001080005700055000780011000117001080010800057000550008500110001170010800108000570005500076001100011700108001080005700055000760011000117001080010800057000550005700110001170010800108000570005500055001100011700108001080005700055"));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test361");
        boolean boolean1 = strman.Strman.isLowerCase("aWhpX2g=");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test362");
        java.lang.String str3 = strman.Strman.safeTruncate("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 0, "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test363");
        java.lang.String str3 = strman.Strman.leftPad("001040010500110001170010800108000570005500078001100011700108", "79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "001040010500110001170010800108000570005500078001100011700108" + "'", str3.equals("001040010500110001170010800108000570005500078001100011700108"));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test364");
        java.lang.String str2 = strman.Strman.repeat("MzU=", 61);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=" + "'", str2.equals("MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU="));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test365");
        java.lang.String[] strArray3 = strman.Strman.words("", "null");
        java.util.Optional<java.lang.String> strOptional4 = strman.Strman.trimStart("", strArray3);
        java.lang.Class<?> wildcardClass5 = strOptional4.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strOptional4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test366");
        java.lang.String str1 = strman.Strman.rightTrim("ihi-h");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "ihi-h" + "'", str1.equals("ihi-h"));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test367");
        int int3 = strman.Strman.lastIndexOf("!ih", "006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null", true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test368");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test369");
        java.lang.String str3 = strman.Strman.removeLeft("aWhpX2g=", "N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "aWhpX2g=" + "'", str3.equals("aWhpX2g="));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test370");
        java.lang.String str3 = strman.Strman.truncate("", 100, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test371");
        int int4 = strman.Strman.indexOf("79llun779llun979llunL79llunL79llunU79llunN79llun", "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!iH00390037", (int) (short) 100, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test372");
        java.lang.String[] strArray1 = null;
        try {
            boolean boolean3 = strman.Strman.containsAll("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", strArray1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test373");
        java.lang.String str1 = strman.Strman.swapCase("00078001170010800108000570005500110001100011700108");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00078001170010800108000570005500110001100011700108" + "'", str1.equals("00078001170010800108000570005500110001100011700108"));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test374");
        int int4 = strman.Strman.lastIndexOf("", "35blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078hihi", (int) (short) 100, true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test375");
        boolean boolean3 = strman.Strman.isEnclosedBetween("hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078", "00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test376");
        java.lang.String str1 = strman.Strman.lowerFirst("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e" + "'", str1.equals("hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e"));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test377");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.head("hi!hi!");
        java.lang.Class<?> wildcardClass2 = strOptional1.getClass();
        boolean boolean3 = strman.Strman.isString((java.lang.Object) strOptional1);
        org.junit.Assert.assertNotNull(strOptional1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test378");
        java.lang.String str3 = strman.Strman.removeLeft("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", "!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str3.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97_nnull97_unull97_lnull97_lnull979null977null97_hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test379");
        int int3 = strman.Strman.lastIndexOf("0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056", "006e0075006c006c0039003700390037", false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test380");
        java.lang.String str1 = strman.Strman.toCamelCase("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97"));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test381");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.at("-1", 4);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test382");
        boolean boolean4 = strman.Strman.endsWith("nULL97NNUL", "HiHi", 6, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test383");
        java.lang.String str1 = strman.Strman.reverse("10010110000000000001001000000000");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00000000010010000000000001101001" + "'", str1.equals("00000000010010000000000001101001"));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test384");
        java.lang.String str1 = strman.Strman.transliterate("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97histr1.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test385");
        java.lang.String str1 = strman.Strman.rightTrim("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100" + "'", str1.equals("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100"));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test386");
        java.lang.String str1 = strman.Strman.toKebabCase("null");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test387");
        java.lang.String str4 = strman.Strman.replace("nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih", "00110000850007600076000570005500078000780008500076", false);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l" + "'", str4.equals("nTnVsbDk3bm51bA==uTnVsbDk3bm51bA==lTnVsbDk3bm51bA==l"));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test388");
        java.lang.String str1 = strman.Strman.lowerFirst("32");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "32" + "'", str1.equals("32"));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test389");
        try {
            java.lang.String str3 = strman.Strman.decode("nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", 294, 8327);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: radix 8327 greater than Character.MAX_RADIX");
        } catch (java.lang.NumberFormatException e) {
        }
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test390");
        java.lang.String[] strArray5 = strman.Strman.between("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "Null", "nullnull97nnul");
        java.lang.String str6 = strman.Strman.format("", strArray5);
        java.lang.String str7 = strman.Strman.prependArray("Hi!", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Hi!" + "'", str7.equals("Hi!"));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test391");
        java.lang.String str3 = strman.Strman.removeLeft("0010400105", "79llunhihi779llun979llunL79llunL79llunU79llunN79llun", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0010400105" + "'", str3.equals("0010400105"));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test392");
        boolean boolean2 = strman.Strman.inequal("0", "null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test393");
        boolean boolean2 = strman.Strman.endsWith("1097", "MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test394");
        boolean boolean3 = strman.Strman.isEnclosedBetween("ihi-h", "NULL97", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test395");
        try {
            java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("0031006c0075006e006e00370039006c006c0075006e", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 52");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test396");
        java.lang.String str1 = strman.Strman.capitalize("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1.equals("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test397");
        java.lang.String str3 = strman.Strman.truncate("1null97null97Nnull97Unull97Lnull97Lnull979null977null97", 30, "NULL97NNUL!ih");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "1null97null97NnulNULL97NNUL!ih" + "'", str3.equals("1null97null97NnulNULL97NNUL!ih"));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test398");
        java.lang.String str1 = strman.Strman.base64Encode("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037Null");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3TnVsbA==" + "'", str1.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3TnVsbA=="));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test399");
        java.lang.String str1 = strman.Strman.dasherize("NULL97N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "n-u-l-l97-n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("n-u-l-l97-n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test400");
        boolean boolean2 = strman.Strman.unequal("79LLUN779LLUN979LLUNl79LLUNl79LLUNu79LLUNn79LLUN", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test401");
        java.lang.String str1 = strman.Strman.rightTrim("1097nullnull97nnulhi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1097nullnull97nnulhi" + "'", str1.equals("1097nullnull97nnulhi"));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test402");
        boolean boolean1 = strman.Strman.isString((java.lang.Object) "hi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101ihiH");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test403");
        java.lang.String str3 = strman.Strman.removeRight("Null97nnul", "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Null97nnul" + "'", str3.equals("Null97nnul"));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test404");
        java.lang.String str3 = strman.Strman.removeRight("35", "00110000850007600076000570005500078000780008500076", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "35" + "'", str3.equals("35"));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test405");
        java.lang.String str1 = strman.Strman.lowerFirst("Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97Nnull97Unull97Lnull97Lnull979null977null97NULL97" + "'", str1.equals("null97Nnull97Unull97Lnull97Lnull979null977null97NULL97"));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test406");
        java.lang.String str1 = strman.Strman.removeSpaces("lunn79llun");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "lunn79llun" + "'", str1.equals("lunn79llun"));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test407");
        java.lang.String str3 = strman.Strman.truncate("", 0, "1097nullnull97nnulhi");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test408");
        java.lang.String str3 = strman.Strman.insert("", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97", (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "" + "'", str3.equals(""));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test409");
        boolean boolean2 = strman.Strman.isEnclosedBetween("006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037006e0075006c006c00390037", "ihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test410");
        java.lang.String str1 = strman.Strman.toKebabCase("N Ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test411");
        java.lang.String str1 = strman.Strman.dasherize("ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "ihi-hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("ihi-hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test412");
        java.lang.String str1 = strman.Strman.reverse("Ihi_hhi-hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "10145848435558484994584849945848475158484551584841012584841014584843555848499458484994584847515848455158484353584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484751584841014584843555848499458484994584847515848455158484551584841014584843555848499458484994584847515848455158484ih-ihh_ihI" + "'", str1.equals("10145848435558484994584849945848475158484551584841012584841014584843555848499458484994584847515848455158484353584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484992584841014584843555848499458484994584847515848455158484751584841014584843555848499458484994584847515848455158484551584841014584843555848499458484994584847515848455158484ih-ihh_ihI"));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test413");
        long long4 = strman.Strman.countSubstr("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", "32", true, false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test414");
        java.lang.String str2 = strman.Strman.ensureRight("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str2.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97Nnull97Unull97Lnull97Lnull979null977null97Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test415");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("7210533hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test416");
        java.lang.String str1 = strman.Strman.htmlEncode("blVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxMTlVMTE5VTExOVUxM");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test417");
        java.lang.String str3 = strman.Strman.ensureRight("hi!hi!", "null", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "hi!hi!null" + "'", str3.equals("hi!hi!null"));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test418");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test419");
        java.lang.String str1 = strman.Strman.humanize("hi-hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi hi" + "'", str1.equals("Hi hi"));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test420");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.tail("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test421");
        int int2 = strman.Strman.lastIndexOf("1101171081085755Null97Nnull97Unull97Lnull97Lnull979null977null97", "006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test422");
        int int2 = strman.Strman.lastIndexOf("TlVMTDk3", "nullnull97nnul97");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test423");
        java.lang.String str1 = strman.Strman.toSnakeCase("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihiH");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi_h" + "'", str1.equals("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi_h"));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test424");
        java.lang.String str1 = strman.Strman.rightTrim("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078");
        org.junit.Assert.assertTrue("'" + strstr1.equals("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078"));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test425");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi", (int) '#');
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test426");
        long long2 = strman.Strman.countSubstr("!ihnull", "7210533");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test427");
        java.lang.String str3 = strman.Strman.insert("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "006900680069005f006800680069002d
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3.equals("006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test428");
        boolean boolean4 = strman.Strman.endsWith("32", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", 3, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test429");
        boolean boolean2 = strman.Strman.inequal("null", "10010110000000000001001000000000");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test430");
        java.lang.String str1 = strman.Strman.formatNumber((-1L));
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "-1" + "'", str1.equals("-1"));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test431");
        java.lang.String str1 = strman.Strman.removeNonWords("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str1.equals("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test432");
        int int1 = strman.Strman.length
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6432 + "'", int1 == 6432);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test433");
        java.lang.String str3 = strman.Strman.ensureRight("nULL97NNUL", "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull", true);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "nULL97NNULNullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull" + "'", str3.equals("nULL97NNULNullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull"));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test434");
        java.lang.String str1 = strman.Strman.toCamelCase("00078001170010800108000570005500110001100011700108");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00078001170010800108000570005500110001100011700108" + "'", str1.equals("00078001170010800108000570005500110001100011700108"));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test435");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimStart("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0ZTAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwNTUwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDRjMDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3MDA0YzAwNmUwMDc1MDA2YzAwNmMwMDM5MDAzNzAwMzkwMDZlMDA3NTAwNmMwMDZjMDAzOTAwMzcwMDM3MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111011000000000001101100000000000110110000000001010111000000000011101100000000000110110000000000011011000000000101011100000000001110110000000000011011000000000001101100000000010101110000000000111001000000000-ih79llun-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih-ih");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test436");
        java.lang.String str2 = strman.Strman.removeLeft("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3", "nullHI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3" + "'", str2.equals("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM3"));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test437");
        java.lang.String str1 = strman.Strman.humanize("ihi_hhi_hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Ihi hhi hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str1.equals("Ihi hhi hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test438");
        java.lang.String str1 = strman.Strman.humanize("Null97Nnull97Unull97Lnull97Lnull979null977null97NULL97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Null97 nnull97 unull97 lnull97 lnull979null977null97 null97" + "'", str1.equals("Null97 nnull97 unull97 lnull97 lnull979null977null97 null97"));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test439");
        java.lang.String str3 = strman.Strman.removeLeft("006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "006900680069005f006800680069002dhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3.equals("006900680069005f006800680069002d0068006900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003500340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500310035003700340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320039003900340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500330035003300340038003400380035003100350035003400380034003800350031003500370034003800340038003500340039003900340038003400380035003400390039003400380034003800350035003500330034003800340038003500340031003000310034003800340038003500320031003000310034003800340038003500310035003500340038003400380035003100350037003400380034003800350034003900390034003800340038003500340039003900340038003400380035003500350033003400380034003800350034003100300031hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test440");
        java.lang.String str2 = strman.Strman.removeLeft("NULL97NNUL", "1097nullnull97nnulhi");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "NULL97NNUL" + "'", str2.equals("NULL97NNUL"));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test441");
        java.lang.String str1 = strman.Strman.htmlDecode("79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null" + "'", str1.equals("null"));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test442");
        try {
            java.lang.String str3 = strman.Strman.decode("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101", (int) (byte) -1, 8327);
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Illegal repetition near index 6\r\n(?<=\\G.{-1})\r\n      ^");
        } catch (java.util.regex.PatternSyntaxException e) {
        }
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test443");
        boolean boolean2 = strman.Strman.isEnclosedBetween("003900370010400105", "11");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test444");
        java.lang.String str1 = strman.Strman.decEncode("000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055");
        org.junit.Assert.assertTrue("'" + strstr1.equals("000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000490004800048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004900049000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000490004800056000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000480005600048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004800053000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000480005300053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053"));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test445");
        java.lang.String str3 = strman.Strman.surround("Mw==", "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97", "nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97Mw==nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710" + "'", str3.equals("NULL971null97null97Nnull97Unull97Lnull97Lnull979null977null97Mw==nULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710"));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test446");
        boolean boolean1 = strman.Strman.isLowerCase("hihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710n-u-l-l97-n-n-u-l");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test447");
        java.lang.String str2 = strman.Strman.removeLeft("1097null97", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1097null97" + "'", str2.equals("1097null97"));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test448");
        boolean boolean3 = strman.Strman.isEnclosedBetween("79llunhihi779llun979llunL79llunL79llunU79llunN79llunHihi", "null97nnul1097null971097", "n-u-l-l97-n-ullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test449");
        java.lang.String str1 = strman.Strman.decEncode("00104001050010400105000780008500076000760005700055001100007800085000760007600057000550011700078000850007600076000570005500108000780008500076000760005700055001080007800085000760007600057000550005700078000850007600076000570005500055000780008500076000760005700055000570005500049000480011000045001170004500108000450010800057000550004500110000450011000045001170004500108");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0004800048000490004800052000480004800049000480005300048000480004900048000520004800048000490004800053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000490004800048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004900049000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000490004800056000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000480005600048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004800053000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000480005300053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800048000530005500048000480004800053000530004800048000480005200057000480004800048000520005600048000480004900049000480004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056000480004800048000520005300048000480004900048000560004800048000480005300055000480004800048000530005300048000480004800052000530004800048000490004900048000480004800048000520005300048000480004900049000480004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056" + "'", str1.equals("0004800048000490004800052000480004800049000480005300048000480004900048000520004800048000490004800053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000490004800048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004900049000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000490004800056000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800049000480005600048000480004800055000560004800048000480005600053000480004800048000550005400048000480004800055000540004800048000480005300055000480004800048000530005300048000480004800053000550004800048000480005500056000480004800048000560005300048000480004800055000540004800048000480005500054000480004800048000530005500048000480004800053000530004800048000480005300053000480004800048000550005600048000480004800056000530004800048000480005500054000480004800048000550005400048000480004800053000550004800048000480005300053000480004800048000530005500048000480004800053000530004800048000480005200057000480004800048000520005600048000480004900049000480004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056000480004800048000520005300048000480004900048000560004800048000480005300055000480004800048000530005300048000480004800052000530004800048000490004900048000480004800048000520005300048000480004900049000480004800048000480005200053000480004800049000490005500048000480004800052000530004800048000490004800056"));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test450");
        java.lang.String str1 = strman.Strman.dasherize("001040010500110001170010800108000570005500078001100011700108");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "001040010500110001170010800108000570005500078001100011700108" + "'", str1.equals("001040010500110001170010800108000570005500078001100011700108"));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test451");
        boolean boolean2 = strman.Strman.unequal("100", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100null97null97nnull97unull97lnull97lnull979null977null97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test452");
        java.lang.String str1 = strman.Strman.reverse("hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "ih" + "'", str1.equals("ih"));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test453");
        java.lang.String str1 = strman.Strman.collapseWhitespace("hi");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "hi" + "'", str1.equals("hi"));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test454");
        java.lang.String[] strArray2 = strman.Strman.chop("NULL97NNUL!ih", 4);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test455");
        boolean boolean4 = strman.Strman.endsWith("MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=MzU=", "001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi_h", 10, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test456");
        java.lang.String[] strArray1 = null;
        java.lang.String str2 = strman.Strman.appendArray("006e0075006c006c00390037", strArray1);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "006e0075006c006c00390037" + "'", str2.equals("006e0075006c006c00390037"));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test457");
        java.util.Map<java.lang.Character, java.lang.Long> charMap1 = strman.Strman.charsCount
        org.junit.Assert.assertNotNull(charMap1);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test458");
        java.lang.String[] strArray2 = strman.Strman.chop("ihiH", 1);
        java.lang.String[] strArray3 = strman.Strman.removeEmptyStrings(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test459");
        int int4 = strman.Strman.indexOf("", "100", (int) (short) 100, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test460");
        java.lang.String str2 = strman.Strman.removeLeft("1null97null97Nnull97Unull97Lnull97Lnull979null977null97", "0004800048000490004900048000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000480005500056000480004800049000490004800048000480004900049000550004800048000490004800056");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1null97null97Nnull97Unull97Lnull97Lnull979null977null97" + "'", str2.equals("1null97null97Nnull97Unull97Lnull97Lnull979null977null97"));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test461");
        long long4 = strman.Strman.countSubstr("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", false, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test462");
        boolean boolean4 = strman.Strman.endsWith("0033", "nullhi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-hi-null97hi-00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e", 10, false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test463");
        java.lang.String str1 = strman.Strman.decEncode("Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test464");
        java.lang.String str1 = strman.Strman.decEncode("MDA2ZTAwNzUwMDZjMDA2YzAwMzkwMDM300078001170010800108000570005500110001100011700108");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00077000680006500050000900008400065001190007800122000850011900077000680009000106000770006800065000500008900122000650011900077001220010700119000770006800077000510004800048000480005500056000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000490004900048000480004800049000490004800048000480004900049000550004800048000490004800056" + "'", str1.equals("00077000680006500050000900008400065001190007800122000850011900077000680009000106000770006800065000500008900122000650011900077001220010700119000770006800077000510004800048000480005500056000480004800049000490005500048000480004900048000560004800048000490004800056000480004800048000530005500048000480004800053000530004800048000490004900048000480004800049000490004800048000480004900049000550004800048000490004800056"));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test465");
        java.lang.String str1 = strman.Strman.collapseWhitespace("Hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hi!" + "'", str1.equals("Hi!"));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test466");
        boolean boolean2 = strman.Strman.unequal("9ihiH7", "aWhpX2g=");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test467");
        java.lang.String str1 = strman.Strman.swapCase("003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003000340030003000310030003500300030003000330033003000300031003100300030003000310031003700300030003100300038003000300031003000380030003000300035003700300030003000350035");
        org.junit.Assert.assertTrue("'" + strstr1.equals
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test468");
        java.lang.String str1 = strman.Strman.reverse("Null97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "79llun779llun979llunL79llunL79llunU79llunN79lluN" + "'", str1.equals("79llun779llun979llunL79llunL79llunU79llunN79lluN"));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test469");
        long long4 = strman.Strman.countSubstr("hi-hi", "Nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull97Nnull97Unull97Lnull97Lnull979null977null97hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97", true, true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test470");
        java.lang.String str1 = strman.Strman.transliterate("00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k" + "'", str1.equals("00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k"));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test471");
        java.lang.String str1 = strman.Strman.decEncode("00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k00001p00001r00003i00003i00003r00003k00001p00001p00001r00003i00003i00003r00003k00001r00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003i00001p00001r00003i00003i00003r00003k00003r00001p00001r00003i00003i00003r00003k00003k00001p00001r00003i00003i00003r00003k");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900112000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480004900114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100105000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100114000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107000480004800048000480005100107000480004800048000480004900112000480004800048000480004900114000480004800048000480005100105000480004800048000480005100105000480004800048000480005100114000480004800048000480005100107" + "'", str1.equals
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test472");
        java.lang.String str1 = strman.Strman.removeSpacesih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
        org.junit.Assert.assertTrue("'" + strih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihstr1.equalsih79llun!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test473");
        java.lang.String str3 = strman.Strman.surround("null97Nnull97Unull97Lnull97Lnull979null977null97NULL97", "!ihnull", "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "!ihnullnull97Nnull97Unull97Lnull97Lnull979null977null97NULL9748485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101" + "'", str3.equals("!ihnullnull97Nnull97Unull97Lnull97Lnull979null977null97NULL9748485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101"));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test474");
        boolean boolean2 = strman.Strman.endsWith("ihiH", "7210533");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test475");
        java.lang.String[] strArray2 = strman.Strman.words("109700078001170010800108000570005500110001100011700108", "Ihi hhi hi48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101");
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test476");
        java.lang.String[] strArray5 = strman.Strman.between("000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "Null", "nullnull97nnul");
        java.lang.String str6 = strman.Strman.format("", strArray5);
        java.lang.String str7 = strman.Strman.prependArray("null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL" + "'", str7.equals("null97n uLLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL"));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test477");
        int int4 = strman.Strman.indexOf("MzU=", "HihihihiNULL97nNULL97uNULL97lNULL97lNULL979NULL977NULL979710", (int) (short) 100, false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test478");
        java.util.Optional<java.lang.String> strOptional1 = strman.Strman.trimEnd("nullnULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULLNULL");
        org.junit.Assert.assertNotNull(strOptional1);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test479");
        java.lang.String str1 = strman.Strman.htmlEncode("001101100000000010101110000000000111011000000000011101100000000011101100000000001001110000000000001101100000000000110110000000001010111000000000011101100000000010010110000000000001011000000000101101000000000010010110000000000001011000000000ihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi_h");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull&UnderBar;null" + "'", str1.equals("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull&UnderBar;null"));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test480");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("null97Nnul", (int) (byte) 1);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test481");
        java.lang.String str1 = strman.Strman.reverse("nullhi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihllun" + "'", str1.equals("!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ihllun"));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test482");
        java.lang.String[] strArray4 = strman.Strman.words("", "hi!");
        java.lang.String str5 = strman.Strman.format("null", strArray4);
        java.lang.String str6 = strman.Strman.prependArray("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "null" + "'", str5.equals("null"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str6.equals("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test483");
        java.lang.String str3 = strman.Strman.removeLeft("11", "000720010500033001040010500033", false);
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "11" + "'", str3.equals("11"));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test484");
        boolean boolean3 = strman.Strman.containsfalse);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test485");
        java.lang.String str1 = strman.Strman.removeSpaces("null97");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "null97" + "'", str1.equals("null97"));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test486");
        java.lang.String str1 = strman.Strman.humanize("hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!" + "'", str1.equals("Hihihi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!"));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test487");
        java.lang.String[] strArray2 = strman.Strman.chop("000000005500000000570000000076000000007600000000850000000078000000005500000000550000000057000000007600000000760000000085000000007800000000570000000055000000005700000000760000000076000000008500000000780000000108000000005500000000570000000076000000007600000000850000000078000000010800000000550000000057000000007600000000760000000085000000007800000001170000000055000000005700000000760000000076000000008500000000780000000110000000005500000000570000000076000000007600000000850000000078", 6);
        java.lang.String str4 = strman.Strman.join(strArray2, "hi!hi!97");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "000000hi!hi!97005500hi!hi!97000000hi!hi!97570000hi!hi!97000076hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97850000hi!hi!97000078hi!hi!97000000hi!hi!97005500hi!hi!97000000hi!hi!97550000hi!hi!97000057hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97760000hi!hi!97000085hi!hi!97000000hi!hi!97007800hi!hi!97000000hi!hi!97570000hi!hi!97000055hi!hi!97000000hi!hi!97005700hi!hi!97000000hi!hi!97760000hi!hi!97000076hi!hi!97000000hi!hi!97008500hi!hi!97000000hi!hi!97780000hi!hi!97000108hi!hi!97000000hi!hi!97005500hi!hi!97000000hi!hi!97570000hi!hi!97000076hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97850000hi!hi!97000078hi!hi!97000000hi!hi!97010800hi!hi!97000000hi!hi!97550000hi!hi!97000057hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97760000hi!hi!97000085hi!hi!97000000hi!hi!97007800hi!hi!97000001hi!hi!97170000hi!hi!97000055hi!hi!97000000hi!hi!97005700hi!hi!97000000hi!hi!97760000hi!hi!97000076hi!hi!97000000hi!hi!97008500hi!hi!97000000hi!hi!97780000hi!hi!97000110hi!hi!97000000hi!hi!97005500hi!hi!97000000hi!hi!97570000hi!hi!97000076hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97850000hi!hi!97000078" + "'", str4.equals("000000hi!hi!97005500hi!hi!97000000hi!hi!97570000hi!hi!97000076hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97850000hi!hi!97000078hi!hi!97000000hi!hi!97005500hi!hi!97000000hi!hi!97550000hi!hi!97000057hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97760000hi!hi!97000085hi!hi!97000000hi!hi!97007800hi!hi!97000000hi!hi!97570000hi!hi!97000055hi!hi!97000000hi!hi!97005700hi!hi!97000000hi!hi!97760000hi!hi!97000076hi!hi!97000000hi!hi!97008500hi!hi!97000000hi!hi!97780000hi!hi!97000108hi!hi!97000000hi!hi!97005500hi!hi!97000000hi!hi!97570000hi!hi!97000076hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97850000hi!hi!97000078hi!hi!97000000hi!hi!97010800hi!hi!97000000hi!hi!97550000hi!hi!97000057hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97760000hi!hi!97000085hi!hi!97000000hi!hi!97007800hi!hi!97000001hi!hi!97170000hi!hi!97000055hi!hi!97000000hi!hi!97005700hi!hi!97000000hi!hi!97760000hi!hi!97000076hi!hi!97000000hi!hi!97008500hi!hi!97000000hi!hi!97780000hi!hi!97000110hi!hi!97000000hi!hi!97005500hi!hi!97000000hi!hi!97570000hi!hi!97000076hi!hi!97000000hi!hi!97007600hi!hi!97000000hi!hi!97850000hi!hi!97000078"));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test488");
        boolean boolean3 = strman.Strman.contains("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hihihi", "nullnullnullnullnullnullnullnullnullnull006e0075006c006c0039003700390037Hihi", true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test489");
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.util.List<java.lang.String> strList5 = strman.Strman.zip(strArray4);
        boolean boolean7 = strman.Strman.containsAny("", strArray4, true);
        boolean boolean9 = strman.Strman.containsAny("hi!hi!", strArray4, true);
        boolean boolean11 = strman.Strman.containsAll("10", strArray4, false);
        java.lang.String str13 = strman.Strman.join(strArray4, "hi!");
        java.lang.String[] strArray14 = strman.Strman.removeEmptyStrings(strArray4);
        java.lang.String str15 = strman.Strman.append("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul", strArray14);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul" + "'", str15.equals("48485155484851574848549948485499484855534848541014848515548485155484851574848549948485499484855534848541014848515748485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848529948485155484851574848549948485499484855534848541014848535348485155484851574848549948485499484855534848541014848521014848515548485157484854994848549948485553484854101nullnull97nnul"));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test490");
        boolean boolean2 = strman.Strman.unequal("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", "null97Nnul");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test491");
        boolean boolean1 = strman.Strman.isString((java.lang.Object
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test492");
        long long4 = strman.Strman.countSubstr("Hihi", "000000000110100000000000011010010000000000101101000000000110100000000000011010010000000001101110000000000111010100000000011011000000000001101100000000000011100100000000001101110000000001101110000000000110111000000000011101010000000001101100", true, false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test493");
        boolean boolean3 = strman.Strman.isEnclosedBetween("HiHinull97nnul", "9710", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!00370039006c006c0075006e003700370039006c006c0075006e003900370039006c006c0075006e004c00370039006c006c0075006e004c00370039006c006c0075006e005500370039006c006c0075006e004e00370039006c006c0075006e");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test494");
        java.lang.String str1 = strman.Strman.removeNonWords("1097");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "1097" + "'", str1.equals("1097"));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test495");
        long long2 = strman.Strman.countSubstrnull97Nnull97Unull97Lnull97Lnull979null977null97");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test496");
        boolean boolean2 = strman.Strman.endsWith("1lunn79llun", "null97Nnull97Unull97Lnull97Lnull979null977null97NULL97");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test497");
        java.util.Optional<java.lang.String> strOptional2 = strman.Strman.first("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!null97hi!null97Nnul", (int) (short) 0);
        org.junit.Assert.assertNotNull(strOptional2);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test498");
        java.lang.String str1 = strman.Strman.toStudlyCase("0033");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "0033" + "'", str1.equals("0033"));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test499");
        java.lang.String str1 = strman.Strman.binEncode("97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97null97");
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test500");
        java.lang.String str1 = strman.Strman.removeNonWords("nULL97NNUL");
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "nULL97NNUL" + "'", str1.equals("nULL97NNUL"));
    }
}

